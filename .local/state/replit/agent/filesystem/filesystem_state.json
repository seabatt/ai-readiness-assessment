{"file_contents":{"src/app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@import '../styles/hubspot-form.css';\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-bg-primary text-text-primary;\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Selection color (ai.work brand system) */\n::selection {\n  background-color: #82D895;\n  color: #141414;\n}\n","size_bytes":445},"src/components/ui/Input.tsx":{"content":"import React from 'react';\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  error?: string;\n}\n\nexport default function Input({ label, error, className = '', ...props }: InputProps) {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label className=\"block text-sm text-text-tertiary mb-2\">\n          {label}\n          {props.required && <span className=\"text-accent-orange ml-1\">*</span>}\n        </label>\n      )}\n      <input\n        className={`\n          w-full\n          bg-bg-card\n          border border-bg-card-alt/20\n          text-text-primary\n          px-4 py-3\n          rounded-lg\n          focus:border-highlight\n          focus:outline-none\n          focus:ring-2\n          focus:ring-highlight/30\n          transition-all duration-200\n          placeholder:text-text-tertiary/50\n          ${error ? 'border-accent-orange' : ''}\n          ${className}\n        `}\n        {...props}\n      />\n      {error && <p className=\"text-sm text-accent-orange mt-1\">{error}</p>}\n    </div>\n  );\n}\n","size_bytes":1065},"src/components/assessment/CurrentStateQuestions.tsx":{"content":"import Select from '@/components/ui/Select';\nimport Card from '@/components/ui/Card';\nimport { \n  APPROVAL_WORKFLOW_OPTIONS, \n  REPETITIVE_PERCENTAGE_OPTIONS, \n  PAIN_POINT_OPTIONS \n} from '@/lib/constants';\n\ninterface CurrentStateQuestionsProps {\n  approvalWorkflows: string;\n  repetitivePercentage: string;\n  primaryPainPoint: string;\n  onChange: (field: string, value: string) => void;\n}\n\nexport default function CurrentStateQuestions({\n  approvalWorkflows,\n  repetitivePercentage,\n  primaryPainPoint,\n  onChange\n}: CurrentStateQuestionsProps) {\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n        Last Few Questions About Your Current Setup\n      </h2>\n      <p className=\"text-text-secondary mb-8\">\n        This helps us provide the most accurate assessment\n      </p>\n\n      <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n        <div className=\"space-y-6\">\n          <Select\n            label=\"Do you have formal approval workflows for access requests?\"\n            value={approvalWorkflows}\n            onChange={(e) => onChange('approvalWorkflows', e.target.value)}\n            options={APPROVAL_WORKFLOW_OPTIONS}\n            required\n          />\n\n          <Select\n            label=\"What percentage of tickets are repetitive/routine?\"\n            value={repetitivePercentage}\n            onChange={(e) => onChange('repetitivePercentage', e.target.value)}\n            options={REPETITIVE_PERCENTAGE_OPTIONS}\n            required\n          />\n\n          <Select\n            label=\"Primary pain point with current ITSM\"\n            value={primaryPainPoint}\n            onChange={(e) => onChange('primaryPainPoint', e.target.value)}\n            options={PAIN_POINT_OPTIONS}\n            required\n          />\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1850},"src/app/page.tsx":{"content":"'use client';\n\nimport Link from \"next/link\";\nimport Image from \"next/image\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-bg-primary text-text-primary\">\n      {/* Preheader */}\n      <div className=\"bg-bg-card border-b border-bg-card-alt/20\">\n        <div className=\"max-w-7xl mx-auto px-6 py-2 flex items-center justify-center gap-2\">\n          <svg\n            className=\"w-4 h-4 text-highlight\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n            />\n          </svg>\n          <span className=\"text-xs text-text-tertiary\">\n            Assessment tool based on real IT automation data\n          </span>\n        </div>\n      </div>\n\n      {/* Header */}\n      <header className=\"border-b border-bg-card-alt/20\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <Link href=\"/\">\n            <Image\n              src=\"/images/aiwork-logo.png\"\n              alt=\"ai.work\"\n              width={120}\n              height={30}\n              className=\"h-7 w-auto\"\n            />\n          </Link>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto px-6 py-20\">\n        {/* Hero Section */}\n        <section className=\"text-center mb-20\">\n          <h1 className=\"text-4xl md:text-6xl font-normal mb-6 leading-tight text-text-primary\">\n            Stop guessing how an AI Worker fits into your systems.{\" \"}\n            <strong>Start with a blueprint.</strong>\n          </h1>\n          <p className=\"text-text-tertiary text-xl mb-8 max-w-3xl mx-auto leading-relaxed\">\n            Get a personalized <strong>blueprint</strong> that\n            identifies your top automation use cases and outlines a clear plan to\n            implement AI Workers —{\" \"}\n            <strong>all based on your actual tech stack</strong>\n          </p>\n\n          {/* CTA Button */}\n          <div className=\"max-w-md mx-auto mb-6\">\n            <Link\n              href=\"/assessment\"\n              className=\"w-full bg-white text-black px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-flex items-center justify-center gap-2\"\n            >\n              <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n              Get Your Blueprint\n              <span>→</span>\n            </Link>\n          </div>\n\n          <div className=\"flex items-center justify-center gap-2 mb-6\">\n            <span className=\"text-text-tertiary\">\n              5 minutes • Instant results\n            </span>\n          </div>\n          <p className=\"text-xs text-text-tertiary mt-6 text-center\">\n            No sensitive data stored or shared. Responses anonymized for\n            benchmarking.\n          </p>\n        </section>\n\n        {/* Problem Statement */}\n        <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-8 mb-20\">\n          <p className=\"text-text-secondary mb-4 text-center\">\n            Use this tool to get a data-driven, reality-based assessment of what\n            your organization could responsibly automate with AI in the next\n            year.\n          </p>\n          <p className=\"font-semibold text-center text-lg text-text-primary\">\n            Assess your readiness for autonomous work today.\n          </p>\n        </div>\n\n        {/* Feature Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-20\">\n          {/* Card 1 */}\n          <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-8 hover:border-bg-card-alt/40 transition-colors\">\n            <div className=\"flex md:block items-start gap-4\">\n              <div className=\"w-12 h-12 bg-bg-card-alt rounded-full flex items-center justify-center flex-shrink-0 md:mb-4\">\n                <svg\n                  className=\"w-6 h-6 text-text-tertiary\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" strokeWidth=\"2\" />\n                  <path strokeWidth=\"2\" d=\"M12 6v6l4 2\" />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg mb-2 text-text-primary\">\n                  Readiness Score\n                </h3>\n                <p className=\"text-sm text-text-tertiary\">\n                  0-100 score across 5 key pillars\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Card 2 */}\n          <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-8 hover:border-bg-card-alt/40 transition-colors\">\n            <div className=\"flex md:block items-start gap-4\">\n              <div className=\"w-12 h-12 bg-highlight/20 rounded-full flex items-center justify-center flex-shrink-0 md:mb-4\">\n                <svg\n                  className=\"w-6 h-6 text-highlight\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg mb-2 text-text-primary\">\n                  Opportunity Map\n                </h3>\n                <p className=\"text-sm text-text-tertiary\">\n                  AI Workers matched to your systems and workflows.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Card 3 */}\n          <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-8 hover:border-bg-card-alt/40 transition-colors\">\n            <div className=\"flex md:block items-start gap-4\">\n              <div className=\"w-12 h-12 bg-status-active/20 rounded-full flex items-center justify-center flex-shrink-0 md:mb-4\">\n                <svg\n                  className=\"w-6 h-6 text-blue-500\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeWidth=\"2\"\n                    d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\"\n                  />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg mb-2 text-text-primary\">\n                  Implementation Roadmap\n                </h3>\n                <p className=\"text-sm text-text-tertiary\">\n                  Step-by-step actions to deploy safely and efficiently.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Card 4 */}\n          <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-8 hover:border-bg-card-alt/40 transition-colors\">\n            <div className=\"flex md:block items-start gap-4\">\n              <div className=\"w-12 h-12 bg-status-warning/20 rounded-full flex items-center justify-center flex-shrink-0 md:mb-4\">\n                <svg\n                  className=\"w-6 h-6 text-status-warning\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeWidth=\"2\"\n                    d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\"\n                  />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg mb-2 text-text-primary\">\n                  Realistic Expectations\n                </h3>\n                <p className=\"text-sm text-text-tertiary\">\n                  What AI can automate today — and what comes next.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* What You'll Discover Section */}\n        <section className=\"mb-20\">\n          <h2 className=\"text-4xl font-bold text-center mb-16 text-text-primary\">\n            What You'll Discover\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-x-16 gap-y-8 max-w-5xl mx-auto\">\n            {/* Left Column */}\n            <div className=\"space-y-8\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"w-6 h-6 rounded-full bg-highlight/20 flex items-center justify-center flex-shrink-0 mt-1\">\n                  <span className=\"text-highlight text-sm\">✓</span>\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg mb-1 text-text-primary\">\n                    Top automation opportunities\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Workflows AI Workers can handle first.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"w-6 h-6 rounded-full bg-highlight/20 flex items-center justify-center flex-shrink-0 mt-1\">\n                  <span className=\"text-highlight text-sm\">✓</span>\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg mb-1 text-text-primary\">\n                    Impact forecast\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Expected time, cost, and efficiency gains.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Column */}\n            <div className=\"space-y-8\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"w-6 h-6 rounded-full bg-highlight/20 flex items-center justify-center flex-shrink-0 mt-1\">\n                  <span className=\"text-highlight text-sm\">✓</span>\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg mb-1 text-text-primary\">\n                    Practical outcomes{\" \"}\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    See what AI can automate today, and what to expect next.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"w-6 h-6 rounded-full bg-highlight/20 flex items-center justify-center flex-shrink-0 mt-1\">\n                  <span className=\"text-highlight text-sm\">✓</span>\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg mb-1 text-text-primary\">\n                    Shareable report\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Share insights with leadership and stakeholders.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Bottom CTA */}\n        <div className=\"text-center\">\n          <button\n            onClick={() => {\n              document.getElementById('email-form-section')?.scrollIntoView({ \n                behavior: 'smooth',\n                block: 'center'\n              });\n            }}\n            className=\"bg-white text-black px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors mb-4 inline-flex items-center gap-2\"\n          >\n            <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n            Get Your Blueprint →\n          </button>\n          <p className=\"text-text-tertiary text-sm\">\n            Join IT leaders discovering their automation opportunities\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":11994},"src/components/cta/DiscoveryCTA.tsx":{"content":"import { useState } from 'react';\nimport Card from '@/components/ui/Card';\nimport Button from '@/components/ui/Button';\nimport Input from '@/components/ui/Input';\nimport Select from '@/components/ui/Select';\nimport Checkbox from '@/components/ui/Checkbox';\nimport { LeadFormData } from '@/types';\n\nconst ITSM_PLATFORMS = [\n  { value: 'jira', label: 'Jira Service Management' },\n  { value: 'servicenow', label: 'ServiceNow' },\n  { value: 'freshservice', label: 'Freshservice' },\n  { value: 'ivanti', label: 'Ivanti' },\n  { value: 'other', label: 'Other' },\n];\n\nconst MONTHLY_VOLUMES = [\n  { value: '0-500', label: '0-500' },\n  { value: '500-1500', label: '500-1,500' },\n  { value: '1500-5000', label: '1,500-5,000' },\n  { value: '5000-15000', label: '5,000-15,000' },\n  { value: '15000+', label: '15,000+' },\n];\n\nexport default function DiscoveryCTA() {\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState<LeadFormData>({\n    name: '',\n    email: '',\n    company: '',\n    phone: '',\n    itsmPlatform: '',\n    monthlyVolume: '',\n    interestedInDiscovery: true,\n    preferredMeetingTime: '',\n  });\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Here you would integrate with your CRM (HubSpot, Salesforce, etc.)\n    console.log('Form submitted:', formData);\n    setSubmitted(true);\n    \n    // In production, you'd send this to your backend/CRM\n    // Example: await submitToHubSpot(formData);\n  };\n\n  const updateField = (field: keyof LeadFormData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (submitted) {\n    return (\n      <div className=\"max-w-3xl mx-auto mb-16\">\n        <Card>\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-accent-green/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-accent-green\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h3 className=\"text-2xl font-bold text-text-primary mb-2\">\n              Request Received!\n            </h3>\n            <p className=\"text-text-secondary mb-6\">\n              Our team will reach out within 1 business day to schedule your Discovery analysis.\n            </p>\n            <p className=\"text-sm text-text-tertiary\">\n              Check your email ({formData.email}) for confirmation.\n            </p>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          See Exactly Which AI Workers Will Work in YOUR Environment\n        </h2>\n        <p className=\"text-lg text-text-secondary max-w-3xl mx-auto\">\n          This assessment uses industry benchmarks. We can analyze your actual tickets to show you \n          precise automation opportunities and how AI Workers would learn in your specific environment.\n        </p>\n      </div>\n\n      {/* Offer Box */}\n      <Card className=\"mb-8\">\n        <div className=\"flex items-start gap-4 mb-6\">\n          <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-accent-blue\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n            </svg>\n          </div>\n          <div>\n            <h3 className=\"text-xl font-bold text-text-primary mb-2\">\n              Let us run Discovery on your IT environment for one week\n            </h3>\n            <p className=\"text-text-secondary mb-4\">\n              We'll deliver a custom report showing:\n            </p>\n            <ul className=\"space-y-2\">\n              {[\n                'Which pre-built AI Workers from our library fit your specific workflows',\n                'Exact deployment order (what to deploy Week 1, Month 2, etc.)',\n                'Precise time savings based on YOUR ticket data',\n                'How quickly AI Workers will learn your patterns',\n                'ROI projections specific to your team',\n                'Custom 90-day deployment roadmap',\n              ].map((item, index) => (\n                <li key={index} className=\"flex items-start gap-2 text-text-secondary\">\n                  <span className=\"text-accent-green mt-1 flex-shrink-0\">✓</span>\n                  <span>{item}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-brand-secondary/10 pt-6\">\n          <h4 className=\"text-sm font-semibold text-text-primary mb-3\">What We Need:</h4>\n          <ul className=\"space-y-2 mb-6\">\n            <li className=\"flex items-start gap-2 text-sm text-text-secondary\">\n              <span className=\"text-accent-blue mt-0.5\">→</span>\n              <span>Read-only access to your ITSM (Jira/ServiceNow)</span>\n            </li>\n            <li className=\"flex items-start gap-2 text-sm text-text-secondary\">\n              <span className=\"text-accent-blue mt-0.5\">→</span>\n              <span>30-minute kickoff call</span>\n            </li>\n            <li className=\"flex items-start gap-2 text-sm text-text-secondary\">\n              <span className=\"text-accent-blue mt-0.5\">→</span>\n              <span>1-week observation period</span>\n            </li>\n          </ul>\n\n          {!showForm && (\n            <Button onClick={() => setShowForm(true)} className=\"w-full justify-center\">\n              Request Discovery Analysis\n            </Button>\n          )}\n        </div>\n      </Card>\n\n      {/* Form */}\n      {showForm && (\n        <Card>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Input\n                label=\"Name\"\n                required\n                value={formData.name}\n                onChange={(e) => updateField('name', e.target.value)}\n                placeholder=\"John Smith\"\n              />\n              <Input\n                label=\"Work Email\"\n                type=\"email\"\n                required\n                value={formData.email}\n                onChange={(e) => updateField('email', e.target.value)}\n                placeholder=\"john@company.com\"\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Input\n                label=\"Company\"\n                required\n                value={formData.company}\n                onChange={(e) => updateField('company', e.target.value)}\n                placeholder=\"Acme Corp\"\n              />\n              <Input\n                label=\"Phone\"\n                type=\"tel\"\n                required\n                value={formData.phone}\n                onChange={(e) => updateField('phone', e.target.value)}\n                placeholder=\"+1 (555) 123-4567\"\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Select\n                label=\"Current ITSM Platform\"\n                required\n                value={formData.itsmPlatform}\n                onChange={(e) => updateField('itsmPlatform', e.target.value)}\n                options={ITSM_PLATFORMS}\n              />\n              <Select\n                label=\"Monthly Ticket Volume\"\n                required\n                value={formData.monthlyVolume}\n                onChange={(e) => updateField('monthlyVolume', e.target.value)}\n                options={MONTHLY_VOLUMES}\n              />\n            </div>\n\n            <Input\n              label=\"Preferred Meeting Time (optional)\"\n              value={formData.preferredMeetingTime}\n              onChange={(e) => updateField('preferredMeetingTime', e.target.value)}\n              placeholder=\"e.g., Tuesdays 2-4pm EST\"\n            />\n\n            <div className=\"pt-4 border-t border-brand-secondary/10\">\n              <Checkbox\n                label=\"I'm interested in Discovery analysis\"\n                checked={formData.interestedInDiscovery}\n                onChange={(checked) => updateField('interestedInDiscovery', checked)}\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"w-full justify-center\">\n              Submit Request\n            </Button>\n\n            <div className=\"flex flex-wrap gap-6 justify-center text-xs text-text-tertiary\">\n              <div className=\"flex items-center gap-2\">\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>Your data stays private—deleted after analysis</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>No commitment required</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>Average time to first AI Worker: 2 weeks</span>\n              </div>\n            </div>\n          </form>\n        </Card>\n      )}\n\n      {/* Trust Signals */}\n      <div className=\"mt-12 pt-12 border-t border-brand-secondary/10\">\n        <div className=\"flex flex-wrap justify-center items-center gap-8 text-text-tertiary text-sm\">\n          <div>Built by the team behind WalkMe</div>\n          <div className=\"w-px h-4 bg-brand-secondary/20\" />\n          <div>Backed by A*, lool ventures, FirstMinute Capital</div>\n          <div className=\"w-px h-4 bg-brand-secondary/20\" />\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-accent-green\">●</span>\n            SOC2 & GDPR Compliant\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10825},"replit.md":{"content":"# AI Worker Readiness Assessment\n\n## Overview\nThis Next.js tool provides a quick AI Worker Readiness Assessment for IT teams, identifying immediate automation opportunities. It analyzes tech stack and ticket distribution to surface specific AI Worker deployment opportunities with ROI projections. This assessment aims to illustrate quick wins and immediate value, leading to a deeper Data Discovery and Blueprint engagement.\n\n## User Preferences\n- Keep codebase clean and organized\n- Archive deprecated code rather than deleting it for future reference\n- Maintain clear documentation of changes and archive contents\n\n## Recent Changes\n**October 28, 2025 - CRITICAL FIX: Hardcoded TTR Values Causing 12x FTE Inflation**\n- Fixed hardcoded category TTR values in assessment/page.tsx that were 3-5x higher than real customer data\n- Before: applications=1.7hrs, hardware=2.5hrs, onboarding=4.0hrs, security=3.0hrs → Result: 36 FTEs\n- After: applications=0.43hrs, hardware=0.75hrs, onboarding=1.0hrs, security=0.8hrs → Result: 3-8 FTEs\n- Root cause: These inflated baseline TTRs were multiplied by cherry_picking_factor and thousands of tickets, causing hours/month to explode from ~900 to ~10,800\n- Validation: For 15,000-20,000 monthly tickets, projections now correctly show 3-8 FTEs, not 36 FTEs\n- Fixed Next.js 14.2+ API route bug: params must be awaited in /api/assessments/[id] routes to prevent 502 errors on email submission\n\n**October 28, 2025 - Added 35% Deflection Cap to Prevent Unrealistic Projections**\n- Added MAX_DEFLECTION_RATE = 0.35 (35%) to ROI calculator based on real customer ceiling\n- Implemented uniform proration across all metrics when cap is hit (tickets, hours, category breakdown, automation splits)\n- Reduced volume percentages: Okta issues 10% (was 28%), app access 18% total (was 33%), most others 1-3%\n- Total volume coverage: 57.6% (down from 140%+ which caused massive over-stacking)\n- Result: With 19,000 tickets, system now shows ≤6,650 tickets (35%) and ~6-8 FTEs instead of 16,948 (89%) and 97.8 FTEs\n\n**October 28, 2025 - ROI Calculation Fix (Corrected Methodology)**\n- Fixed TTR values to match real customer data: Okta app issues 0.2hrs, app access 0.43hrs, most tickets 0.2-1.0hr range (previously 2-6 hours)\n- Corrected cherry-picking factors to 0.85-1.0 range (from 0.4-0.7) since automation_rate already handles ticket selection\n- Key insight: automation_rate (60-75%) selects WHICH tickets to automate; cherry_picking_factor (0.85-1.0) applies minor TTR discount\n- Added automation_type classification: \"full_automation\" vs \"assisted\" for accurate projections\n- Validated against real report: 32% deflection (3,023 tickets) → 2.8 FTEs ✓ (target: 3 FTEs)\n- Calculation: 843 hrs/mo × 12 = 10,116 hrs/yr, 50% capture = 5,058 hrs ÷ 1,800 hrs/FTE = 2.8 FTEs\n\n**October 27, 2025 - Major Cleanup & Archive Organization**\n- Created `/archive` directory structure for deprecated code and assets\n- Moved report versions v1-v4 (pages and components) to `archive/reports/`\n- Archived 10+ legacy standalone components (ScoreCircle, AIWorkerCard, etc.)\n- Consolidated font files to `public/fonts/`\n- Archived 180+ development artifacts (screenshots, planning docs)\n- Updated tsconfig.json to exclude archive directory from TypeScript compilation\n\n## System Architecture\n\n### UI/UX Decisions\nThe application uses the official Ai.Work brand system with a custom dark theme, specific color palette, standardized spacing, and 200ms transitions. Typography uses the NB International Pro font family. The landing page features a direct \"Get Your Assessment\" CTA, followed by an email capture post-assessment via an email gate strategy. Assessment results are structured to prioritize algorithm analysis, concrete metrics, and immediate opportunities for IT leaders. Numbers are formatted for readability (e.g., $2.9M).\n\n### Technical Implementations\n-   **Framework & Styling**: Next.js 14.2 with TypeScript and Tailwind CSS.\n-   **UI Libraries**: Framer Motion, Recharts, React Hook Form + Zod, @dnd-kit, Lucide React.\n-   **Database & Persistence**: PostgreSQL (Neon-backed) with Drizzle ORM for storing assessment reports (UUID, email, JSONB for data, timestamps). API routes handle CRUD operations.\n-   **HubSpot Integration**: Site-wide tracking script and integrated form for email capture.\n-   **Assessment Flow**: A 3-step process (Tech Stack, Volume & Service Profile, Additional Context). Assessment data is saved to the database, then an email gate prompts for email to unlock the full report.\n-   **Analysis Engines** (`src/lib/engines/`):\n    -   **FeasibilityEngine**: Matches user tech stack against available APIs and use cases.\n    -   **UseCaseMatcher**: Matches ticket distribution to specific AI Workers with conservative, real-world assumptions:\n        - **Automation Rate (60-75%)**: Selects WHICH tickets can be automated (e.g., 60% of Okta issues = the automatable subset)\n        - **Cherry-Picking Factor (0.85-1.0)**: Minor TTR adjustment since automated tickets are slightly easier than category median\n        - **Automation Types**: Distinguishes \"full_automation\" (complete deflection) from \"assisted\" (reduces TTR but doesn't eliminate ticket)\n        - **Real TTR Values**: Based on actual customer data (Okta issues 0.2hrs, app access 0.43hrs, most 0.2-1.0hr range)\n    -   **ROICalculator**: Calculates conservative, finance-friendly ROI:\n        - **Maximum Deflection Cap**: 35% ceiling based on real customer outcomes to prevent unrealistic projections\n        - **Proration Logic**: When cap is hit, uniformly reduces all metrics (tickets, hours, category breakdown) proportionally\n        - **Budget FTE vs. Capacity FTE**: Distinguishes theoretical capacity (hours/2000) from realistic budget impact (captured hours / 1,800 effective hrs/FTE with 50% capture)\n        - **Full vs. Assisted Tracking**: Separately tracks tickets and hours for both automation types\n        - **Confidence Bands**: Expected, Conservative (P70), Very Conservative (P90) scenarios\n        - **Validated**: 32% deflection (3,023 tickets) → 2.8 FTEs matches real customer outcome\n-   **Assessment Results Generation**: V5 reports (default) provide a streamlined, data-focused version without LLM-generated insights. It includes a header, an Executive Summary with readiness percentage, key statistics, and confidence bands, and an Opportunity Analysis section with separate \"Full Automation Opportunities\" and \"AI-Assisted Opportunities\" using single-column use case cards. A \"Deployment Plan\" and \"Expected Outcomes\" section are included, followed by a Call to Action.\n-   **LLM Integration**: V4 reports used OpenAI GPT-4o for strategic insights; V5 reports do not.\n\n### Feature Specifications\n-   **ConnectedAppLogos component**: Displays logos with hover tooltips and \"prominent\" mode.\n-   **V5 Assessment Results**: The active assessment results experience (as of October 2025), offering API-grounded analysis and specific recommendations via `/report/v5/[id]`.\n-   **Email Gate Strategy**: Post-assessment, users encounter an email gate to unlock the full report, which updates their existing database record with their email.\n-   **Assessment Data**: Captures monthly tickets, distribution, email, and context, persisted with a unique UUID.\n-   **Terminology**: The tool is an \"Assessment\"; the follow-up is \"Data Discovery and Blueprint.\"\n\n## External Dependencies\n-   **Image Domains**:\n    -   `cdn.simpleicons.org`\n    -   `logo.clearbit.com`\n-   **APIs**:\n    -   OpenAI GPT-4o (used in V4 reports)\n-   **Integrations**:\n    -   External API configurations referenced internally via `tool-apis.json` and `use-case-mappings.json` (e.g., Ivanti, GitHub, Microsoft Teams, SAP SuccessFactors, Google Workspace).","size_bytes":7776},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  images: {\n    domains: ['cdn.simpleicons.org', 'logo.clearbit.com'],\n  },\n}\n\nmodule.exports = nextConfig\n","size_bytes":194},"src/components/landing/ValueProps.tsx":{"content":"\nimport Card from '@/components/ui/Card';\n\nexport default function ValueProps() {\n  const props = [\n    {\n      icon: '🧠',\n      title: 'Learns Your Environment',\n      points: [\n        'Analyzes your actual ticket patterns',\n        'Understands your specific policies',\n        'Adapts to how your team works'\n      ]\n    },\n    {\n      icon: '📚',\n      title: 'Production-Ready Library',\n      points: [\n        'Many pre-built AI Workers available',\n        'Deploy in days, not quarters',\n        'No custom development required'\n      ]\n    },\n    {\n      icon: '🛡️',\n      title: 'Enterprise-Grade',\n      points: [\n        'Policy-safe autonomous decisions',\n        'Human-in-the-loop when needed',\n        'Full audit trail and dashboards'\n      ]\n    }\n  ];\n\n  return (\n    <section className=\"py-20 px-4 bg-bg-card/30\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {props.map((prop, index) => (\n            <Card key={index}>\n              <div className=\"text-5xl mb-4\">{prop.icon}</div>\n              <h3 className=\"text-2xl font-bold text-text-primary mb-4\">\n                {prop.title}\n              </h3>\n              <ul className=\"space-y-2\">\n                {prop.points.map((point, i) => (\n                  <li key={i} className=\"text-text-secondary flex items-start gap-2\">\n                    <span className=\"text-accent-green mt-1\">✓</span>\n                    <span>{point}</span>\n                  </li>\n                ))}\n              </ul>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1631},"src/components/ui/Checkbox.tsx":{"content":"import React from 'react';\n\ninterface CheckboxProps {\n  label: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n  disabled?: boolean;\n}\n\nexport default function Checkbox({ label, checked, onChange, disabled = false }: CheckboxProps) {\n  return (\n    <label className=\"flex items-center gap-3 cursor-pointer group\">\n      <div className=\"relative\">\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={(e) => onChange(e.target.checked)}\n          disabled={disabled}\n          className=\"sr-only\"\n        />\n        <div\n          className={`\n            w-6 h-6 \n            border-2 \n            rounded \n            transition-all duration-200\n            flex items-center justify-center\n            ${checked \n              ? 'bg-highlight border-highlight shadow-glow-highlight' \n              : 'bg-transparent border-brand-tertiary group-hover:border-brand-secondary'\n            }\n            ${disabled ? 'opacity-50 cursor-not-allowed' : ''}\n          `}\n        >\n          {checked && (\n            <svg className=\"w-4 h-4 text-bg-primary\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n            </svg>\n          )}\n        </div>\n      </div>\n      <span className=\"text-text-secondary group-hover:text-text-primary transition-colors\">\n        {label}\n      </span>\n    </label>\n  );\n}\n","size_bytes":1469},"src/components/assessment/ScaleQuestions.tsx":{"content":"import Select from '@/components/ui/Select';\nimport Card from '@/components/ui/Card';\nimport { \n  TICKET_VOLUME_OPTIONS, \n  TEAM_SIZE_OPTIONS, \n  RESOLUTION_TIME_OPTIONS, \n  EMPLOYEE_COUNT_OPTIONS \n} from '@/lib/constants';\n\ninterface ScaleQuestionsProps {\n  ticketVolume: string;\n  teamSize: string;\n  avgResolutionTime: string;\n  employeeCount: string;\n  onChange: (field: string, value: string) => void;\n}\n\nexport default function ScaleQuestions({\n  ticketVolume,\n  teamSize,\n  avgResolutionTime,\n  employeeCount,\n  onChange\n}: ScaleQuestionsProps) {\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n        Help Us Understand Your Scale\n      </h2>\n      <p className=\"text-text-secondary mb-8\">\n        This helps us calculate your potential impact\n      </p>\n\n      <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n        <div className=\"space-y-6\">\n          <Select\n            label=\"Monthly IT ticket volume\"\n            value={ticketVolume}\n            onChange={(e) => onChange('ticketVolume', e.target.value)}\n            options={TICKET_VOLUME_OPTIONS}\n            required\n          />\n\n          <Select\n            label=\"IT team size\"\n            value={teamSize}\n            onChange={(e) => onChange('teamSize', e.target.value)}\n            options={TEAM_SIZE_OPTIONS}\n            required\n          />\n\n          <Select\n            label=\"Average time to resolve a typical access request\"\n            value={avgResolutionTime}\n            onChange={(e) => onChange('avgResolutionTime', e.target.value)}\n            options={RESOLUTION_TIME_OPTIONS}\n            required\n          />\n\n          <Select\n            label=\"Employee count\"\n            value={employeeCount}\n            onChange={(e) => onChange('employeeCount', e.target.value)}\n            options={EMPLOYEE_COUNT_OPTIONS}\n            required\n          />\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1972},"src/lib/scoringAlgorithm.ts":{"content":"import { AssessmentData, ReadinessScore } from '@/types';\n\nexport function calculateReadinessScore(data: AssessmentData): ReadinessScore {\n  let techStackScore = 0;\n  let workflowScore = 0;\n  let operationalScore = 0;\n\n  // Tech Stack Compatibility (40 points)\n  const identityTools = ['okta', 'microsoft-entra', 'jumpcloud'];\n  const itsmTools = ['servicenow', 'jira', 'freshservice', 'ivanti'];\n  const commTools = ['slack', 'microsoft-teams', 'zoom'];\n  const productivityTools = ['google-workspace', 'microsoft-365'];\n  \n  // Identity provider present\n  if (data.techStack.some(tool => identityTools.includes(tool))) {\n    techStackScore += 15;\n  }\n  \n  // ITSM platform present\n  if (data.techStack.some(tool => itsmTools.includes(tool))) {\n    techStackScore += 10;\n  }\n  \n  // Communication tool present\n  if (data.techStack.some(tool => commTools.includes(tool))) {\n    techStackScore += 5;\n  }\n  \n  // Productivity suite present\n  if (data.techStack.some(tool => productivityTools.includes(tool))) {\n    techStackScore += 5;\n  }\n  \n  // 5+ additional tools\n  if (data.techStack.length >= 5) {\n    techStackScore += 5;\n  }\n\n  // Workflow Automation Potential (35 points)\n  \n  // High-value categories in ticket distribution (Applications, Security, Onboarding)\n  let highValuePercentage = 0;\n  if (data.ticketDistribution) {\n    highValuePercentage += (data.ticketDistribution.applications || 0);\n    highValuePercentage += (data.ticketDistribution.security || 0);\n    highValuePercentage += (data.ticketDistribution.onboarding || 0);\n  }\n  \n  // Score based on high-value category concentration\n  if (highValuePercentage >= 60) {\n    workflowScore += 15;\n  } else if (highValuePercentage >= 40) {\n    workflowScore += 10;\n  } else if (highValuePercentage >= 20) {\n    workflowScore += 5;\n  }\n  \n  // Ticket volume scoring\n  const monthlyTickets = data.monthlyTickets || 0;\n  if (monthlyTickets >= 1500) {\n    workflowScore += 10;\n  } else if (monthlyTickets >= 500) {\n    workflowScore += 5;\n  }\n  \n  // Additional context provided (shows engagement/complexity)\n  if (data.additionalContext && data.additionalContext.length > 50) {\n    workflowScore += 10;\n  } else if (data.additionalContext && data.additionalContext.length > 0) {\n    workflowScore += 5;\n  }\n\n  // Operational Readiness (25 points)\n  \n  // Team size appropriate for volume (if available)\n  if (data.teamSize) {\n    const teamSizeNum = parseInt(data.teamSize.split('-')[0]);\n    if (teamSizeNum >= 4 && teamSizeNum <= 25) {\n      operationalScore += 10;\n    } else if (teamSizeNum >= 1 && teamSizeNum <= 10) {\n      operationalScore += 5;\n    }\n  } else {\n    // Default: assume mid-size team if not specified\n    operationalScore += 5;\n  }\n  \n  // Resolution time > 2 hours (more to gain from automation)\n  if (data.avgResolutionTime) {\n    if (data.avgResolutionTime === '2-8 hours' || \n        data.avgResolutionTime === '1-3 days' || \n        data.avgResolutionTime === '3+ days') {\n      operationalScore += 15;\n    } else if (data.avgResolutionTime === '30min-2hrs') {\n      operationalScore += 5;\n    }\n  } else {\n    // Default: assume some automation opportunity if not specified\n    operationalScore += 10;\n  }\n\n  const total = techStackScore + workflowScore + operationalScore;\n\n  let rating: ReadinessScore['rating'];\n  if (total >= 80) rating = 'high-readiness';\n  else if (total >= 60) rating = 'moderate-readiness';\n  else if (total >= 40) rating = 'early-opportunity';\n  else rating = 'manual-heavy';\n\n  return {\n    total,\n    techStackScore,\n    workflowScore,\n    operationalScore,\n    rating,\n  };\n}\n","size_bytes":3597},"src/components/landing/PainPoints.tsx":{"content":"import Card from '@/components/ui/Card';\n\nexport default function PainPoints() {\n  const painPoints = [\n    {\n      icon: '⚡',\n      title: 'Drowning in repetitive tickets?',\n      description: 'Tickets that never quite follow the same pattern'\n    },\n    {\n      icon: '📊',\n      title: 'Boss expects more with less?',\n      description: 'Pressure to be more efficient with fewer resources'\n    },\n    {\n      icon: '🔧',\n      title: 'Automation tools breaking?',\n      description: 'Tools that break every time something changes'\n    }\n  ];\n\n  return (\n    <section className=\"py-20 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {painPoints.map((point, index) => (\n            <Card key={index} hover>\n              <div className=\"text-4xl mb-4\">{point.icon}</div>\n              <h3 className=\"text-xl font-semibold text-text-primary mb-2\">\n                {point.title}\n              </h3>\n              <p className=\"text-text-secondary\">{point.description}</p>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1124},"src/components/ui/StatusPill.tsx":{"content":"interface StatusPillProps {\n  status: 'success' | 'active' | 'warning';\n  children: React.ReactNode;\n}\n\nexport default function StatusPill({ status, children }: StatusPillProps) {\n  const colors = {\n    success: 'bg-accent-green',\n    active: 'bg-accent-blue',\n    warning: 'bg-accent-orange',\n  };\n\n  return (\n    <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-pill bg-brand-primary/5 border border-brand-secondary/10\">\n      <span className={`w-1.5 h-1.5 rounded-full ${colors[status]}`} />\n      <span className=\"text-sm text-text-secondary\">{children}</span>\n    </div>\n  );\n}\n","size_bytes":599},"src/components/ui/Card.tsx":{"content":"import React from 'react';\n\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n  hover?: boolean;\n}\n\nexport default function Card({ children, className = '', hover = false }: CardProps) {\n  return (\n    <div\n      className={`\n        bg-bg-card \n        border border-brand-secondary/10 \n        rounded-card \n        p-8\n        ${hover ? 'transition-all duration-300 hover:-translate-y-1 hover:border-brand-secondary/20 hover:shadow-card-hover' : ''}\n        ${className}\n      `}\n    >\n      {children}\n    </div>\n  );\n}\n","size_bytes":547},"src/components/assessment/LoadingScreen.tsx":{"content":"import { useEffect, useState } from 'react';\n\nconst messages = [\n  'Analyzing your tech stack...',\n  'Matching pre-built AI Workers to your environment...',\n  'Calculating efficiency gains...',\n  'Generating your readiness score...',\n];\n\nexport default function LoadingScreen() {\n  const [messageIndex, setMessageIndex] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMessageIndex((prev) => (prev + 1) % messages.length);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-[60vh] flex flex-col items-center justify-center\">\n      <div className=\"inline-block animate-spin rounded-full h-16 w-16 border-4 border-highlight border-t-transparent mb-8\" />\n      \n      <h2 className=\"text-2xl font-bold text-text-primary mb-2\">\n        {messages[messageIndex]}\n      </h2>\n    </div>\n  );\n}\n","size_bytes":878},"src/types/index.ts":{"content":"// Assessment Data Types\nexport interface AssessmentData {\n  techStack: string[];\n  topWorkflows: string[];\n  ticketVolume: string;\n  teamSize: string;\n  avgResolutionTime: string;\n  employeeCount: string;\n  approvalWorkflows: string;\n  repetitivePercentage: string;\n  primaryPainPoint: string;\n  monthlyTickets?: number;\n  ticketDistribution?: {\n    applications: number;\n    hardware: number;\n    onboarding: number;\n    distributionLists: number;\n    network: number;\n    security: number;\n  };\n  additionalContext?: string;\n}\n\n// AI Worker Types\nexport interface AIWorker {\n  id: string;\n  name: string;\n  category: string;\n  deploymentPhase: 'week-1' | 'month-2' | 'month-4' | 'month-6';\n  priority: number;\n  requiredTools: string[];\n  optionalTools: string[];\n  relatedWorkflows: string[];\n  setupTime: string;\n  configComplexity: 'low' | 'medium' | 'high';\n  learningPeriod: string;\n  metrics: {\n    percentOfVolume: number;\n    automationRate: number;\n    avgResolutionBefore: number;\n    avgResolutionAfter: number;\n    timeSavingsPerTicket: number;\n  };\n  description: string;\n  howItWorks: string[];\n  valueRationale: string;\n  beforeAfter: {\n    before: string;\n    after: string;\n  };\n}\n\n// Matched Worker (with calculated metrics)\nexport interface MatchedWorker extends AIWorker {\n  estimatedTickets: number;\n  timeSaved: number;\n  costSaved: number;\n}\n\n// Category Types\nexport interface Category {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n}\n\n// Tool Types\nexport interface Tool {\n  id: string;\n  name: string;\n  category: string;\n  logo: string;\n  description: string;\n}\n\nexport interface Workflow {\n  id: string;\n  name: string;\n  icon: string;\n}\n\n// Scoring Types\nexport interface ReadinessScore {\n  total: number;\n  techStackScore: number;\n  workflowScore: number;\n  operationalScore: number;\n  rating: 'high-readiness' | 'moderate-readiness' | 'early-opportunity' | 'manual-heavy';\n}\n\n// Impact Projection Types\nexport interface ImpactProjection {\n  phase: string;\n  ticketsHandled: number;\n  timeSaved: number;\n  costSaved: number;\n  ftesSaved: number;\n}\n\n// Assessment Result Types\nexport interface AssessmentResult {\n  assessmentData: AssessmentData;\n  readinessScore: ReadinessScore;\n  matchedWorkers: MatchedWorker[];\n  projectedImpact: {\n    phase1: ImpactProjection;\n    phase2: ImpactProjection;\n  };\n  timestamp: string;\n}\n\n// Lead Form Types\nexport interface LeadFormData {\n  name: string;\n  email: string;\n  company: string;\n  phone: string;\n  itsmPlatform: string;\n  monthlyVolume: string;\n  interestedInDiscovery: boolean;\n  preferredMeetingTime: string;\n}\n\n// V2 Report Types\nexport interface AutomationOpportunity {\n  tool: string;\n  category: string;\n  processName: string;\n  description: string;\n  supportedActions: string[];\n  projectedDeflection: string;\n  medianTTRBefore: string;\n  medianTTRAfter: string;\n  confidence: 'high' | 'medium' | 'low';\n  exampleUseCase: string;\n  workstream: string;\n  skills: string[];\n  agents: string[];\n}\n\nexport interface PilotProjection {\n  weeklyDeflection: string;\n  fteImpact: string;\n  appAccessTTR: string;\n  inAppActionsTTR: string;\n  approvalDependency: string;\n}\n","size_bytes":3192},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":82},"src/lib/workerMatcher.ts":{"content":"import { AssessmentData, AIWorker, MatchedWorker } from '@/types';\nimport aiWorkersData from '@/data/aiWorkers.json';\n\nexport function matchAIWorkers(data: AssessmentData): MatchedWorker[] {\n  const allWorkers = aiWorkersData.aiWorkers as AIWorker[];\n  const matched: MatchedWorker[] = [];\n\n  // Get monthly tickets from simplified assessment\n  const monthlyTickets = data.monthlyTickets || 1000;\n\n  // Derive top workflows from ticket distribution (categories with highest percentages)\n  const derivedTopWorkflows: string[] = [];\n  if (data.ticketDistribution) {\n    const sortedCategories = Object.entries(data.ticketDistribution)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .map(([category]) => category);\n    \n    // Map categories to workflow names (simplified mapping)\n    const categoryToWorkflow: Record<string, string> = {\n      'applications': 'application-access',\n      'security': 'permission-changes',\n      'onboarding': 'onboarding-offboarding',\n      'hardware': 'hardware-provisioning',\n      'network': 'network-access',\n      'distributionLists': 'distribution-list-management',\n    };\n    \n    sortedCategories.forEach(category => {\n      const workflow = categoryToWorkflow[category];\n      if (workflow) derivedTopWorkflows.push(workflow);\n    });\n  }\n\n  // For each worker, check if user's stack supports it\n  allWorkers.forEach(worker => {\n    // Check if user has all required tools\n    const hasRequiredTools = worker.requiredTools.every(tool =>\n      data.techStack.includes(tool)\n    );\n\n    if (!hasRequiredTools) return;\n\n    // Check if worker's workflows match user's top workflows\n    const workflowMatch = worker.relatedWorkflows.some(workflow =>\n      derivedTopWorkflows.includes(workflow)\n    );\n\n    // Calculate estimated impact\n    const estimatedTickets = Math.round(monthlyTickets * worker.metrics.percentOfVolume * worker.metrics.automationRate);\n    const timeSaved = Math.round(estimatedTickets * worker.metrics.timeSavingsPerTicket);\n    const costSaved = Math.round(timeSaved * 12.5); // $150/hr blended rate\n\n    // Create matched worker\n    const matchedWorker: MatchedWorker = {\n      ...worker,\n      estimatedTickets,\n      timeSaved,\n      costSaved,\n    };\n\n    // Prioritize workers that match workflows\n    if (workflowMatch) {\n      matched.unshift(matchedWorker); // Add to beginning\n    } else {\n      matched.push(matchedWorker); // Add to end\n    }\n  });\n\n  // Sort by priority and deployment phase\n  matched.sort((a, b) => {\n    const phaseOrder = { 'week-1': 1, 'month-2': 2, 'month-4': 3, 'month-6': 4 };\n    if (phaseOrder[a.deploymentPhase] !== phaseOrder[b.deploymentPhase]) {\n      return phaseOrder[a.deploymentPhase] - phaseOrder[b.deploymentPhase];\n    }\n    return a.priority - b.priority;\n  });\n\n  return matched;\n}\n\nexport function calculateProjectedImpact(matchedWorkers: MatchedWorker[]) {\n  // Phase 1: Week 1-4 workers\n  const phase1Workers = matchedWorkers.filter(w => w.deploymentPhase === 'week-1');\n  const phase1Tickets = phase1Workers.reduce((sum, w) => sum + w.estimatedTickets, 0);\n  const phase1Time = phase1Workers.reduce((sum, w) => sum + w.timeSaved, 0);\n  const phase1Cost = phase1Workers.reduce((sum, w) => sum + w.costSaved, 0);\n  const phase1FTEs = Math.round((phase1Time / 160) * 10) / 10; // 160 hrs/month per FTE\n\n  // Phase 2: All workers through month 6\n  const phase2Workers = matchedWorkers.filter(w => \n    ['week-1', 'month-2', 'month-4'].includes(w.deploymentPhase)\n  );\n  const phase2Tickets = phase2Workers.reduce((sum, w) => sum + w.estimatedTickets, 0);\n  const phase2Time = phase2Workers.reduce((sum, w) => sum + w.timeSaved, 0);\n  const phase2Cost = phase2Workers.reduce((sum, w) => sum + w.costSaved, 0);\n  const phase2FTEs = Math.round((phase2Time / 160) * 10) / 10;\n\n  // Add 15% for learning improvement by Month 6\n  const phase2TicketsWithLearning = Math.round(phase2Tickets * 1.15);\n  const phase2TimeWithLearning = Math.round(phase2Time * 1.15);\n  const phase2CostWithLearning = Math.round(phase2Cost * 1.15);\n  const phase2FTEsWithLearning = Math.round((phase2TimeWithLearning / 160) * 10) / 10;\n\n  return {\n    phase1: {\n      phase: 'Phase 1 (Weeks 1-4)',\n      ticketsHandled: phase1Tickets,\n      timeSaved: phase1Time,\n      costSaved: phase1Cost,\n      ftesSaved: phase1FTEs,\n    },\n    phase2: {\n      phase: 'Phase 2 (Months 2-6)',\n      ticketsHandled: phase2TicketsWithLearning,\n      timeSaved: phase2TimeWithLearning,\n      costSaved: phase2CostWithLearning,\n      ftesSaved: phase2FTEsWithLearning,\n    },\n  };\n}\n","size_bytes":4563},"src/components/ui/Select.tsx":{"content":"import React from 'react';\n\ninterface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n  label?: string;\n  error?: string;\n  options: { value: string; label: string }[];\n}\n\nexport default function Select({ label, error, options, className = '', ...props }: SelectProps) {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label className=\"block text-sm text-text-tertiary mb-2\">\n          {label}\n          {props.required && <span className=\"text-accent-orange ml-1\">*</span>}\n        </label>\n      )}\n      <select\n        className={`\n          w-full\n          bg-bg-card\n          text-text-primary\n          px-4 py-3\n          rounded-lg\n          focus:outline-none\n          focus:ring-2\n          focus:ring-highlight/30\n          transition-all duration-200\n          cursor-pointer\n          ${className}\n        `}\n        {...props}\n      >\n        <option value=\"\">Select an option</option>\n        {options.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n      {error && <p className=\"text-sm text-accent-orange mt-1\">{error}</p>}\n    </div>\n  );\n}\n","size_bytes":1206},"src/lib/constants.ts":{"content":"export const HOURLY_RATE = 150; // Blended IT team rate\n\nexport const TICKET_VOLUME_OPTIONS = [\n  { value: '0-500', label: '0-500' },\n  { value: '500-1500', label: '500-1,500' },\n  { value: '1500-5000', label: '1,500-5,000' },\n  { value: '5000-15000', label: '5,000-15,000' },\n  { value: '15000+', label: '15,000+' },\n];\n\nexport const TEAM_SIZE_OPTIONS = [\n  { value: '1-3', label: '1-3 people' },\n  { value: '4-10', label: '4-10 people' },\n  { value: '11-25', label: '11-25 people' },\n  { value: '26-50', label: '26-50 people' },\n  { value: '50+', label: '50+ people' },\n];\n\nexport const RESOLUTION_TIME_OPTIONS = [\n  { value: '<30min', label: '< 30 minutes' },\n  { value: '30min-2hrs', label: '30 min - 2 hours' },\n  { value: '2-8 hours', label: '2-8 hours' },\n  { value: '1-3 days', label: '1-3 days' },\n  { value: '3+ days', label: '3+ days' },\n];\n\nexport const EMPLOYEE_COUNT_OPTIONS = [\n  { value: '50-200', label: '50-200' },\n  { value: '200-500', label: '200-500' },\n  { value: '500-1500', label: '500-1,500' },\n  { value: '1500-5000', label: '1,500-5,000' },\n  { value: '5000+', label: '5,000+' },\n];\n\nexport const APPROVAL_WORKFLOW_OPTIONS = [\n  { value: 'automated', label: 'Yes, fully automated' },\n  { value: 'manual', label: 'Yes, but manual (email, Slack)' },\n  { value: 'none', label: 'No formal process' },\n  { value: 'unknown', label: \"Don't know\" },\n];\n\nexport const REPETITIVE_PERCENTAGE_OPTIONS = [\n  { value: '0-20', label: '0-20%' },\n  { value: '20-40', label: '20-40%' },\n  { value: '40-60', label: '40-60%' },\n  { value: '60-80', label: '60-80%' },\n  { value: '80-100', label: '80-100%' },\n];\n\nexport const PAIN_POINT_OPTIONS = [\n  { value: 'too-slow', label: 'Too slow to resolve tickets' },\n  { value: 'team-overwhelmed', label: 'Team overwhelmed with volume' },\n  { value: 'manual-busywork', label: 'Manual busywork (ticket triage, routing)' },\n  { value: 'lack-automation', label: 'Lack of automation capabilities' },\n  { value: 'all-above', label: 'All of the above' },\n];\n","size_bytes":2003},"tailwind.config.ts":{"content":"import type { Config } from 'tailwindcss'\n\nconst config: Config = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        // AI.work brand colors\n        'brand-primary': '#FBFAF9',\n        'brand-secondary': '#CDCCCB',\n        'brand-tertiary': '#8A8784',\n        'brand-surface': '#FBFAF9',\n        'brand-surface-solid': '#262626',\n        \n        // Background variations (ai.work brand system)\n        'bg-primary': '#141414',        // Global background\n        'bg-card': '#1A1A1A',           // Card/container background (option 1)\n        'bg-card-alt': '#41403E',       // Card/container background (option 2)\n        'bg-elevated': '#2F2F2F',\n        \n        // Text colors (ai.work brand system)\n        'text-primary': '#FBFAF9',      // Primary text\n        'text-secondary': '#CDCCCB',\n        'text-tertiary': '#8A8784',     // Secondary text, labels, helpers\n        \n        // Highlight & Feedback (ai.work brand system)\n        'highlight': '#82D895',         // Success, selection, focus states\n        \n        // Legacy accent colors (keep for backwards compatibility)\n        'accent-green': '#00D97E',\n        'accent-blue': '#4A9EFF',\n        'accent-orange': '#FF6B35',\n        \n        // Status colors\n        'status-success': '#82D895',    // Updated to use new highlight color\n        'status-active': '#4A9EFF',\n        'status-warning': '#FF6B35',\n        \n        // Border color\n        'border': '#2F2F2F',\n      },\n      borderRadius: {\n        'card': '16px',\n        'pill': '24px',\n      },\n      boxShadow: {\n        'card': '0 4px 6px rgba(0, 0, 0, 0.3)',\n        'card-hover': '0 8px 12px rgba(0, 0, 0, 0.4)',\n        'glow-green': '0 0 20px rgba(0, 217, 126, 0.3)',\n        'glow-blue': '0 0 20px rgba(74, 158, 255, 0.3)',\n        // ai.work brand system glows\n        'glow-highlight': '0 0 8px rgba(130, 216, 149, 0.25)',      // Selected card state\n        'glow-highlight-hover': '0 0 10px rgba(130, 216, 149, 0.1)', // Logo hover state\n      },\n      fontFamily: {\n        sans: ['var(--font-nb-international)', 'system-ui', '-apple-system', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [],\n}\n\nexport default config\n","size_bytes":2318},"src/components/landing/TrustSignals.tsx":{"content":"export default function TrustSignals() {\n  return (\n    <section className=\"py-12 px-4 border-t border-brand-secondary/10\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex flex-wrap justify-center items-center gap-8 text-text-tertiary text-sm\">\n          <div>Built by the team behind WalkMe</div>\n          <div className=\"w-px h-4 bg-brand-secondary/20\" />\n          <div>Backed by A*, lool ventures, FirstMinute Capital</div>\n          <div className=\"w-px h-4 bg-brand-secondary/20\" />\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-accent-green\">●</span>\n            SOC2 & GDPR Compliant\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":725},"src/app/assessment/page.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport ProgressBar from '@/components/ui/ProgressBar';\nimport Button from '@/components/ui/Button';\nimport TechStackSelector from '@/components/assessment/TechStackSelector';\nimport VolumeServiceProfile from '@/components/assessment/VolumeServiceProfile';\nimport AdditionalContext from '@/components/assessment/AdditionalContext';\nimport LoadingScreen from '@/components/assessment/LoadingScreen';\nimport { AssessmentData } from '@/types';\nimport { FeasibilityEngine } from '@/lib/engines/feasibility-engine';\nimport { UseCaseMatcher } from '@/lib/engines/use-case-matcher';\nimport { ROICalculator } from '@/lib/engines/roi-calculator';\nimport { calculateReadinessScore } from '@/lib/scoringAlgorithm';\n\nexport default function AssessmentPage() {\n  const router = useRouter();\n  const [step, setStep] = useState(1);\n  const [data, setData] = useState<Partial<AssessmentData>>({\n    techStack: [],\n    monthlyTickets: 1000,\n    ticketDistribution: {\n      applications: 24,\n      hardware: 18,\n      onboarding: 10,\n      distributionLists: 12,\n      network: 11,\n      security: 25,\n    },\n    additionalContext: '',\n  });\n\n  const handleNext = async () => {\n    if (step < 3) {\n      setStep(step + 1);\n    } else if (step === 3) {\n      // Show loading screen\n      setStep(4);\n      \n      try {\n        // Generate full report data using analysis engines\n        const generateReportData = () => {\n          // Initialize engines\n          const feasibilityEngine = new FeasibilityEngine();\n          const useCaseMatcher = new UseCaseMatcher();\n          const roiCalculator = new ROICalculator();\n\n          // Convert tech stack to tools format\n          const tools = (data.techStack || []).map(toolName => ({\n            name: toolName,\n            license_tier: 'standard'\n          }));\n\n          // Convert ticket distribution to activities format\n          const activities = [];\n          if (data.ticketDistribution && data.monthlyTickets) {\n            const categoryMapping: Record<string, {key: string, ttr: number}> = {\n              applications: {key: 'app_access', ttr: 0.43},\n              hardware: {key: 'hardware', ttr: 0.75},\n              onboarding: {key: 'onboarding', ttr: 1.0},\n              distributionLists: {key: 'distribution_lists', ttr: 0.5},\n              network: {key: 'network', ttr: 0.6},\n              security: {key: 'security', ttr: 0.8}\n            };\n\n            for (const [key, percentage] of Object.entries(data.ticketDistribution)) {\n              const mapping = categoryMapping[key];\n              if (mapping && percentage > 0) {\n                activities.push({\n                  category: mapping.key,\n                  monthly_volume: Math.round((data.monthlyTickets * percentage) / 100),\n                  avg_ttr_hours: mapping.ttr\n                });\n              }\n            }\n          }\n\n          // Run analysis engines\n          const feasibility = feasibilityEngine.analyzeStack(tools);\n          const matches = useCaseMatcher.matchUseCases(activities, feasibility);\n          const roi = roiCalculator.calculateROI(data.monthlyTickets || 1000, matches);\n          const score = calculateReadinessScore(data as AssessmentData);\n\n          // Return complete report data\n          return {\n            ...data,\n            score,\n            feasibilityResults: feasibility,\n            matchedUseCases: matches,\n            roiResult: roi\n          };\n        };\n\n        // Generate report data\n        const fullReportData = generateReportData();\n        \n        // Save to database (without email) with full report data\n        const response = await fetch('/api/assessments', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            techStack: data.techStack,\n            monthlyTickets: data.monthlyTickets,\n            ticketDistribution: data.ticketDistribution,\n            additionalContext: data.additionalContext,\n            reportData: fullReportData,\n          }),\n        });\n        \n        if (!response.ok) {\n          throw new Error(`API responded with status: ${response.status}`);\n        }\n        \n        const result = await response.json();\n        \n        if (result.success && result.id) {\n          // Redirect to email gate with assessment ID\n          setTimeout(() => {\n            router.push(`/email-gate?id=${result.id}`);\n          }, 3000);\n        } else {\n          // Fallback: save to sessionStorage and redirect\n          sessionStorage.setItem('assessmentData', JSON.stringify(fullReportData));\n          setTimeout(() => {\n            router.push('/email-gate');\n          }, 3000);\n        }\n      } catch (error) {\n        console.error('Error in handleNext:', error);\n        // On error, still try to show results via sessionStorage\n        try {\n          const fullReportData = {\n            ...data,\n            score: calculateReadinessScore(data as AssessmentData),\n          };\n          sessionStorage.setItem('assessmentData', JSON.stringify(fullReportData));\n          setTimeout(() => {\n            router.push('/email-gate');\n          }, 3000);\n        } catch (fallbackError) {\n          console.error('Fallback also failed:', fallbackError);\n          alert('An error occurred. Please try again.');\n          setStep(3); // Go back to step 3\n        }\n      }\n    }\n  };\n\n  const handleBack = () => {\n    if (step > 1) setStep(step - 1);\n  };\n\n  const handleFieldChange = (field: string, value: any) => {\n    setData({ ...data, [field]: value });\n  };\n\n  const isStepComplete = () => {\n    switch (step) {\n      case 1:\n        return (data.techStack?.length ?? 0) > 0;\n      case 2:\n        // Check if monthlyTickets is set and distribution equals 100%\n        if (!data.monthlyTickets || data.monthlyTickets <= 0) return false;\n        if (!data.ticketDistribution) return false;\n        const total = Object.values(data.ticketDistribution).reduce((sum, val) => sum + val, 0);\n        return total === 100;\n      case 3:\n        // Additional context is optional, so always valid\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const totalSteps = 3;\n\n  return (\n    <main className=\"min-h-screen bg-bg-primary text-text-primary\">\n      {/* Header */}\n      <header className=\"border-b border-bg-card-alt/20\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <Link href=\"/\">\n            <Image \n              src=\"/images/aiwork-logo.png\" \n              alt=\"ai.work\" \n              width={120} \n              height={30}\n              className=\"h-7 w-auto\"\n            />\n          </Link>\n        </div>\n      </header>\n\n      {/* Progress Bar */}\n      {step <= 3 && (\n        <div className=\"border-b border-bg-card-alt/20\">\n          <div className=\"max-w-7xl mx-auto px-6 py-4\">\n            <ProgressBar current={step} total={totalSteps} />\n            <p className=\"text-xs text-text-tertiary text-center mt-2\">\n              Step {step} of {totalSteps}\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        {step === 1 && (\n          <TechStackSelector\n            selectedTools={data.techStack || []}\n            onToolsChange={(tools) => setData({ ...data, techStack: tools })}\n          />\n        )}\n\n        {step === 2 && (\n          <VolumeServiceProfile\n            monthlyTickets={data.monthlyTickets || 1000}\n            ticketDistribution={data.ticketDistribution || {\n              applications: 24,\n              hardware: 18,\n              onboarding: 10,\n              distributionLists: 12,\n              network: 11,\n              security: 25,\n            }}\n            onChange={handleFieldChange}\n          />\n        )}\n\n        {step === 3 && (\n          <AdditionalContext\n            additionalContext={data.additionalContext || ''}\n            onChange={handleFieldChange}\n          />\n        )}\n\n        {step === 4 && <LoadingScreen />}\n      </div>\n\n      {/* Navigation */}\n      {step <= 3 && (\n        <div className=\"bg-bg-primary border-t border-bg-card-alt/20\">\n          <div className={`mx-auto px-6 py-6 ${step <= 2 ? 'max-w-4xl' : 'max-w-2xl'}`}>\n            <div className=\"flex justify-between items-center\">\n              <Button\n                variant=\"secondary\"\n                onClick={handleBack}\n                disabled={step === 1}\n              >\n                Back\n              </Button>\n              <Button\n                variant=\"primary\"\n                onClick={handleNext}\n                disabled={!isStepComplete()}\n              >\n                {step === 3 ? 'Generate Report' : 'Next'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </main>\n  );\n}\n","size_bytes":8971},"src/components/landing/Hero.tsx":{"content":"import Button from '@/components/ui/Button';\n\nexport default function Hero() {\n  return (\n    <section className=\"min-h-[80vh] flex flex-col items-center justify-center px-4 py-20\">\n      <div className=\"max-w-4xl mx-auto text-center\">\n        <h1 className=\"text-5xl md:text-6xl font-bold text-text-primary mb-6\">\n          Is Your IT Team Ready for an AI Worker?\n        </h1>\n        <p className=\"text-xl text-text-secondary mb-12 max-w-3xl mx-auto\">\n          AI Workers learn from your tickets, adapt to your processes, and improve over time. \n          Find out if your IT stack can support a digital teammate that gets smarter with every request.\n        </p>\n        <Button onClick={() => {\n          document.getElementById('assessment')?.scrollIntoView({ behavior: 'smooth' });\n        }}>\n          Assess My IT Readiness (3 min)\n        </Button>\n      </div>\n    </section>\n  );\n}\n","size_bytes":896},"src/components/ui/Button.tsx":{"content":"import React from 'react';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary';\n  children: React.ReactNode;\n}\n\nexport default function Button({ variant = 'primary', children, className = '', ...props }: ButtonProps) {\n  const baseStyles = 'font-semibold px-6 py-3 rounded-pill transition-all duration-300 flex items-center gap-2';\n  \n  const variants = {\n    primary: 'bg-brand-primary text-bg-primary hover:bg-brand-secondary hover:scale-[1.02] shadow-card',\n    secondary: 'bg-transparent border border-brand-secondary text-brand-primary hover:bg-brand-primary/5 hover:border-brand-primary',\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={`${baseStyles} ${variants[variant]} ${className}`}\n      {...props}\n    >\n      <span className=\"w-2 h-2 bg-accent-green rounded-full\" />\n      {children}\n      <span className=\"text-xl\">›</span>\n    </button>\n  );\n}\n","size_bytes":943},"src/components/assessment/TechStackSelector.tsx":{"content":"import { useState } from 'react';\nimport Checkbox from '@/components/ui/Checkbox';\nimport Card from '@/components/ui/Card';\nimport toolsData from '@/data/tools.json';\n\ninterface TechStackSelectorProps {\n  selectedTools: string[];\n  onToolsChange: (tools: string[]) => void;\n}\n\nexport default function TechStackSelector({ selectedTools, onToolsChange }: TechStackSelectorProps) {\n  const toggleTool = (toolId: string) => {\n    if (selectedTools.includes(toolId)) {\n      onToolsChange(selectedTools.filter(id => id !== toolId));\n    } else {\n      onToolsChange([...selectedTools, toolId]);\n    }\n  };\n\n  const groupedTools = {\n    'Identity & Access Management': ['okta', 'microsoft-entra', 'jumpcloud', 'google-workspace'],\n    'ITSM Platforms': ['servicenow', 'jira', 'freshservice', 'ivanti'],\n    'Communication': ['slack', 'microsoft-teams', 'zoom'],\n    'Productivity & Collaboration': ['google-workspace', 'microsoft-365', 'notion', 'confluence', 'monday'],\n    'Business Applications': ['salesforce', 'hubspot', 'sap-successfactors', 'hibob', 'docusign', 'linear'],\n    'Development Tools': ['github', 'jira'],\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n        What's Your Current IT Stack?\n      </h2>\n      <p className=\"text-text-secondary mb-8\">\n        Select all the tools your team uses. We'll show you exactly which pre-built AI Workers are ready for your environment.\n      </p>\n\n      <div className=\"space-y-6\">\n        {Object.entries(groupedTools).map(([category, toolIds]) => (\n          <Card key={category} className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n            <h3 className=\"text-lg font-semibold text-text-primary mb-4\">{category}</h3>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {toolIds.map(toolId => {\n                const tool = toolsData.tools.find(t => t.id === toolId);\n                if (!tool) return null;\n                \n                return (\n                  <div key={toolId} className=\"flex items-center gap-3\">\n                    <img \n                      src={tool.logo} \n                      alt={tool.name}\n                      className=\"w-6 h-6 rounded\"\n                      onError={(e) => {\n                        (e.target as HTMLImageElement).style.display = 'none';\n                      }}\n                    />\n                    <Checkbox\n                      label={tool.name}\n                      checked={selectedTools.includes(toolId)}\n                      onChange={() => toggleTool(toolId)}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"mt-6 text-center text-text-tertiary\">\n        Selected: {selectedTools.length} tools\n      </div>\n    </div>\n  );\n}\n","size_bytes":2876},"src/components/assessment/WorkflowRanker.tsx":{"content":"import { useState } from 'react';\nimport Card from '@/components/ui/Card';\nimport toolsData from '@/data/tools.json';\n\ninterface WorkflowRankerProps {\n  selectedWorkflows: string[];\n  onWorkflowsChange: (workflows: string[]) => void;\n}\n\nexport default function WorkflowRanker({ selectedWorkflows, onWorkflowsChange }: WorkflowRankerProps) {\n  const workflows = toolsData.workflows;\n\n  const toggleWorkflow = (workflowId: string) => {\n    if (selectedWorkflows.includes(workflowId)) {\n      onWorkflowsChange(selectedWorkflows.filter(id => id !== workflowId));\n    } else if (selectedWorkflows.length < 5) {\n      onWorkflowsChange([...selectedWorkflows, workflowId]);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n        What Eats Up Most of Your Team's Time?\n      </h2>\n      <p className=\"text-text-secondary mb-8\">\n        Select your top 5 most time-consuming activities\n      </p>\n\n      <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n        <div className=\"space-y-3\">\n          {workflows.map((workflow, index) => {\n            const isSelected = selectedWorkflows.includes(workflow.id);\n            const rank = selectedWorkflows.indexOf(workflow.id) + 1;\n\n            return (\n              <button\n                key={workflow.id}\n                onClick={() => toggleWorkflow(workflow.id)}\n                disabled={!isSelected && selectedWorkflows.length >= 5}\n                className={`\n                  w-full text-left p-4 rounded-lg transition-all duration-200\n                  ${isSelected \n                    ? 'bg-bg-card-alt border border-highlight/40 shadow-glow-highlight' \n                    : 'bg-transparent border border-bg-card-alt/40 hover:border-highlight/30 hover:bg-bg-card-alt/30'\n                  }\n                  ${!isSelected && selectedWorkflows.length >= 5 ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n                `}\n              >\n                <div className=\"flex items-center gap-3\">\n                  {isSelected && (\n                    <span className=\"flex-shrink-0 w-8 h-8 bg-highlight rounded-full flex items-center justify-center text-bg-primary font-bold\">\n                      {rank}\n                    </span>\n                  )}\n                  <span className={isSelected ? 'text-text-primary font-medium' : 'text-text-primary'}>\n                    {workflow.name}\n                  </span>\n                </div>\n              </button>\n            );\n          })}\n        </div>\n      </Card>\n\n      <div className=\"mt-6 text-center\">\n        <span className=\"text-text-tertiary\">\n          Selected: {selectedWorkflows.length} / 5\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2768},"src/app/layout.tsx":{"content":"import type { Metadata } from 'next'\nimport localFont from 'next/font/local'\nimport Script from 'next/script'\nimport './globals.css'\n\nconst nbInternational = localFont({\n  src: [\n    {\n      path: '../../public/fonts/NBInternationalPro-Light.ttf',\n      weight: '300',\n      style: 'normal',\n    },\n    {\n      path: '../../public/fonts/NBInternationalPro-LightItalic.ttf',\n      weight: '300',\n      style: 'italic',\n    },\n    {\n      path: '../../public/fonts/NBInternationalPro-Regular.ttf',\n      weight: '400',\n      style: 'normal',\n    },\n    {\n      path: '../../public/fonts/NBInternationalPro-Italic.ttf',\n      weight: '400',\n      style: 'italic',\n    },\n    {\n      path: '../../public/fonts/NBInternationalPro-Book.ttf',\n      weight: '450',\n      style: 'normal',\n    },\n    {\n      path: '../../public/fonts/NBInternationalPro-BookItalic.ttf',\n      weight: '450',\n      style: 'italic',\n    },\n    {\n      path: '../../public/fonts/NBInternationalPro-Medium.ttf',\n      weight: '500',\n      style: 'normal',\n    },\n    {\n      path: '../../public/fonts/NBInternationalPro-MediumItalic.ttf',\n      weight: '500',\n      style: 'italic',\n    },\n    {\n      path: '../../public/fonts/NBInternationalPro-Bold.ttf',\n      weight: '700',\n      style: 'normal',\n    },\n    {\n      path: '../../public/fonts/NBInternationalPro-BoldItalic.ttf',\n      weight: '700',\n      style: 'italic',\n    },\n  ],\n  variable: '--font-nb-international',\n  display: 'swap',\n})\n\nexport const metadata: Metadata = {\n  title: 'AI Worker Readiness Assessment | AI.work',\n  description: 'Identify immediate AI Worker automation opportunities with a quick readiness assessment showing low-hanging fruit and ROI projections',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={`${nbInternational.className} bg-bg-primary text-text-primary antialiased`}>\n        {children}\n        \n        {/* HubSpot Tracking Code */}\n        <Script\n          id=\"hs-script-loader\"\n          src=\"//js-eu1.hs-scripts.com/145411173.js\"\n          strategy=\"afterInteractive\"\n        />\n      </body>\n    </html>\n  )\n}\n","size_bytes":2182},"src/components/ui/ProgressBar.tsx":{"content":"interface ProgressBarProps {\n  current: number;\n  total: number;\n}\n\nexport default function ProgressBar({ current, total }: ProgressBarProps) {\n  const percentage = (current / total) * 100;\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto mb-8\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <span className=\"text-sm text-text-tertiary\">\n          Step {current} of {total}\n        </span>\n        <span className=\"text-sm text-text-tertiary\">{Math.round(percentage)}%</span>\n      </div>\n      <div className=\"h-1.5 bg-bg-card rounded-full overflow-hidden\">\n        <div\n          className=\"h-full bg-highlight transition-all duration-200 ease-out\"\n          style={{ width: `${percentage}%` }}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":772},"src/lib/opportunityEngine.ts":{"content":"import { AssessmentData } from '@/types';\n\nexport interface AutomationOpportunity {\n  tool: string;\n  category: string;\n  processName: string;\n  description: string;\n  supportedActions: string[];\n  projectedDeflection: string;\n  medianTTRBefore: string;\n  medianTTRAfter: string;\n  confidence: 'high' | 'medium' | 'low';\n  exampleUseCase: string;\n  workstream: string;\n  skills: string[];\n  agents: string[];\n}\n\nexport interface TechStackMapping {\n  [key: string]: AutomationOpportunity[];\n}\n\nconst OPPORTUNITY_DATABASE: TechStackMapping = {\n  'Okta': [\n    {\n      tool: 'Okta',\n      category: 'Identity & Access Management',\n      processName: 'Automate app access via groups',\n      description: 'Autonomous handling of application access requests through group-based provisioning',\n      supportedActions: ['Search Apps', 'Grant User Access', 'Add User to Group', 'Reset User Password'],\n      projectedDeflection: '16-18%',\n      medianTTRBefore: '1.5-1.7 hours',\n      medianTTRAfter: 'Near real-time + approval latency',\n      confidence: 'high',\n      exampleUseCase: 'App access requests comprise 23% of ticket volume. With centralized IAM, deflection reaches 18% as agents handle group adds autonomously once approval is routed.',\n      workstream: 'App Access & Provisioning',\n      skills: ['Identity Verification', 'Group Management', 'Access Control'],\n      agents: ['Use: App Access Agent', 'Use: Group Provisioning Agent']\n    }\n  ],\n  'Microsoft Entra': [\n    {\n      tool: 'Microsoft Entra',\n      category: 'Identity & Access Management',\n      processName: 'Automate app access via groups',\n      description: 'Autonomous handling of application access requests through Azure AD group-based provisioning',\n      supportedActions: ['Search Apps', 'Grant User Access', 'Add User to Group', 'Reset User Password'],\n      projectedDeflection: '16-18%',\n      medianTTRBefore: '1.5-1.7 hours',\n      medianTTRAfter: 'Near real-time + approval latency',\n      confidence: 'high',\n      exampleUseCase: 'App access requests comprise 23% of ticket volume. With centralized IAM, deflection reaches 18% as agents handle group adds autonomously once approval is routed.',\n      workstream: 'App Access & Provisioning',\n      skills: ['Identity Verification', 'Group Management', 'Access Control'],\n      agents: ['Use: App Access Agent', 'Use: Group Provisioning Agent']\n    }\n  ],\n  'JumpCloud': [\n    {\n      tool: 'JumpCloud',\n      category: 'Identity & Access Management',\n      processName: 'Automate app access via groups',\n      description: 'Autonomous handling of application access requests through group-based provisioning',\n      supportedActions: ['Search Apps', 'Grant User Access', 'Add User to Group', 'Reset User Password'],\n      projectedDeflection: '16-18%',\n      medianTTRBefore: '1.5-1.7 hours',\n      medianTTRAfter: 'Near real-time + approval latency',\n      confidence: 'high',\n      exampleUseCase: 'App access requests comprise 23% of ticket volume. With centralized IAM, deflection reaches 18% as agents handle group adds autonomously once approval is routed.',\n      workstream: 'App Access & Provisioning',\n      skills: ['Identity Verification', 'Group Management', 'Access Control'],\n      agents: ['Use: App Access Agent', 'Use: Group Provisioning Agent']\n    }\n  ],\n  'Slack': [\n    {\n      tool: 'Slack',\n      category: 'Communication',\n      processName: 'Channel lifecycle governance',\n      description: 'Autonomous channel creation, user management, and access control with approval routing',\n      supportedActions: ['Create Channel', 'Add User to Channel', 'Manage User Groups', 'In-thread Notifications'],\n      projectedDeflection: '8-12%',\n      medianTTRBefore: '45 minutes - 1 hour',\n      medianTTRAfter: 'Near real-time + approval latency',\n      confidence: 'high',\n      exampleUseCase: 'Channel requests and user group changes represent 11% of volume. Great for request intake + approvals with instant execution.',\n      workstream: 'Collaboration & Communication',\n      skills: ['Channel Management', 'User Group Operations', 'Notification Routing'],\n      agents: ['Use: Slack Channel Agent', 'Use: User Group Agent']\n    }\n  ],\n  'ServiceNow': [\n    {\n      tool: 'ServiceNow',\n      category: 'ITSM Platform',\n      processName: 'Ticket triage & transitions',\n      description: 'Intelligent ticket classification, status updates, and comment automation',\n      supportedActions: ['List Issues', 'Get Issue Details', 'Transition Issue', 'Add Comment'],\n      projectedDeflection: '12-15%',\n      medianTTRBefore: '2-3 hours',\n      medianTTRAfter: '15-30 minutes (assisted) or real-time (full automation with patterns)',\n      confidence: 'medium',\n      exampleUseCase: 'Assist + partial automation first, full automation only with clear patterns. Reduces triage time by 75% for common request types.',\n      workstream: 'IT Service Management',\n      skills: ['Ticket Classification', 'Workflow Orchestration', 'Status Management'],\n      agents: ['Use: Triage Agent', 'Use: Workflow Automation Agent']\n    }\n  ],\n  'Jira': [\n    {\n      tool: 'Jira',\n      category: 'ITSM Platform',\n      processName: 'Ticket triage & transitions',\n      description: 'Intelligent ticket classification, status updates, and comment automation',\n      supportedActions: ['List Issues', 'Get Issue Details', 'Transition Issue', 'Add Comment'],\n      projectedDeflection: '12-15%',\n      medianTTRBefore: '2-3 hours',\n      medianTTRAfter: '15-30 minutes (assisted) or real-time (full automation with patterns)',\n      confidence: 'medium',\n      exampleUseCase: 'Assist + partial automation first, full automation only with clear patterns. Reduces triage time by 75% for common request types.',\n      workstream: 'IT Service Management',\n      skills: ['Ticket Classification', 'Workflow Orchestration', 'Status Management'],\n      agents: ['Use: Triage Agent', 'Use: Workflow Automation Agent']\n    }\n  ],\n  'Jira Service Management': [\n    {\n      tool: 'Jira Service Management',\n      category: 'ITSM Platform',\n      processName: 'Ticket triage & transitions',\n      description: 'Intelligent ticket classification, status updates, and comment automation',\n      supportedActions: ['List Issues', 'Get Issue Details', 'Transition Issue', 'Add Comment'],\n      projectedDeflection: '12-15%',\n      medianTTRBefore: '2-3 hours',\n      medianTTRAfter: '15-30 minutes (assisted) or real-time (full automation with patterns)',\n      confidence: 'medium',\n      exampleUseCase: 'Assist + partial automation first, full automation only with clear patterns. Reduces triage time by 75% for common request types.',\n      workstream: 'IT Service Management',\n      skills: ['Ticket Classification', 'Workflow Orchestration', 'Status Management'],\n      agents: ['Use: Triage Agent', 'Use: Workflow Automation Agent']\n    }\n  ],\n  'Zoom': [\n    {\n      tool: 'Zoom',\n      category: 'Communication',\n      processName: 'License upgrades on-demand',\n      description: 'Autonomous license tier changes with approval-based workflows',\n      supportedActions: ['Update User License', 'Notify Requester'],\n      projectedDeflection: '5-7%',\n      medianTTRBefore: '1-2 hours',\n      medianTTRAfter: 'Near real-time + approval latency',\n      confidence: 'high',\n      exampleUseCase: 'License upgrade requests are simple, repeatable, and approval-gated. Perfect for instant execution post-approval.',\n      workstream: 'Software Licensing',\n      skills: ['License Management', 'User Account Operations'],\n      agents: ['Use: License Management Agent']\n    }\n  ],\n  'Google Workspace': [\n    {\n      tool: 'Google Workspace',\n      category: 'Productivity Suite',\n      processName: 'Email group & drive access management',\n      description: 'Autonomous DL changes, shared drive access, and calendar resource management',\n      supportedActions: ['Add User to Group', 'Grant Drive Access', 'Manage Calendar Resources'],\n      projectedDeflection: '10-14%',\n      medianTTRBefore: '1-1.5 hours',\n      medianTTRAfter: 'Near real-time + approval latency',\n      confidence: 'high',\n      exampleUseCase: 'DL changes and shared drive access represent 13% of volume. Simple, rules-based operations with high automation potential.',\n      workstream: 'Productivity & Collaboration',\n      skills: ['Group Management', 'Access Control', 'Resource Management'],\n      agents: ['Use: Workspace Access Agent', 'Use: Group Management Agent']\n    }\n  ],\n  'Microsoft 365': [\n    {\n      tool: 'Microsoft 365',\n      category: 'Productivity Suite',\n      processName: 'Email group & drive access management',\n      description: 'Autonomous DL changes, SharePoint access, and Teams resource management',\n      supportedActions: ['Add User to Group', 'Grant SharePoint Access', 'Manage Teams Resources'],\n      projectedDeflection: '10-14%',\n      medianTTRBefore: '1-1.5 hours',\n      medianTTRAfter: 'Near real-time + approval latency',\n      confidence: 'high',\n      exampleUseCase: 'DL changes and SharePoint access represent 13% of volume. Simple, rules-based operations with high automation potential.',\n      workstream: 'Productivity & Collaboration',\n      skills: ['Group Management', 'Access Control', 'Resource Management'],\n      agents: ['Use: M365 Access Agent', 'Use: Group Management Agent']\n    }\n  ]\n};\n\nexport function generateOpportunities(data: AssessmentData): AutomationOpportunity[] {\n  const opportunities: AutomationOpportunity[] = [];\n  \n  // Map through selected tech stack and find opportunities\n  data.techStack.forEach(tool => {\n    const toolOpportunities = OPPORTUNITY_DATABASE[tool];\n    if (toolOpportunities) {\n      opportunities.push(...toolOpportunities);\n    }\n  });\n\n  // Sort by projected deflection (descending)\n  return opportunities.sort((a, b) => {\n    const aDeflection = parseInt(a.projectedDeflection.split('-')[1]);\n    const bDeflection = parseInt(b.projectedDeflection.split('-')[1]);\n    return bDeflection - aDeflection;\n  });\n}\n\nexport function getTop5Opportunities(data: AssessmentData): AutomationOpportunity[] {\n  const allOpportunities = generateOpportunities(data);\n  return allOpportunities.slice(0, 5);\n}\n\nexport function calculateTotalDeflection(opportunities: AutomationOpportunity[]): number {\n  // Calculate combined deflection (not simple addition due to overlaps)\n  // Use conservative estimate: 70% of sum for top 3, then diminishing returns\n  if (opportunities.length === 0) return 0;\n  \n  const deflections = opportunities.slice(0, 5).map(opp => {\n    const range = opp.projectedDeflection.split('-');\n    return parseInt(range[1]); // Use upper bound\n  });\n  \n  const topThree = deflections.slice(0, 3).reduce((sum, val) => sum + val, 0) * 0.7;\n  const remaining = deflections.slice(3).reduce((sum, val) => sum + val, 0) * 0.4;\n  \n  return Math.round(topThree + remaining);\n}\n","size_bytes":10883},"src/components/cta/UnlockReportModal.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport Button from \"@/components/ui/Button\";\nimport Input from \"@/components/ui/Input\";\nimport Select from \"@/components/ui/Select\";\n\ninterface UnlockReportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst ROLE_OPTIONS = [\n  { value: \"it-manager\", label: \"IT Manager\" },\n  { value: \"it-director\", label: \"IT Director\" },\n  { value: \"vp-it\", label: \"VP of IT\" },\n  { value: \"cto\", label: \"CTO\" },\n  { value: \"cio\", label: \"CIO\" },\n  { value: \"other\", label: \"Other\" },\n];\n\nexport default function UnlockReportModal({\n  isOpen,\n  onClose,\n}: UnlockReportModalProps) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    company: \"\",\n    role: \"\",\n  });\n  const [submitted, setSubmitted] = useState(false);\n\n  if (!isOpen) return null;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // TODO: Integrate with CRM (HubSpot/Salesforce)\n    console.log(\"Form submitted:\", formData);\n\n    // Show success state\n    setSubmitted(true);\n\n    // Close modal after 2 seconds\n    setTimeout(() => {\n      onClose();\n    }, 2000);\n  };\n\n  const updateField = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n      {/* Backdrop */}\n      <div\n        className=\"absolute inset-0 bg-black/70 backdrop-blur-sm\"\n        onClick={onClose}\n      />\n\n      {/* Modal */}\n      <div className=\"relative bg-bg-card border border-brand-secondary/20 rounded-lg shadow-2xl max-w-md w-full p-8 animate-in fade-in zoom-in duration-300\">\n        {/* Close button */}\n        <button\n          onClick={onClose}\n          className=\"absolute top-4 right-4 text-text-tertiary hover:text-text-primary transition-colors\"\n        >\n          <svg\n            className=\"w-6 h-6\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M6 18L18 6M6 6l12 12\"\n            />\n          </svg>\n        </button>\n\n        <div className=\"text-center\">\n          <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n            Move from Blueprint to Proof.\n          </h2>\n          <p className=\"text-lg text-text-secondary mb-6\">\n            Your Blueprint shows what's possible — now validate it with your real data.\n          </p>\n\n          <a \n            href=\"https://www.ai.work/book-a-demo\" \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            className=\"inline-flex items-center gap-3 bg-white text-black px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors mb-4\"\n          >\n            <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n            <span className=\"flex-1 text-center\">Run Your Data Science Assessment</span>\n            <span>&gt;</span>\n          </a>\n\n          <p className=\"text-sm text-text-tertiary\">\n            Quantify impact. Verify accuracy. Build your deployment plan.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3245},"src/components/ui/ConnectedAppLogos.tsx":{"content":"interface ConnectedAppLogosProps {\n  apps: string[];\n  maxVisible?: number;\n  size?: number;\n  spacing?: number;\n  prominent?: boolean; // For larger, more prominent display\n}\n\nconst APP_LOGO_MAP: Record<string, string> = {\n  'Okta': 'https://logo.clearbit.com/okta.com',\n  'ServiceNow': 'https://logo.clearbit.com/servicenow.com',\n  'Slack': 'https://logo.clearbit.com/slack.com',\n  'Jira': 'https://logo.clearbit.com/atlassian.com',\n  'Zendesk': 'https://logo.clearbit.com/zendesk.com',\n  'Microsoft 365': 'https://logo.clearbit.com/microsoft.com',\n  'Google Workspace': 'https://logo.clearbit.com/google.com',\n  'Azure AD': 'https://logo.clearbit.com/microsoft.com',\n  'Salesforce': 'https://logo.clearbit.com/salesforce.com',\n  'GitHub': 'https://logo.clearbit.com/github.com',\n  'GitLab': 'https://logo.clearbit.com/gitlab.com',\n  'Confluence': 'https://logo.clearbit.com/atlassian.com',\n  'Asana': 'https://logo.clearbit.com/asana.com',\n  'Monday.com': 'https://logo.clearbit.com/monday.com',\n  'Zoom': 'https://logo.clearbit.com/zoom.com',\n  'Teams': 'https://logo.clearbit.com/microsoft.com',\n  'Workday': 'https://logo.clearbit.com/workday.com',\n  'BambooHR': 'https://logo.clearbit.com/bamboohr.com',\n  'Duo Security': 'https://logo.clearbit.com/duo.com',\n  'CyberArk': 'https://logo.clearbit.com/cyberark.com',\n};\n\nexport default function ConnectedAppLogos({ \n  apps, \n  maxVisible = 7,\n  size = 24,\n  spacing = 12,\n  prominent = false\n}: ConnectedAppLogosProps) {\n  const visibleApps = apps.slice(0, maxVisible);\n  const hasOverflow = apps.length > maxVisible;\n  \n  const gapClass = spacing === 12 ? 'gap-3' : spacing === 8 ? 'gap-2' : 'gap-4';\n  \n  return (\n    <div className={`flex items-center flex-wrap ${gapClass}`}>\n      {visibleApps.map((app, index) => {\n        const logoUrl = APP_LOGO_MAP[app] || `https://logo.clearbit.com/${app.toLowerCase().replace(/\\s+/g, '')}.com`;\n        \n        return (\n          <div\n            key={`${app}-${index}`}\n            className=\"relative group\"\n          >\n            {prominent ? (\n              <div className=\"relative\">\n                {/* Circular background with subtle border */}\n                <div \n                  className=\"rounded-full bg-bg-primary border-2 border-border/30 flex items-center justify-center transition-all duration-200 hover:border-highlight/40 hover:scale-105\"\n                  style={{ \n                    height: `${size + 12}px`, \n                    width: `${size + 12}px`\n                  }}\n                >\n                  <img\n                    src={logoUrl}\n                    alt={`${app} logo`}\n                    className=\"rounded-full\"\n                    style={{ \n                      height: `${size}px`, \n                      width: `${size}px`,\n                      objectFit: 'contain',\n                      padding: '4px'\n                    }}\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = 'none';\n                      const parent = target.parentElement;\n                      if (parent) {\n                        const initials = app.split(' ').map(word => word[0]).join('').slice(0, 2).toUpperCase();\n                        parent.innerHTML = `\n                          <div class=\"flex items-center justify-center text-text-tertiary text-sm font-bold\" \n                               style=\"height: 100%; width: 100%;\">\n                            ${initials}\n                          </div>\n                        `;\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n            ) : (\n              <img\n                src={logoUrl}\n                alt={`${app} logo`}\n                className=\"rounded transition-all duration-200 hover:scale-102 hover:shadow-glow-highlight-hover\"\n                style={{ \n                  height: `${size}px`, \n                  width: `${size}px`,\n                  objectFit: 'contain'\n                }}\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = 'none';\n                  const parent = target.parentElement;\n                  if (parent) {\n                    const initials = app.split(' ').map(word => word[0]).join('').slice(0, 2).toUpperCase();\n                    parent.innerHTML = `\n                      <div class=\"flex items-center justify-center bg-bg-card-alt rounded text-text-tertiary text-xs font-semibold\" \n                           style=\"height: ${size}px; width: ${size}px;\">\n                        ${initials}\n                      </div>\n                    `;\n                  }\n                }}\n              />\n            )}\n            {/* Tooltip */}\n            <div className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-2 px-2 py-1 bg-bg-card border border-bg-card-alt/40 rounded text-xs text-text-primary whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10\">\n              {app} Integration Active\n            </div>\n          </div>\n        );\n      })}\n      \n      {hasOverflow && (\n        <div \n          className=\"flex items-center justify-center bg-bg-card-alt rounded text-text-tertiary text-xs font-semibold\"\n          style={{ height: `${size}px`, width: `${size}px` }}\n          title={`+${apps.length - maxVisible} more`}\n        >\n          +{apps.length - maxVisible}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5578},"src/components/assessment/AdditionalContext.tsx":{"content":"'use client';\n\nimport Card from '@/components/ui/Card';\n\ninterface AdditionalContextProps {\n  additionalContext: string;\n  onChange: (field: string, value: string) => void;\n}\n\nexport default function AdditionalContext({\n  additionalContext,\n  onChange,\n}: AdditionalContextProps) {\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n        Additional Context\n      </h2>\n      <p className=\"text-text-tertiary mb-8\">\n        Tell us anything that you think would be valuable for us to understand your org. We'll use AI to layer that context into our assessment.\n      </p>\n\n      <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n        <textarea\n          value={additionalContext}\n          onChange={(e) => onChange('additionalContext', e.target.value)}\n          className=\"w-full bg-black border border-bg-card-alt/40 rounded-lg px-4 py-3 text-text-primary focus:outline-none focus:border-highlight/40 transition-colors resize-none\"\n          rows={8}\n          placeholder=\"We are an international company, I personally oversee the IT for NAM but our team in France uses Ivanti vs ServiceNow and is managed by a different individual. They need to respect GDPR and I want the report broken out separately for their work.\"\n        />\n        <p className=\"text-sm text-text-tertiary mt-4\">\n          Examples: Multi-region setups, compliance requirements, unique workflows, org structure, tool variations\n        </p>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1533},"src/components/assessment/VolumeServiceProfile.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport Card from '@/components/ui/Card';\n\ninterface VolumeServiceProfileProps {\n  monthlyTickets: number;\n  ticketDistribution: {\n    applications: number;\n    hardware: number;\n    onboarding: number;\n    distributionLists: number;\n    network: number;\n    security: number;\n  };\n  onChange: (field: string, value: any) => void;\n}\n\nexport default function VolumeServiceProfile({\n  monthlyTickets,\n  ticketDistribution,\n  onChange,\n}: VolumeServiceProfileProps) {\n  const [localDistribution, setLocalDistribution] = useState(ticketDistribution);\n\n  useEffect(() => {\n    setLocalDistribution(ticketDistribution);\n  }, [ticketDistribution]);\n\n  const handleSliderChange = (category: keyof typeof ticketDistribution, newValue: number) => {\n    const updated = { ...localDistribution, [category]: newValue };\n    \n    setLocalDistribution(updated);\n    onChange('ticketDistribution', updated);\n  };\n\n  const total = Object.values(localDistribution).reduce((sum, val) => sum + val, 0);\n\n  const categories = [\n    { key: 'applications', label: 'Applications' },\n    { key: 'hardware', label: 'Hardware' },\n    { key: 'onboarding', label: 'Onboarding/Offboarding' },\n    { key: 'distributionLists', label: 'Distribution Lists' },\n    { key: 'network', label: 'Network' },\n    { key: 'security', label: 'Security' },\n  ] as const;\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n        Volume & Service Profile\n      </h2>\n      <p className=\"text-text-tertiary mb-8\">\n        Help us understand your typical ticket volume and distribution\n      </p>\n\n      <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n        {/* Monthly Tickets Input */}\n        <div className=\"mb-8\">\n          <label className=\"block text-text-primary font-bold mb-2\">\n            Average Monthly Tickets\n          </label>\n          <input\n            type=\"number\"\n            value={monthlyTickets || ''}\n            onChange={(e) => onChange('monthlyTickets', parseInt(e.target.value) || 0)}\n            className=\"w-full bg-black border border-bg-card-alt/40 rounded-lg px-4 py-3 text-text-primary focus:outline-none focus:border-highlight/40 transition-colors\"\n            placeholder=\"1000\"\n            min=\"0\"\n          />\n          <p className=\"text-sm text-text-tertiary mt-2\">\n            Approximate number of IT tickets your team handles per month\n          </p>\n        </div>\n\n        {/* Ticket Distribution Sliders */}\n        <div>\n          <label className=\"block text-text-primary font-bold mb-4\">\n            Ticket Distribution by Category (%)\n          </label>\n\n          <div className=\"space-y-6\">\n            {categories.map(({ key, label }) => (\n              <div key={key}>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-text-primary\">{label}</span>\n                  <span className=\"text-text-primary font-bold\">{localDistribution[key]}%</span>\n                </div>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={localDistribution[key]}\n                  onChange={(e) => handleSliderChange(key, parseInt(e.target.value))}\n                  className=\"w-full h-2 bg-bg-card-alt rounded-lg appearance-none cursor-pointer slider\"\n                  style={{\n                    background: `linear-gradient(to right, #82D895 0%, #82D895 ${localDistribution[key]}%, #41403E ${localDistribution[key]}%, #41403E 100%)`,\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n\n          <div className=\"mt-6 pt-4 border-t border-bg-card-alt/20\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-text-tertiary\">Total:</span>\n              <span className={`font-bold text-lg ${total === 100 ? 'text-highlight' : 'text-red-400'}`}>\n                {total}%\n              </span>\n            </div>\n            {total > 100 && (\n              <p className=\"text-red-400 text-sm mt-2\">\n                Total percentage cannot exceed 100%. Please adjust your distribution.\n              </p>\n            )}\n            {total < 100 && total > 0 && (\n              <p className=\"text-yellow-500 text-sm mt-2\">\n                Total should equal 100% to proceed.\n              </p>\n            )}\n          </div>\n        </div>\n      </Card>\n\n      <style jsx>{`\n        .slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: white;\n          cursor: pointer;\n          border: 2px solid #82D895;\n        }\n\n        .slider::-moz-range-thumb {\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: white;\n          cursor: pointer;\n          border: 2px solid #82D895;\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":5041},"src/types/types-v3.ts":{"content":"// V3 Architecture Type Definitions\n\n// ============================================================================\n// Assessment Input Types\n// ============================================================================\n\nexport interface AssessmentInput {\n  techStack: string[]; // Tool IDs selected by user\n  monthlyTickets: number; // Total monthly ticket volume\n  ticketDistribution: {\n    // Percentage distribution (must sum to 100)\n    [category: string]: number; // e.g., \"applications\": 24\n  };\n  additionalContext?: string; // Free-form context from Step 3\n}\n\n// ============================================================================\n// Engine Output Types\n// ============================================================================\n\n// FeasibilityEngine Output\nexport interface FeasibilityResult {\n  tool: string; // Display name (e.g., \"Okta\")\n  available_apis: string[]; // API display names\n  available_capabilities: string[]; // All capabilities from APIs\n  enabled_use_cases: string[]; // Use case IDs (not names)\n  missing_apis: string[]; // API keys blocking use cases\n  license_gaps: string[]; // Upgrade messages\n  prerequisites: string[]; // Setup requirements\n  confidence: number; // 0.90 if use cases enabled, 0.50 otherwise\n}\n\n// UseCaseMatcher Output\nexport interface MatchedUseCase {\n  use_case_id: string;\n  name: string;\n  category: string;\n  description: string;\n  value_proposition: string;\n  fit_score: number; // 0-100\n  estimated_monthly_deflection: number; // Tickets automated\n  estimated_hours_saved: number; // Hours per month\n  confidence: number; // From use case definition\n  implementation_effort: \"low\" | \"medium\" | \"high\";\n  time_to_value_days: number;\n  prerequisites: string[];\n  workflow_steps: string[];\n  priority: \"immediate\" | \"quick_win\" | \"future\";\n  required_tools: string[];\n  automation_type?: \"full_automation\" | \"assisted\";\n}\n\n// ROICalculator Output\nexport interface ROIResult {\n  total_monthly_tickets: number;\n  automatable_tickets: number;\n  automatable_pct: number; // Rounded to 1 decimal\n  total_hours_saved: number; // Raw operational hours (pre-capture)\n  expected_hours_saved: number; // Confidence-weighted expected value\n  p70_hours_saved: number; // Conservative band (70th percentile)\n  p90_hours_saved: number; // Very conservative band (90th percentile)\n  capacity_fte: number; // Theoretical capacity freed (hours/2000)\n  budget_fte: number; // Realistic budget impact (captured hours / effective hours per FTE)\n  fte_equivalent: number; // Backward-compat alias of capacity_fte\n  annual_value_usd: number;\n  confidence: number; // Percentage (0-100)\n  \n  // NEW: Separate full automation vs assisted\n  full_automation_tickets: number;\n  full_automation_hours: number;\n  assisted_tickets: number;\n  assisted_hours: number;\n  \n  breakdown_by_category: CategoryBreakdown[];\n}\n\nexport interface CategoryBreakdown {\n  category: string;\n  tickets: number;\n  hours_saved: number; // Rounded to 1 decimal\n  confidence: number; // Average of use case confidences\n}\n\n// ============================================================================\n// Report Data Structure\n// ============================================================================\n\nexport interface ReportData {\n  assessmentInput: AssessmentInput;\n  feasibilityResults: FeasibilityResult[];\n  matchedUseCases: MatchedUseCase[];\n  roiResult: ROIResult;\n  generatedAt: string; // ISO timestamp\n}\n\n// ============================================================================\n// Data Source Types (from JSON files)\n// ============================================================================\n\n// tool-apis.json structure\nexport interface ToolAPIsData {\n  tools: {\n    [toolKey: string]: {\n      name: string;\n      category: \"identity\" | \"itsm\" | \"communication\" | \"productivity\";\n      apis: {\n        [apiKey: string]: {\n          name: string;\n          base_url: string;\n          endpoints: APIEndpoint[];\n          capabilities: string[];\n          scopes_required: string[];\n          documentation: string;\n        };\n      };\n      license_tiers: {\n        [tierName: string]: string[]; // Array of API keys\n      };\n      prerequisites: string;\n    };\n  };\n}\n\nexport interface APIEndpoint {\n  method: string;\n  path: string;\n  description: string;\n}\n\n// use-case-mappings.json structure\nexport interface UseCaseMappingsData {\n  use_cases: UseCaseDefinition[];\n}\n\nexport interface UseCaseDefinition {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n  value_proposition: string;\n  required_tools: string[];\n  required_apis: {\n    [toolKey: string]: string[]; // Tool key → array of API keys\n  };\n  ticket_categories: string[]; // Categories this use case handles\n  automation_type?: \"full_automation\" | \"assisted\";\n  automation_rate: number; // 0.0 to 1.0\n  implementation_effort: \"low\" | \"medium\" | \"high\";\n  time_to_value_days: number;\n  confidence: number; // 0.0 to 1.0\n  prerequisites: string[];\n  workflow_steps: string[];\n}\n\n// benchmarks.json structure\nexport interface BenchmarksData {\n  ticket_categories: {\n    [category: string]: {\n      median_ttr_hours: number;\n      automation_potential: number;\n    };\n  };\n}\n\n// ============================================================================\n// Component Props Types\n// ============================================================================\n\nexport interface ExecutiveSummaryProps {\n  roiResult: ROIResult;\n  totalMonthlyTickets: number;\n  assessmentData: {\n    techStack: string[];\n    additionalContext?: string;\n  };\n}\n\nexport interface StackAnalysisProps {\n  feasibilityResults: FeasibilityResult[];\n  matchedUseCases: MatchedUseCase[];\n}\n\nexport interface GapAnalysisProps {\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport interface OpportunityAnalysisProps {\n  matchedUseCases: MatchedUseCase[];\n  topN?: number;\n}\n\nexport interface BestFitUseCasesProps {\n  matchedUseCases: MatchedUseCase[];\n}\n\nexport interface ROIBreakdownProps {\n  roiResult: ROIResult;\n}\n\nexport interface GetStartedRoadmapProps {\n  matchedUseCases: MatchedUseCase[];\n}\n\nexport interface ExpectedOutcomesProps {\n  roiResult: ROIResult;\n  totalMonthlyTickets: number;\n}\n\n// ============================================================================\n// Internal Processing Types\n// ============================================================================\n\nexport interface UserActivity {\n  category: string; // \"applications\", \"security\", etc.\n  monthly_volume: number; // Ticket count\n  avg_ttr_hours: number; // Average time-to-resolve\n  requires_approval?: boolean;\n}\n\nexport interface FitScoreBreakdown {\n  stack_support: number; // 0-40 points\n  volume_score: number; // 0-30 points\n  ttr_score: number; // 0-20 points\n  effort_score: number; // 0-10 points\n  total: number; // Sum (0-100)\n}\n\n// ============================================================================\n// Utility Types\n// ============================================================================\n\nexport type Priority = \"immediate\" | \"quick_win\" | \"future\";\nexport type ImplementationEffort = \"low\" | \"medium\" | \"high\";\nexport type ToolCategory =\n  | \"identity\"\n  | \"itsm\"\n  | \"communication\"\n  | \"productivity\";\n","size_bytes":7235},"src/lib/engines/use-case-matcher.ts":{"content":"import useCaseMappings from '@/data/use-case-mappings.json';\nimport { FeasibilityResult } from './feasibility-engine';\n\ninterface UserActivity {\n  category: string;\n  monthly_volume: number;\n  avg_ttr_hours: number;\n  requires_approval?: boolean;\n}\n\nexport interface MatchedUseCase {\n  use_case_id: string;\n  name: string;\n  category: string;\n  description: string;\n  value_proposition: string;\n  fit_score: number;\n  estimated_monthly_deflection: number; // keep as float; no rounding here\n  estimated_hours_saved: number;        // keep as float; no rounding here\n  confidence: number;\n  implementation_effort: 'low' | 'medium' | 'high';\n  time_to_value_days: number;\n  prerequisites: string[];\n  workflow_steps: string[];\n  priority: 'immediate' | 'quick_win' | 'future';\n  required_tools: string[];\n  automation_type: 'full_automation' | 'assisted'; // NEW: distinguish full vs assisted automation\n\n  // NEW (optional realism knobs)\n  post_auto_ttr_hours?: number;   // if present, use time delta vs. full deflection\n  approval_leakage_pct?: number;  // 0..1 portion needing human approval\n  cherry_picking_factor?: number; // 0-1: TTR ratio of automated vs all tickets (AI gets easier ones)\n}\n\nexport class UseCaseMatcher {\n  \n  /**\n   * Matches user activities to available AI Workers\n   */\n  matchUseCases(\n    activities: UserActivity[],\n    feasibilityResults: FeasibilityResult[]\n  ): MatchedUseCase[] {\n    \n    // Get all enabled use case IDs from feasibility analysis\n    const enabledUseCaseIds = new Set(\n      feasibilityResults.flatMap(result => result.enabled_use_cases)\n    );\n\n    // Track remaining capacity per activity to prevent double-counting\n    const remainingCapacity = new Map<string, number>();\n    activities.forEach(activity => {\n      remainingCapacity.set(activity.category, activity.monthly_volume);\n    });\n\n    // Sort use cases by rough marginal value so higher-impact consumes capacity first\n    const sortedUseCases = (useCaseMappings as any).use_cases\n      .slice()\n      .sort((a: any, b: any) => {\n        const score = (uc: any) =>\n          (uc.automation_rate ?? 0) * (uc.confidence ?? 0.7);\n        return score(b) - score(a);\n      });\n\n    const matches: MatchedUseCase[] = [];\n\n    for (const useCase of sortedUseCases) {\n      // Skip if not enabled by current stack\n      if (!enabledUseCaseIds.has(useCase.id)) {\n        continue;\n      }\n\n      // Find matching activities\n      const matchingActivities = activities.filter(activity =>\n        useCase.ticket_categories?.some((category: string) => \n          activity.category.toLowerCase().includes(category.toLowerCase()) ||\n          category.toLowerCase().includes(activity.category.toLowerCase())\n        )\n      );\n\n      if (matchingActivities.length === 0) {\n        continue;\n      }\n\n      // Calculate fit score (0-100) using ORIGINAL volumes (not remaining)\n      let fitScore = 0;\n      \n      // Base score: stack support (40 points)\n      fitScore += 40;\n      \n      // Volume score (30 points): higher volume = better fit\n      const totalVolume = matchingActivities.reduce((sum, a) => sum + a.monthly_volume, 0);\n      const volumeScore = Math.min(30, (totalVolume / 50) * 30); // 50+ tickets = max score\n      fitScore += volumeScore;\n      \n      // TTR score (20 points): higher TTR = more savings\n      const avgTtr = matchingActivities.reduce((sum, a) => sum + a.avg_ttr_hours, 0) / matchingActivities.length;\n      const ttrScore = Math.min(20, (avgTtr / 2) * 20); // 2+ hours = max score\n      fitScore += ttrScore;\n      \n      // Implementation effort score (10 points): lower effort = higher score\n      const effortScore = useCase.implementation_effort === 'low' ? 10 : \n                         useCase.implementation_effort === 'medium' ? 6 : 3;\n      fitScore += effortScore;\n\n      // Calculate estimated impact using REMAINING capacity (prevents double-counting)\n      let estimatedDeflection = 0;\n      let estimatedHoursSaved = 0;\n\n      for (const activity of matchingActivities) {\n        const remaining = remainingCapacity.get(activity.category) ?? 0;\n        if (remaining <= 0) continue;\n\n        const deflectRate = Math.max(Math.min(useCase.automation_rate ?? 0, 1), 0);\n        const possible = activity.monthly_volume * deflectRate;\n        const deflectable = Math.min(remaining, possible);\n\n        // CRITICAL INSIGHT: AI Workers cherry-pick the EASIER tickets first\n        // Cherry-picking factor represents the TTR ratio of automated vs all tickets\n        // Example: If median TTR = 1.5hrs but AI automates tickets with 0.3hr TTR,\n        // cherry_picking_factor = 0.3 / 1.5 = 0.2\n        const cherryPickingFactor = Math.max(Math.min(useCase.cherry_picking_factor ?? 1.0, 1), 0);\n        const adjustedBaseline = activity.avg_ttr_hours * cherryPickingFactor;\n\n        // Partial automation support (for \"assisted\" type)\n        const postAuto = Math.max(useCase.post_auto_ttr_hours ?? 0, 0);\n        const hasPost = useCase.post_auto_ttr_hours != null;\n\n        // Hours saved logic:\n        // - If postAuto provided (assisted): use delta with cherry-picked baseline\n        // - Else (full automation): use cherry-picked baseline\n        const delta = Math.max(adjustedBaseline - postAuto, 0);\n        const hoursPerTicket = hasPost ? delta : adjustedBaseline;\n\n        // Optional approval leakage (portion not fully automated)\n        const leakage = Math.min(Math.max(useCase.approval_leakage_pct ?? 0, 0), 1);\n        // Conservative assumption: leaked items yield zero savings (changeable)\n        const effectiveHoursPerTicket = hoursPerTicket * (1 - leakage);\n\n        estimatedDeflection += deflectable;\n        estimatedHoursSaved += deflectable * effectiveHoursPerTicket;\n\n        // Reduce remaining capacity\n        remainingCapacity.set(activity.category, remaining - deflectable);\n      }\n\n      if (estimatedDeflection <= 0) continue;\n\n      // Determine priority\n      let priority: 'immediate' | 'quick_win' | 'future';\n      if (useCase.implementation_effort === 'low' && useCase.time_to_value_days <= 7) {\n        priority = 'immediate';\n      } else if (useCase.time_to_value_days <= 21) {\n        priority = 'quick_win';\n      } else {\n        priority = 'future';\n      }\n\n      matches.push({\n        use_case_id: useCase.id,\n        name: useCase.name,\n        category: useCase.category,\n        description: useCase.description,\n        value_proposition: useCase.value_proposition,\n        fit_score: Math.round(fitScore),\n        estimated_monthly_deflection: estimatedDeflection, // no rounding\n        estimated_hours_saved: estimatedHoursSaved,         // no rounding\n        confidence: useCase.confidence,\n        implementation_effort: useCase.implementation_effort,\n        time_to_value_days: useCase.time_to_value_days,\n        prerequisites: useCase.prerequisites,\n        workflow_steps: useCase.workflow_steps,\n        priority,\n        required_tools: useCase.required_tools,\n        automation_type: useCase.automation_type ?? 'full_automation', // default to full if missing\n        // pass through for inspection (optional)\n        post_auto_ttr_hours: useCase.post_auto_ttr_hours,\n        approval_leakage_pct: useCase.approval_leakage_pct,\n        cherry_picking_factor: useCase.cherry_picking_factor\n      });\n    }\n\n    // Sort by fit score (descending)\n    return matches.sort((a, b) => b.fit_score - a.fit_score);\n  }\n\n  /**\n   * Groups matched use cases by priority\n   */\n  groupByPriority(matches: MatchedUseCase[]) {\n    return {\n      immediate: matches.filter(m => m.priority === 'immediate'),\n      quick_wins: matches.filter(m => m.priority === 'quick_win'),\n      future: matches.filter(m => m.priority === 'future')\n    };\n  }\n\n  /**\n   * Gets top N use cases\n   */\n  getTopUseCases(matches: MatchedUseCase[], n: number = 5): MatchedUseCase[] {\n    return matches.slice(0, n);\n  }\n}\n","size_bytes":7907},"src/lib/engines/feasibility-engine.ts":{"content":"import toolApis from '@/data/tool-apis.json';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface Tool {\n  name: string;\n  license_tier?: string;\n}\n\nexport interface FeasibilityResult {\n  tool: string;\n  available_apis: string[];\n  available_capabilities: string[];\n  enabled_use_cases: string[];\n  missing_apis: string[];\n  license_gaps: string[];\n  prerequisites: string[];\n  confidence: number;\n}\n\nexport class FeasibilityEngine {\n  \n  /**\n   * Analyzes which APIs and capabilities are available for a given tool\n   */\n  analyzeToolFeasibility(tool: Tool): FeasibilityResult {\n    const toolName = tool.name.toLowerCase().replace(/[\\s-]+/g, '_');\n    const toolConfig = (toolApis as any).tools[toolName];\n    \n    if (!toolConfig) {\n      return {\n        tool: tool.name,\n        available_apis: [],\n        available_capabilities: [],\n        enabled_use_cases: [],\n        missing_apis: [],\n        license_gaps: [],\n        prerequisites: ['Tool configuration not found'],\n        confidence: 0\n      };\n    }\n\n    // Show ALL available APIs regardless of license tier\n    const availableApiKeys = Object.keys(toolConfig.apis);\n    \n    const availableApis: string[] = [];\n    const availableCapabilities: string[] = [];\n    const prerequisites: string[] = [];\n\n    // Collect all available APIs and capabilities\n    for (const apiKey of availableApiKeys) {\n      const apiConfig = toolConfig.apis[apiKey];\n      if (apiConfig) {\n        availableApis.push(apiConfig.name);\n        availableCapabilities.push(...(apiConfig.capabilities as string[]));\n        prerequisites.push(`${apiConfig.name}: ${toolConfig.prerequisites}`);\n      }\n    }\n\n    // Find which use cases this tool enables\n    const enabledUseCases = (useCaseMappings as any).use_cases\n      .filter((useCase: any) => {\n        const isRequired = useCase.required_tools.includes(toolName);\n        const isOptional = useCase.optional_tools?.includes(toolName);\n        \n        // Tool must be either required or optional\n        if (!isRequired && !isOptional) {\n          return false;\n        }\n        \n        // Check if required APIs for this tool are available\n        const requiredApis = useCase.required_apis[toolName] || [];\n        const hasAllRequiredApis = requiredApis.every((api: string) => \n          availableApiKeys.includes(api)\n        );\n        \n        return hasAllRequiredApis;\n      })\n      .map((useCase: any) => useCase.id);\n\n    // Identify missing APIs for potential use cases\n    const potentialUseCases = (useCaseMappings as any).use_cases\n      .filter((useCase: any) => \n        useCase.required_tools.includes(toolName) && \n        !enabledUseCases.includes(useCase.id)\n      );\n    \n    const missingApis = Array.from(new Set(\n      potentialUseCases.flatMap((useCase: any) => \n        (useCase.required_apis[toolName] || [])\n          .filter((api: string) => !availableApiKeys.includes(api))\n      )\n    )) as string[];\n\n    // No license gaps - all APIs are shown regardless of tier\n    const licenseGaps: string[] = [];\n\n    return {\n      tool: toolConfig.name,\n      available_apis: availableApis,\n      available_capabilities: availableCapabilities,\n      enabled_use_cases: enabledUseCases,\n      missing_apis: missingApis,\n      license_gaps: Array.from(new Set(licenseGaps)),\n      prerequisites,\n      confidence: enabledUseCases.length > 0 ? 0.90 : 0.50\n    };\n  }\n\n  /**\n   * Analyzes the entire stack\n   */\n  analyzeStack(tools: Tool[]): FeasibilityResult[] {\n    return tools.map(tool => this.analyzeToolFeasibility(tool));\n  }\n\n  /**\n   * Gets detailed API information for a specific tool and API category\n   */\n  getApiDetails(toolName: string, apiCategory: string) {\n    const tool = (toolApis as any).tools[toolName.toLowerCase().replace(/[\\s-]+/g, '_')];\n    if (!tool || !tool.apis[apiCategory]) {\n      return null;\n    }\n\n    const api = tool.apis[apiCategory];\n    return {\n      name: api.name,\n      base_url: api.base_url,\n      endpoints: api.endpoints,\n      capabilities: api.capabilities,\n      scopes_required: api.scopes_required,\n      documentation: api.documentation\n    };\n  }\n}\n","size_bytes":4149},"V3_REPORT_ARCHITECTURE.md":{"content":"# V3 Report Architecture\n\n## Overview\n\nThe V3 report system transforms user assessment data into specific, API-grounded recommendations for AI Worker deployment. Instead of generic estimates, it analyzes the user's actual tech stack capabilities, ticket distribution, and volumes to provide precise automation opportunities.\n\n**Key Innovation:** The report shows exactly which AI Workers can be deployed based on the user's real API availability, not hypothetical scenarios.\n\n## System Architecture\n\n### High-Level Flow\n\n```\nAssessment Data (3 Steps)\n    ↓\n[Analysis Phase - 3 Engines]\n    ├── FeasibilityEngine: Analyzes API availability\n    ├── UseCaseMatcher: Matches AI Workers to ticket categories\n    └── ROICalculator: Calculates precise ROI\n    ↓\nReport Components (Display Results)\n```\n\n### The Three Analysis Engines\n\nLocated in `/src/lib/engines/`, these engines process assessment data during the 3-second analysis phase:\n\n#### 1. **FeasibilityEngine** (`feasibility-engine.ts`)\n\n**Purpose:** Determines which APIs and capabilities are available based on user's tech stack and license tiers.\n\n**Input:**\n- Tools array: `[{ name: \"Okta\", license_tier: \"enterprise\" }]`\n\n**Process:**\n1. Looks up each tool in `tool-apis.json` under `tools.{tool_name}`\n2. Gets available API keys from `license_tiers.{license_tier}`\n3. Collects API details from `apis.{api_key}` for each available key\n4. Cross-references with `use-case-mappings.json` to find enabled use case IDs\n5. Identifies missing APIs by checking blocked use cases\n6. Identifies license upgrade opportunities\n\n**TypeScript Interface:**\n```typescript\ninterface FeasibilityResult {\n  tool: string;                      // Display name (e.g., \"Okta\")\n  available_apis: string[];          // API display names\n  available_capabilities: string[];  // Capabilities from all APIs\n  enabled_use_cases: string[];       // Use case IDs (not names)\n  missing_apis: string[];            // API keys blocking use cases\n  license_gaps: string[];            // Upgrade messages\n  prerequisites: string[];           // Setup requirements\n  confidence: number;                // 0.90 if use cases enabled, 0.50 otherwise\n}\n```\n\n**Example Output:**\n```typescript\n{\n  tool: \"Okta\",\n  available_apis: [\n    \"User Lifecycle Management\",\n    \"Group Management\",\n    \"Application Assignments\"\n  ],\n  available_capabilities: [\n    \"create_user\", \"activate_user\", \"deactivate_user\",\n    \"create_group\", \"add_user_to_group\",\n    \"assign_user_to_app\", \"revoke_app_access\"\n  ],\n  enabled_use_cases: [\n    \"grant_software_access_okta\",\n    \"offboard_user_okta\",\n    \"create_distribution_list\"\n  ],\n  missing_apis: [],\n  license_gaps: [],\n  prerequisites: [\n    \"User Lifecycle Management: API token with appropriate scopes\",\n    \"Group Management: API token with appropriate scopes\",\n    \"Application Assignments: API token with appropriate scopes\"\n  ],\n  confidence: 0.90\n}\n```\n\n#### 2. **UseCaseMatcher** (`use-case-matcher.ts`)\n\n**Purpose:** Matches user's ticket distribution to specific AI Workers using a fit scoring algorithm.\n\n**Input:**\n```typescript\ninterface UserActivity {\n  category: string;              // \"applications\", \"security\", etc.\n  monthly_volume: number;        // Ticket count\n  avg_ttr_hours: number;         // Average time-to-resolve\n  requires_approval?: boolean;\n}\n```\n\n**Scoring Algorithm (0-100 points):**\n- **40 points:** Stack support (use case is enabled)\n- **30 points:** Volume suitability: `Math.min(30, (totalVolume / 50) * 30)` — 50+ tickets = max score\n- **20 points:** TTR suitability: `Math.min(20, (avgTtr / 2) * 20)` — 2+ hours = max score  \n- **10 points:** Implementation effort (low=10, medium=6, high=3)\n\n**Process:**\n1. Filter to only enabled use cases from feasibility results\n2. For each use case, find matching activities by ticket_categories\n3. Calculate fit score (0-100)\n4. Estimate deflection: `totalVolume * automation_rate`\n5. Estimate hours saved: `deflectedTickets * avgTtr`\n6. Prioritize: immediate (low effort + ≤7 days), quick_win (≤21 days), future (>21 days)\n\n**TypeScript Interface:**\n```typescript\ninterface MatchedUseCase {\n  use_case_id: string;\n  name: string;\n  category: string;\n  description: string;\n  value_proposition: string;\n  fit_score: number;                       // 0-100\n  estimated_monthly_deflection: number;    // Tickets automated\n  estimated_hours_saved: number;           // Hours per month\n  confidence: number;                      // From use case definition\n  implementation_effort: 'low' | 'medium' | 'high';\n  time_to_value_days: number;\n  prerequisites: string[];\n  workflow_steps: string[];\n  priority: 'immediate' | 'quick_win' | 'future';\n  required_tools: string[];\n}\n```\n\n**Example Output:**\n```typescript\n{\n  use_case_id: \"grant_software_access_okta\",\n  name: \"Grant Software Access via Okta\",\n  category: \"applications\",\n  description: \"...\",\n  value_proposition: \"...\",\n  fit_score: 79,                          // 40 + 30 + 2.5 + 6 = 78.5 → 79\n  estimated_monthly_deflection: 156,      // 240 tickets * 0.65 automation_rate\n  estimated_hours_saved: 39.0,            // 156 * 0.25 avgTtr\n  confidence: 0.85,\n  implementation_effort: \"medium\",\n  time_to_value_days: 7,\n  prerequisites: [...],\n  workflow_steps: [...],\n  priority: \"quick_win\",                  // Medium effort → not immediate\n  required_tools: [\"okta\"]\n}\n```\n\n#### 3. **ROICalculator** (`roi-calculator.ts`)\n\n**Purpose:** Calculates comprehensive ROI from all matched use cases.\n\n**Input:**\n- Total monthly tickets\n- Matched use cases from UseCaseMatcher\n- Fully loaded cost per FTE (default $100K)\n\n**Calculations:**\n- **Automatable Tickets:** Sum of `estimated_monthly_deflection` across all use cases\n- **Automatable %:** `(automatableTickets / totalMonthlyTickets) * 100`\n- **Total Hours Saved:** Sum of `estimated_hours_saved` across all use cases\n- **FTE Equivalent:** `(totalHoursSaved * 12 months) / 2000 hours per FTE`\n- **Annual Value:** `fteEquivalent * fullyLoadedCost`\n- **Weighted Confidence:** `sum(useCase.confidence * useCase.estimated_hours_saved) / totalHoursSaved`\n  - Guards against division by zero: returns 0.70 if totalHoursSaved == 0\n\n**TypeScript Interface:**\n```typescript\ninterface ROIResult {\n  total_monthly_tickets: number;\n  automatable_tickets: number;\n  automatable_pct: number;          // Rounded to 1 decimal\n  total_hours_saved: number;\n  fte_equivalent: number;           // Rounded to 1 decimal\n  annual_value_usd: number;\n  confidence: number;               // Percentage (0-100)\n  breakdown_by_category: {\n    category: string;\n    tickets: number;\n    hours_saved: number;            // Rounded to 1 decimal\n    confidence: number;             // Average of use case confidences\n  }[];\n}\n```\n\n**Example Output:**\n```typescript\n{\n  total_monthly_tickets: 1000,\n  automatable_tickets: 387,\n  automatable_pct: 38.7,\n  total_hours_saved: 156,\n  fte_equivalent: 0.9,                    // (156 * 12) / 2000\n  annual_value_usd: 93600,                // 0.9 * $100K (rounded)\n  confidence: 78,                          // Weighted by hours saved\n  breakdown_by_category: [\n    {\n      category: \"applications\",\n      tickets: 168,\n      hours_saved: 56.0,\n      confidence: 0.85\n    },\n    {\n      category: \"security\",\n      tickets: 142,\n      hours_saved: 68.0,\n      confidence: 0.76\n    },\n    {\n      category: \"onboarding\",\n      tickets: 77,\n      hours_saved: 32.0,\n      confidence: 0.72\n    }\n  ]\n}\n```\n\n## Data Sources\n\n### 1. `tool-apis.json`\n\nRoot structure:\n```json\n{\n  \"tools\": {\n    \"{tool_key}\": {\n      \"name\": \"Display Name\",\n      \"category\": \"identity|itsm|communication|productivity\",\n      \"apis\": {\n        \"{api_key}\": {\n          \"name\": \"API Display Name\",\n          \"base_url\": \"...\",\n          \"endpoints\": [...],\n          \"capabilities\": [\"capability_1\", \"capability_2\"],\n          \"scopes_required\": [...],\n          \"documentation\": \"url\"\n        }\n      },\n      \"license_tiers\": {\n        \"{tier_name}\": [\"api_key_1\", \"api_key_2\"]\n      },\n      \"prerequisites\": \"Setup requirements\"\n    }\n  }\n}\n```\n\n**Example:**\n```json\n{\n  \"tools\": {\n    \"okta\": {\n      \"name\": \"Okta\",\n      \"category\": \"identity\",\n      \"apis\": {\n        \"user_lifecycle\": {\n          \"name\": \"User Lifecycle Management\",\n          \"capabilities\": [\"create_user\", \"activate_user\", \"deactivate_user\"],\n          ...\n        },\n        \"app_assignments\": {\n          \"name\": \"Application Assignments\",\n          \"capabilities\": [\"assign_user_to_app\", \"revoke_app_access\"],\n          ...\n        }\n      },\n      \"license_tiers\": {\n        \"workforce_identity\": [\"user_lifecycle\", \"group_management\"],\n        \"enterprise\": [\"user_lifecycle\", \"group_management\", \"app_assignments\", \"audit_logs\"]\n      },\n      \"prerequisites\": \"API token with appropriate scopes\"\n    }\n  }\n}\n```\n\n### 2. `use-case-mappings.json`\n\nRoot structure:\n```json\n{\n  \"use_cases\": [\n    {\n      \"id\": \"string\",\n      \"name\": \"Display Name\",\n      \"category\": \"applications|security|hardware|...\",\n      \"description\": \"...\",\n      \"value_proposition\": \"...\",\n      \"required_tools\": [\"tool_key_1\"],\n      \"required_apis\": {\n        \"tool_key_1\": [\"api_key_1\", \"api_key_2\"]\n      },\n      \"ticket_categories\": [\"applications\", \"security\"],\n      \"automation_rate\": 0.65,\n      \"implementation_effort\": \"low|medium|high\",\n      \"time_to_value_days\": 7,\n      \"confidence\": 0.85,\n      \"prerequisites\": [\"Prerequisite 1\", \"Prerequisite 2\"],\n      \"workflow_steps\": [\"Step 1\", \"Step 2\"]\n    }\n  ]\n}\n```\n\n**Example:**\n```json\n{\n  \"use_cases\": [\n    {\n      \"id\": \"grant_software_access_okta\",\n      \"name\": \"Grant Software Access via Okta\",\n      \"category\": \"applications\",\n      \"required_tools\": [\"okta\"],\n      \"required_apis\": {\n        \"okta\": [\"user_lifecycle\", \"app_assignments\"]\n      },\n      \"ticket_categories\": [\"applications\"],\n      \"automation_rate\": 0.65,\n      \"implementation_effort\": \"medium\",\n      \"time_to_value_days\": 7,\n      \"confidence\": 0.85,\n      ...\n    }\n  ]\n}\n```\n\n### 3. `benchmarks.json`\n\nContains industry baseline metrics:\n```json\n{\n  \"ticket_categories\": {\n    \"{category}\": {\n      \"median_ttr_hours\": number,\n      \"automation_potential\": number\n    }\n  }\n}\n```\n\n## Report Components\n\n### 1. **Executive Summary**\n**Status:** ⚠️ Needs update  \n**Current:** Uses old opportunity engine (shows 0% deflection)  \n**Should use:** `roiResult.automatable_pct`, `total_hours_saved`, `fte_equivalent`\n\n### 2. **Stack Analysis**\n**Status:** ✅ Working  \n**Data source:** `feasibilityResults[]`  \n**Displays:**\n- Available APIs per tool (from `available_apis`)\n- Enabled use case names (looks up IDs in `enabled_use_cases`)\n- Opportunities: automatable tickets by use case\n- Prerequisites needed\n\n### 3. **Gap Analysis**\n**Status:** ✅ Working  \n**Data source:** `feasibilityResults[]`  \n**Displays:**\n- Missing APIs (from `missing_apis`)\n- License upgrade paths (from `license_gaps`)\n- Only renders if gaps exist\n\n### 4. **Opportunity Analysis**\n**Status:** ⚠️ Needs update  \n**Current:** Uses old opportunity engine  \n**Should use:** Top 5 from `matchedUseCases` sorted by fit_score\n\n### 5. **Best Fit Use Cases**\n**Status:** ⚠️ May need update  \n**Current:** Uses old opportunities  \n**Should use:** `matchedUseCases` filtered by priority tiers\n\n### 6. **ROI Breakdown**\n**Status:** ✅ Working  \n**Data source:** `roiResult`  \n**Displays:**\n- Total metrics: automatable_tickets, automatable_pct, total_hours_saved, fte_equivalent, annual_value_usd\n- Category breakdown: tickets, hours_saved, confidence per category\n- Overall confidence percentage\n\n### 7. **Get-Started Roadmap**\n**Status:** ⚠️ May need update  \n**Should prioritize:** Use cases by `priority` field (immediate → quick_win → future)\n\n### 8. **Expected Outcomes**\n**Current:** Uses old metrics  \n**Should use:** Data from `roiResult`\n\n## Data Flow Example\n\n### Input: User Assessment\n```javascript\n{\n  techStack: [\"okta\", \"servicenow\"],\n  licenseTiers: { okta: \"enterprise\", servicenow: \"standard\" },\n  monthlyTickets: 1000,\n  ticketDistribution: {\n    applications: 24,     // 240 tickets/month\n    security: 25,          // 250 tickets/month\n    hardware: 18,          // 180 tickets/month\n    distributionLists: 12, // 120 tickets/month\n    network: 11,           // 110 tickets/month\n    onboarding: 10         // 100 tickets/month\n  }\n}\n```\n\n### Step 1: FeasibilityEngine Analysis\n\n**Input to engine:**\n```javascript\n[\n  { name: \"Okta\", license_tier: \"enterprise\" },\n  { name: \"ServiceNow\", license_tier: \"standard\" }\n]\n```\n\n**Output:**\n```javascript\n[\n  {\n    tool: \"Okta\",\n    available_apis: [\n      \"User Lifecycle Management\",\n      \"Group Management\", \n      \"Application Assignments\",\n      \"System Logs\"\n    ],\n    available_capabilities: [\n      \"create_user\", \"activate_user\", \"deactivate_user\", \n      \"create_group\", \"add_user_to_group\",\n      \"assign_user_to_app\", \"revoke_app_access\",\n      \"audit_access_changes\"\n    ],\n    enabled_use_cases: [\n      \"grant_software_access_okta\",\n      \"offboard_user_okta\",\n      \"create_distribution_list\"\n    ],\n    missing_apis: [],\n    license_gaps: [],\n    prerequisites: [...],\n    confidence: 0.90\n  },\n  {\n    tool: \"ServiceNow\",\n    available_apis: [\"Table API\"],\n    available_capabilities: [\n      \"create_ticket\", \"update_ticket\", \"add_work_notes\"\n    ],\n    enabled_use_cases: [\"create_servicenow_ticket\"],\n    missing_apis: [],\n    license_gaps: [],\n    prerequisites: [...],\n    confidence: 0.90\n  }\n]\n```\n\n### Step 2: UseCaseMatcher Scoring\n\n**Input to engine:**\n```javascript\nactivities = [\n  { category: \"applications\", monthly_volume: 240, avg_ttr_hours: 0.25 },\n  { category: \"security\", monthly_volume: 250, avg_ttr_hours: 0.75 },\n  ...\n]\n\nenabledUseCaseIds = [\n  \"grant_software_access_okta\",\n  \"offboard_user_okta\",\n  \"create_distribution_list\",\n  \"create_servicenow_ticket\"\n]\n```\n\n**Processing \"grant_software_access_okta\":**\n```javascript\n// Matches activities: applications (240 tickets)\ntotalVolume = 240\navgTtr = 0.25 hours\n\n// Fit score calculation:\nstackSupport = 40        // Enabled by stack\nvolumeScore = 30         // Math.min(30, (240 / 50) * 30) = 30 (capped)\nttrScore = 2.5           // Math.min(20, (0.25 / 2) * 20) = 2.5\neffortScore = 6          // Medium effort = 6 points\nfitScore = 40 + 30 + 2.5 + 6 = 78.5 → 79 (rounded)\n\n// Impact estimation:\nautomation_rate = 0.65 (from use case definition)\ndeflection = 240 * 0.65 = 156 tickets\nhoursSaved = 156 * 0.25 = 39 hours\n\n// Priority determination:\n// Code: if (effort === 'low' && time_to_value_days <= 7) → \"immediate\"\n//       else if (time_to_value_days <= 21) → \"quick_win\"  \n//       else → \"future\"\neffort = \"medium\", time_to_value_days = 7\n→ priority = \"quick_win\"  // Not immediate because effort is medium, not low\n```\n\n**Output:**\n```javascript\n{\n  use_case_id: \"grant_software_access_okta\",\n  name: \"Grant Software Access via Okta\",\n  category: \"applications\",\n  fit_score: 79,\n  estimated_monthly_deflection: 156,\n  estimated_hours_saved: 39.0,\n  confidence: 0.85,\n  priority: \"quick_win\",    // Corrected: medium effort disqualifies from immediate\n  ...\n}\n```\n\n### Step 3: ROICalculator Aggregation\n\n**Input to engine:**\n```javascript\ntotalMonthlyTickets = 1000\nmatchedUseCases = [\n  { estimated_monthly_deflection: 156, estimated_hours_saved: 39, confidence: 0.85, category: \"applications\" },\n  { estimated_monthly_deflection: 142, estimated_hours_saved: 68, confidence: 0.76, category: \"security\" },\n  { estimated_monthly_deflection: 77, estimated_hours_saved: 32, confidence: 0.72, category: \"onboarding\" }\n]\n```\n\n**Calculations:**\n```javascript\nautomatableTickets = 156 + 142 + 77 = 375\nautomatablePct = (375 / 1000) * 100 = 37.5%\ntotalHoursSaved = 39 + 68 + 32 = 139\nfteEquivalent = (139 * 12) / 2000 = 0.8\nannualValue = 0.8 * 100000 = $83,400\n\n// Weighted confidence:\nweightedConf = (0.85*39 + 0.76*68 + 0.72*32) / 139 = 0.77 → 77%\n\n// Category breakdown:\napplications: { tickets: 156, hours_saved: 39, confidence: 0.85 }\nsecurity: { tickets: 142, hours_saved: 68, confidence: 0.76 }\nonboarding: { tickets: 77, hours_saved: 32, confidence: 0.72 }\n```\n\n**Output:**\n```javascript\n{\n  total_monthly_tickets: 1000,\n  automatable_tickets: 375,\n  automatable_pct: 37.5,\n  total_hours_saved: 139,\n  fte_equivalent: 0.8,\n  annual_value_usd: 83400,\n  confidence: 77,\n  breakdown_by_category: [...]\n}\n```\n\n### Step 4: Report Display\n\n**Stack Analysis** renders:\n```\n✓ Okta Enterprise provides:\n  - User Lifecycle Management\n  - Group Management  \n  - Application Assignments\n  - System Logs\n\n✓ Enabled AI Workers:\n  - Grant Software Access via Okta\n  - Offboard User\n  - Create Distribution List\n\n✓ Opportunities:\n  - 156 application tickets automatable with Grant Software Access (fit score: 79)\n```\n\n**ROI Breakdown** renders:\n```\nTotal Impact:\n  375 tickets/month (37.5%) automatable\n  139 hours saved per month\n  0.8 FTE equivalent\n  $83,400 annual value\n  77% confidence\n\nBy Category:\n  Security: 142 tickets, 68 hrs/month (76% confidence)\n  Applications: 156 tickets, 39 hrs/month (85% confidence)\n  Onboarding: 77 tickets, 32 hrs/month (72% confidence)\n```\n\n## Key Design Principles\n\n1. **No API Hallucination:** All APIs come from `tool-apis.json`. The system only shows capabilities that actually exist.\n\n2. **Grounded in User Data:** Calculations use the user's actual ticket volumes and distribution, not generic industry averages.\n\n3. **Confidence Scoring:** Every estimate includes a confidence score based on how well the use case matches the user's environment.\n\n4. **Actionable Recommendations:** Report shows specific API calls, tools, and prerequisites needed.\n\n5. **Transparent Calculations:** All fit scores and ROI calculations are derived from documented formulas.\n\n## Current State & Known Issues\n\n### Working ✅\n- FeasibilityEngine: Correctly analyzes API availability per license tier\n- UseCaseMatcher: Calculates fit scores and matches use cases to ticket categories\n- ROICalculator: Computes ROI with category breakdowns\n- Stack Analysis component: Displays API data accurately\n- Gap Analysis: Shows missing capabilities\n- ROI Breakdown: Shows category-level impact\n- Division-by-zero bug fixed in ROI calculator\n\n### Needs Update ⚠️\n- **Executive Summary:** Uses old opportunity engine (shows 0% deflection). Should use `roiResult` data.\n- **Opportunity Analysis:** Uses old opportunity engine. Should use top 5 `matchedUseCases` sorted by fit_score.\n- **Get-Started Roadmap:** Should prioritize AI Workers based on `priority` field from UseCaseMatcher.\n- **workerMatcher.ts:** Still references old assessment fields (`ticketVolume`, `topWorkflows`). Deprecated in favor of engines.\n\n### Data Files Status\n- `tool-apis.json`: ✅ Complete with 7 tools (Okta, ServiceNow, Slack, Google Workspace, Microsoft Entra, Jira, Zoom)\n- `use-case-mappings.json`: ✅ Contains use case definitions with automation_rate, confidence, prerequisites\n- `benchmarks.json`: ✅ Industry baseline metrics for ticket categories\n\n## Future Enhancements\n\n1. **Update Executive Summary:** Connect to `roiResult` for accurate metrics display\n\n2. **Migrate Report Components:** Update Opportunity Analysis and Roadmap to use new engines\n\n3. **LLM-Generated Narratives:** Use LLM to create personalized analysis based on feasibilityResults, matchedUseCases, roiResult, and additionalContext\n\n4. **Dynamic Confidence Adjustment:** Factor in additional context (e.g., \"GDPR required\") to adjust confidence scores\n\n5. **Remove Legacy Code:** Deprecate old opportunity engine and workerMatcher.ts once all components migrated\n","size_bytes":19674},"src/lib/engines/roi-calculator.ts":{"content":"import benchmarks from '@/data/benchmarks.json';\nimport { MatchedUseCase } from './use-case-matcher';\n\nexport interface ROIResult {\n  total_monthly_tickets: number;\n  automatable_tickets: number;\n  automatable_pct: number;\n  total_hours_saved: number;          // raw operational hours (pre-capture)\n  expected_hours_saved: number;       // confidence-weighted EV\n  p70_hours_saved: number;            // conservative band\n  p90_hours_saved: number;            // more conservative band\n\n  capacity_fte: number;               // hours/2000 (your legacy)\n  budget_fte: number;                 // captured hours / effective_hours_per_FTE\n\n  fte_equivalent: number;             // kept for backward-compat (alias of capacity_fte)\n  annual_value_usd: number;           // budget value using budget_fte\n  confidence: number;                 // 0-100\n\n  // NEW: Separate full automation vs assisted\n  full_automation_tickets: number;\n  full_automation_hours: number;\n  assisted_tickets: number;\n  assisted_hours: number;\n\n  breakdown_by_category: {\n    category: string;\n    tickets: number;\n    hours_saved: number;\n    confidence: number;\n  }[];\n}\n\nexport class ROICalculator {\n  private readonly HOURS_PER_FTE_CAPACITY = 2000;   // legacy denominator\n  private readonly DEFAULT_FULLY_LOADED_COST = 100000;\n  private readonly DEFAULT_CAPTURE_RATE = 0.5;      // 50% realizable/budget capture\n  private readonly DEFAULT_EFFECTIVE_HOURS_PER_FTE = 1800;\n\n  private readonly MAX_DEFLECTION_RATE = 0.35; // 35% maximum based on real customer data\n\n  /**\n   * Calculates comprehensive ROI from matched use cases\n   */\n  calculateROI(\n    totalMonthlyTickets: number,\n    matchedUseCases: MatchedUseCase[],\n    fullyLoadedCost: number = this.DEFAULT_FULLY_LOADED_COST,\n    captureRate: number = this.DEFAULT_CAPTURE_RATE,\n    effectiveHoursPerFTE: number = this.DEFAULT_EFFECTIVE_HOURS_PER_FTE\n  ): ROIResult {\n    // Separate full automation vs assisted use cases\n    const fullAutomationCases = matchedUseCases.filter(uc => uc.automation_type === 'full_automation');\n    const assistedCases = matchedUseCases.filter(uc => uc.automation_type === 'assisted');\n\n    // Raw totals (no rounding yet)\n    const rawAutomatableTickets = matchedUseCases.reduce(\n      (sum, uc) => sum + uc.estimated_monthly_deflection,\n      0\n    );\n\n    // CRITICAL: Apply maximum deflection cap (35%) based on real customer outcomes\n    const maxDeflectableTickets = totalMonthlyTickets * this.MAX_DEFLECTION_RATE;\n\n    const rawTotalHoursSaved = matchedUseCases.reduce(\n      (sum, uc) => sum + uc.estimated_hours_saved,\n      0\n    );\n\n    // Calculate full automation vs assisted separately\n    const fullAutomationTickets = fullAutomationCases.reduce(\n      (sum, uc) => sum + uc.estimated_monthly_deflection,\n      0\n    );\n\n    const fullAutomationHours = fullAutomationCases.reduce(\n      (sum, uc) => sum + uc.estimated_hours_saved,\n      0\n    );\n\n    const assistedTickets = assistedCases.reduce(\n      (sum, uc) => sum + uc.estimated_monthly_deflection,\n      0\n    );\n\n    const assistedHours = assistedCases.reduce(\n      (sum, uc) => sum + uc.estimated_hours_saved,\n      0\n    );\n\n    // Safety clamp: never exceed total monthly tickets OR maximum deflection rate\n    const automatableTickets = Math.min(rawAutomatableTickets, totalMonthlyTickets, maxDeflectableTickets);\n\n    // Calculate proration factor if we hit the cap\n    const prorationFactor = rawAutomatableTickets > 0 && automatableTickets < rawAutomatableTickets\n      ? (automatableTickets / rawAutomatableTickets)\n      : 1.0;\n\n    // Prorate hours if clamped\n    const totalHoursSaved = rawTotalHoursSaved * prorationFactor;\n\n    // Also prorate full automation vs assisted breakdowns\n    const proratedFullAutomationTickets = fullAutomationTickets * prorationFactor;\n    const proratedFullAutomationHours = fullAutomationHours * prorationFactor;\n    const proratedAssistedTickets = assistedTickets * prorationFactor;\n    const proratedAssistedHours = assistedHours * prorationFactor;\n\n    const automatablePct =\n      totalMonthlyTickets > 0 ? (automatableTickets / totalMonthlyTickets) * 100 : 0;\n\n    // Weighted confidence on HOURS, not counts\n    // CRITICAL: Use rawTotalHoursSaved as denominator to prevent confidence > 1.0 when clamped\n    const rawWeightedConfidence =\n      matchedUseCases.length > 0 && rawTotalHoursSaved > 0\n        ? matchedUseCases.reduce((sum, uc) => sum + uc.confidence * uc.estimated_hours_saved, 0) /\n          rawTotalHoursSaved\n        : 0.7;\n    \n    // Clamp to [0, 1] for safety\n    const weightedConfidence = Math.min(Math.max(rawWeightedConfidence, 0), 1);\n\n    // Confidence bands (simple)\n    const expectedHours = totalHoursSaved * weightedConfidence;               // EV\n    const p70Hours = totalHoursSaved * Math.max(weightedConfidence - 0.10, 0.4);\n    const p90Hours = totalHoursSaved * Math.max(weightedConfidence - 0.20, 0.3);\n\n    // Capacity vs Budget FTE\n    const capacityFTE = (totalHoursSaved * 12) / this.HOURS_PER_FTE_CAPACITY;\n    const capturedAnnualHours = expectedHours * 12 * Math.min(Math.max(captureRate, 0), 1);\n    const budgetFTE = capturedAnnualHours / Math.max(effectiveHoursPerFTE, 1);\n\n    const annualValueUsd = budgetFTE * fullyLoadedCost;\n\n    // Category breakdown with hours-weighted confidence (prorated if clamped)\n    const categoryMap = new Map<string, { tickets: number; hours: number; confNum: number }>();\n    for (const uc of matchedUseCases) {\n      const slot = categoryMap.get(uc.category) || { tickets: 0, hours: 0, confNum: 0 };\n      // Apply proration factor to category breakdown to maintain consistency\n      slot.tickets += uc.estimated_monthly_deflection * prorationFactor;\n      slot.hours += uc.estimated_hours_saved * prorationFactor;\n      slot.confNum += uc.confidence * uc.estimated_hours_saved * prorationFactor;\n      categoryMap.set(uc.category, slot);\n    }\n\n    const breakdownByCategory = Array.from(categoryMap.entries()).map(([category, data]) => ({\n      category,\n      tickets: Math.round(data.tickets),\n      hours_saved: Math.round(data.hours * 10) / 10,\n      confidence: data.hours > 0 ? data.confNum / data.hours : 0.7\n    })).sort((a, b) => b.hours_saved - a.hours_saved);\n\n    return {\n      total_monthly_tickets: totalMonthlyTickets,\n      automatable_tickets: Math.round(automatableTickets),\n      automatable_pct: Math.round(automatablePct * 10) / 10,\n\n      total_hours_saved: Math.round(totalHoursSaved),\n      expected_hours_saved: Math.round(expectedHours),\n      p70_hours_saved: Math.round(p70Hours),\n      p90_hours_saved: Math.round(p90Hours),\n\n      capacity_fte: Math.round(capacityFTE * 10) / 10,\n      budget_fte: Math.round(budgetFTE * 10) / 10,\n\n      // Back-compat alias\n      fte_equivalent: Math.round(capacityFTE * 10) / 10,\n\n      annual_value_usd: Math.round(annualValueUsd),\n      confidence: Math.round(weightedConfidence * 100),\n\n      // NEW: Full automation vs assisted breakdown (prorated if clamped)\n      full_automation_tickets: Math.round(proratedFullAutomationTickets),\n      full_automation_hours: Math.round(proratedFullAutomationHours),\n      assisted_tickets: Math.round(proratedAssistedTickets),\n      assisted_hours: Math.round(proratedAssistedHours),\n\n      breakdown_by_category: breakdownByCategory\n    };\n  }\n\n  /**\n   * Estimates impact for a specific category based on benchmarks\n   */\n  estimateCategoryImpact(\n    category: string,\n    monthlyVolume: number,\n    customTtr?: number\n  ) {\n    const categoryData = (benchmarks as any).ticket_categories[category];\n    if (!categoryData) {\n      return null;\n    }\n\n    const ttr = customTtr || categoryData.median_ttr_hours;\n    const automationPotential = categoryData.automation_potential;\n    \n    const deflectableTickets = monthlyVolume * automationPotential;\n    const hoursSaved = deflectableTickets * ttr;\n\n    return {\n      category,\n      monthly_volume: monthlyVolume,\n      deflectable_tickets: Math.round(deflectableTickets),\n      hours_saved: Math.round(hoursSaved * 10) / 10,\n      automation_potential: automationPotential,\n      confidence: 0.70\n    };\n  }\n}\n","size_bytes":8147},"src/app/api/generate-context-insight/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\ninterface InsightRequest {\n  userContext?: string;\n  automatableTickets: number;\n  totalHoursSaved: number;\n  fteEquivalent: number;\n  readinessScore: number;\n  topCategories: string[];\n  topUseCases: {\n    name: string;\n    category: string;\n    estimatedHoursSaved: number;\n  }[];\n  techStack: string[];\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const data: InsightRequest = await req.json();\n\n    console.log(\n      \"Generating insight with context:\",\n      data.userContext?.substring(0, 100) || \"No additional context\",\n    );\n\n    const systemPrompt = `Role:\nYou are a strategic operations consultant delivering executive-level insights to IT leaders evaluating AI Worker readiness.\n\nYour Task:\nGenerate exactly 3 concise, high-impact paragraphs written in an authoritative, executive tone. \nSpeak as if presenting to a CIO in a strategy session — confident, directive, and outcome-driven. \nYour goal is to help them act immediately, not just understand the data.\n\nSTRUCTURE & FORMATTING:\n- Use **bold text** for key terms, metrics, and important phrases (e.g., **45–65%**, **AI Workers**, **user provisioning**)\n- Use bullet points (with - prefix) for quantifiable outcomes or lists\n- Keep paragraphs short, clear, and scannable\n- Write in active voice, not passive\n- No marketing or promotional language\n- Each paragraph must be separated by a line break\n\nMANDATORY OPENING (Paragraph 1):\nYou MUST begin with this exact line:\n\"Based on your inputs, your environment has the core systems and data maturity needed to operationalize AI Workers across IT, HR, and Procurement.\"\n\nImmediately after that line, include the following:\n\"With orchestration and governance layers in place, you could:\"\nThen list three bullets using this exact structure:\n- **Reduce internal service resolution time by 45–65%**\n- **Decrease operational overhead by 30–50%**\n- **Demonstrate measurable AI ROI in under 90 days**\n\nAfter the bullets, end Paragraph 1 with a short executive-level takeaway line, such as:\n\"This establishes enterprise-level value and positions your team to deliver visible impact within the next quarter.\"\n\nParagraph 2 (Tech Stack & Use Cases):\n- Reference their SPECIFIC tech stack tools by name (e.g., Okta, ServiceNow, Salesforce)\n- Highlight their HIGHEST-impact automation opportunities using the provided data\n- Describe specific workflows (e.g., **user provisioning in Okta**, **ticket routing in ServiceNow**)\n- Explain how **AI Workers** integrate seamlessly with their current systems to produce measurable outcomes\n- If data fields are missing, note that additional context would refine accuracy (do not fabricate)\n\nParagraph 3 (Strategic Guidance & Next Steps):\n- Frame the insight as strategic consulting guidance, not generic marketing\n- Be directive — specify what the IT leader should prioritize next\n- Emphasize governance, change management, and cross-department enablement\n- Position **AI Workers** as capacity enablers that free teams to focus on innovation and strategic work\n- Close with one forward-looking sentence on scalability or operational maturity, e.g.:\n\"These steps create a foundation for scaling secure, policy-aware AI automation across the enterprise.\"\n\nAi.Work Tone of Voice:\nCore Principles:\n- **Confident, Not Overblown** – Speak with authority and precision. Use metrics and operational depth, not hype.\n- **Operationally Fluent** – Use IT/HR/Procurement language naturally, without jargon overload.\n- **Empowering, Not Replacing** – Position AI Workers as enablers, not threats.\n\nVoice Attributes:\n- Clear → Plain, functional language over buzzwords\n- Grounded → Reference real workflows and enterprise systems\n- Direct → Short, sharp sentences. No fluff.\n- Credible → Lead with data and business outcomes\n- Future-facing → Optimistic about AI's role, without sci-fi promises\n\nWriting Style:\n- Use active voice (\"AI Workers handle...\" not \"can be handled by...\")\n- Avoid modifiers like \"extremely,\" \"truly,\" \"incredibly,\" \"revolutionary\"\n- Always say \"AI Workers\" (never \"chatbots,\" \"assistants,\" or \"tools\")\n- Lead with business outcomes, not technology\n- Avoid generic corporate language, vague automation claims, or job replacement framing\n`;\n\n    const userPrompt = `Assessment Data:\n${\n  data.userContext\n    ? `\nUser's Additional Context: \"${data.userContext}\"\n`\n    : \"\"\n}\nReadiness Score: ${data.readinessScore.toFixed(0)}%\n\nKey Operational Metrics:\n- Automatable ticket volume: ${data.automatableTickets} tickets/month\n- Potential hours saved: ${data.totalHoursSaved} hours/month\n- FTE impact: ${data.fteEquivalent.toFixed(1)} FTE capacity freed\n- High-volume categories: ${data.topCategories.join(\", \")}\n\nTop Matched Use Cases (Highest Impact):\n${data.topUseCases.map((uc) => `- ${uc.name} (${uc.category}): ${uc.estimatedHoursSaved.toFixed(0)} hrs/month`).join(\"\\n\")}\n\nCurrent Tech Stack: ${data.techStack.join(\", \")}\n\nGenerate the executive summary following the structure above.\nFocus on actionable strategy and quantifiable business outcomes.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt },\n      ],\n      max_tokens: 700,\n      temperature: 0.5,\n    });\n\n    const insight = response.choices[0].message.content;\n\n    console.log(\"Generated insight:\", insight);\n\n    return NextResponse.json({ insight });\n  } catch (error) {\n    console.error(\"Error generating insight:\", error);\n    return NextResponse.json(\n      { error: \"Failed to generate insight\" },\n      { status: 500 },\n    );\n  }\n}\n","size_bytes":5810},"src/components/ui/ResponsiveTable.tsx":{"content":"import React from 'react';\n\ninterface Column {\n  key: string;\n  label: string;\n  render?: (value: any, row: any) => React.ReactNode;\n  className?: string;\n}\n\ninterface ResponsiveTableProps {\n  columns: Column[];\n  data: any[];\n  mobileStackBreakpoint?: 'sm' | 'md' | 'lg';\n}\n\nexport default function ResponsiveTable({ \n  columns, \n  data,\n  mobileStackBreakpoint = 'md'\n}: ResponsiveTableProps) {\n  return (\n    <>\n      {/* Desktop Table */}\n      <div className={`hidden ${mobileStackBreakpoint}:block overflow-x-auto`}>\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"border-b border-bg-card-alt/20\">\n              {columns.map((column) => (\n                <th\n                  key={column.key}\n                  className={`text-left py-4 px-4 text-sm font-semibold text-text-primary ${column.className || ''}`}\n                >\n                  {column.label}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((row, rowIndex) => (\n              <tr\n                key={rowIndex}\n                className=\"border-b border-bg-card-alt/10 hover:bg-bg-card-alt/5 transition-colors duration-200\"\n              >\n                {columns.map((column) => (\n                  <td\n                    key={column.key}\n                    className={`py-4 px-4 text-sm text-text-secondary ${column.className || ''}`}\n                  >\n                    {column.render ? column.render(row[column.key], row) : row[column.key]}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Mobile Stacked Cards */}\n      <div className={`${mobileStackBreakpoint}:hidden space-y-4`}>\n        {data.map((row, rowIndex) => (\n          <div\n            key={rowIndex}\n            className=\"bg-bg-card-alt/5 border border-bg-card-alt/10 rounded-lg p-4\"\n          >\n            {columns.map((column) => (\n              <div key={column.key} className=\"mb-3 last:mb-0\">\n                <div className=\"text-xs font-semibold text-text-tertiary mb-1\">\n                  {column.label}\n                </div>\n                <div className=\"text-sm text-text-secondary\">\n                  {column.render ? column.render(row[column.key], row) : row[column.key]}\n                </div>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n","size_bytes":2464},"src/lib/utils/formatNumber.ts":{"content":"/**\n * Format large numbers with appropriate suffixes\n * Examples:\n * - 2909000 -> $2.9M\n * - 450000 -> $450K\n * - 1234 -> 1,234\n */\nexport function formatLargeNumber(value: number, prefix: string = '', includeDecimals: boolean = true): string {\n  const absValue = Math.abs(value);\n  \n  if (absValue >= 1000000) {\n    const millions = value / 1000000;\n    const formatted = includeDecimals ? millions.toFixed(1) : Math.round(millions).toString();\n    return `${prefix}${formatted}M`;\n  }\n  \n  if (absValue >= 1000) {\n    const thousands = value / 1000;\n    const formatted = includeDecimals ? thousands.toFixed(1) : Math.round(thousands).toString();\n    return `${prefix}${formatted}K`;\n  }\n  \n  return `${prefix}${Math.round(value).toLocaleString()}`;\n}\n","size_bytes":755},"src/components/assessment/report/v5/ExecutiveSummary.tsx":{"content":"'use client';\n\nimport Card from '@/components/ui/Card';\nimport { ROIResult } from '@/types/types-v3';\nimport { formatLargeNumber } from '@/lib/utils/formatNumber';\nimport ROICalculationModal from '../ROICalculationModal';\n\ninterface ExecutiveSummaryProps {\n  roiResult: ROIResult;\n  totalMonthlyTickets: number;\n}\n\nexport default function ExecutiveSummary({ \n  roiResult, \n  totalMonthlyTickets\n}: ExecutiveSummaryProps) {\n  const getReadinessRating = (automatablePct: number) => {\n    if (automatablePct >= 40) return { label: 'High Readiness', color: 'text-accent-green', bgColor: 'bg-accent-green/20' };\n    if (automatablePct >= 25) return { label: 'Moderate Readiness', color: 'text-accent-blue', bgColor: 'bg-accent-blue/20' };\n    if (automatablePct >= 15) return { label: 'Early Opportunity', color: 'text-accent-orange', bgColor: 'bg-accent-orange/20' };\n    return { label: 'Foundation Building', color: 'text-text-secondary', bgColor: 'bg-text-secondary/20' };\n  };\n\n  const rating = getReadinessRating(roiResult.automatable_pct);\n\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      {/* Main Readiness Card */}\n      <Card className=\"mb-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"mb-4\">\n            <span className={`px-3 py-1 rounded-full ${rating.bgColor} ${rating.color} text-sm font-medium`}>\n              {rating.label}\n            </span>\n          </div>\n          <div className={`text-6xl font-bold ${rating.color} mb-2`}>\n            {roiResult.automatable_pct.toFixed(1)}%\n          </div>\n          <div className=\"text-xl text-text-secondary\">\n            of tickets can be automated immediately\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-4 gap-6 pt-6 border-t border-brand-secondary/10\">\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-accent-green\">\n              {roiResult.automatable_tickets.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Tickets Automatable/Month\n            </div>\n            <div className=\"text-xs text-text-tertiary/60 mt-1 space-y-0.5\">\n              <div>{roiResult.full_automation_tickets?.toLocaleString() || 0} Full</div>\n              <div>{roiResult.assisted_tickets?.toLocaleString() || 0} Assisted</div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-accent-blue\">\n              {Math.round(roiResult.total_hours_saved).toLocaleString()} hrs\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Time Saved/Month\n            </div>\n            <div className=\"text-xs text-text-tertiary/60 mt-1 space-y-0.5\">\n              <div>{Math.round(roiResult.full_automation_hours || 0)} Full</div>\n              <div>{Math.round(roiResult.assisted_hours || 0)} Assisted</div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-text-primary\">\n              {roiResult.budget_fte.toFixed(1)} FTEs\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1 flex items-center justify-center gap-1\">\n              Budget FTE (Conservative)\n              <ROICalculationModal />\n            </div>\n            <div className=\"text-xs text-text-tertiary/60 mt-1\">\n              Capacity: {roiResult.capacity_fte.toFixed(1)} FTEs\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-accent-orange\">\n              {formatLargeNumber(roiResult.annual_value_usd, '$')}\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Annual Value\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Confidence Bands */}\n      <Card>\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-xl font-semibold\">Confidence Bands</h3>\n            <ROICalculationModal \n              trigger={\n                <button className=\"text-sm text-accent-green hover:text-accent-green/80 transition-colors underline\">\n                  How is this calculated?\n                </button>\n              }\n            />\n          </div>\n          <p className=\"text-sm text-text-tertiary\">\n            Monthly time savings across different confidence scenarios based on implementation quality and adoption.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <div className=\"text-center p-4 rounded-lg bg-accent-green/10 border border-accent-green/30\">\n            <div className=\"text-sm font-medium text-accent-green mb-2\">Expected Scenario</div>\n            <div className=\"text-3xl font-bold text-accent-green\">\n              {Math.round(roiResult.expected_hours_saved).toLocaleString()} hrs\n            </div>\n            <div className=\"text-xs text-text-tertiary mt-2\">\n              Confidence-weighted average\n            </div>\n          </div>\n\n          <div className=\"text-center p-4 rounded-lg bg-accent-blue/10 border border-accent-blue/30\">\n            <div className=\"text-sm font-medium text-accent-blue mb-2\">Conservative (P70)</div>\n            <div className=\"text-3xl font-bold text-accent-blue\">\n              {Math.round(roiResult.p70_hours_saved).toLocaleString()} hrs\n            </div>\n            <div className=\"text-xs text-text-tertiary mt-2\">\n              70% confidence floor\n            </div>\n          </div>\n\n          <div className=\"text-center p-4 rounded-lg bg-accent-orange/10 border border-accent-orange/30\">\n            <div className=\"text-sm font-medium text-accent-orange mb-2\">Very Conservative (P90)</div>\n            <div className=\"text-3xl font-bold text-accent-orange\">\n              {Math.round(roiResult.p90_hours_saved).toLocaleString()} hrs\n            </div>\n            <div className=\"text-xs text-text-tertiary mt-2\">\n              90% confidence floor\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-6 p-4 bg-bg-primary/50 rounded-lg\">\n          <p className=\"text-sm text-text-secondary\">\n            <span className=\"font-semibold\">Budget FTE Calculation:</span> Uses the Expected Scenario with a 50% capture rate and 1,800 effective hours per FTE to provide a realistic, finance-friendly forecast. This accounts for ramp-up time, edge cases, and real-world adoption challenges.\n          </p>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6653},"src/components/assessment/report/v5/ExpectedOutcomes.tsx":{"content":"import Card from '@/components/ui/Card';\nimport { ROIResult } from '@/types/types-v3';\nimport { formatLargeNumber } from '@/lib/utils/formatNumber';\n\ninterface ExpectedOutcomesProps {\n  roiResult: ROIResult;\n  totalMonthlyTickets: number;\n}\n\nexport default function ExpectedOutcomes({ \n  roiResult, \n  totalMonthlyTickets \n}: ExpectedOutcomesProps) {\n  \n  // Calculate additional metrics\n  const ticketDeflectionRate = totalMonthlyTickets > 0 \n    ? (roiResult.automatable_tickets / totalMonthlyTickets) * 100 \n    : 0;\n  const avgHoursPerTicket = roiResult.automatable_tickets > 0 \n    ? roiResult.total_hours_saved / roiResult.automatable_tickets \n    : 0;\n  const monthlyValue = roiResult.annual_value_usd / 12;\n\n  // Learning curve projection (conservative 15% improvement over 6 months)\n  const month6Multiplier = 1.15;\n  const projectedMonth6Tickets = Math.round(roiResult.automatable_tickets * month6Multiplier);\n  \n  // Cap at total monthly tickets (can't automate more than 100%)\n  const month6Tickets = Math.min(projectedMonth6Tickets, totalMonthlyTickets);\n  \n  // Calculate actual improvement ratio achieved (may be less than 1.15 if capped)\n  // Guard against division by zero\n  const actualMultiplier = roiResult.automatable_tickets > 0 \n    ? month6Tickets / roiResult.automatable_tickets \n    : 0;\n  \n  // Apply proportional improvements to hours, FTE, and value\n  const month6Hours = roiResult.total_hours_saved * actualMultiplier;\n  const month6FTE = roiResult.fte_equivalent * actualMultiplier;\n  const month6Value = roiResult.annual_value_usd * actualMultiplier;\n\n  const getIconSvg = (iconType: string) => {\n    const icons: Record<string, JSX.Element> = {\n      target: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      clock: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      currency: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      lightning: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n        </svg>\n      ),\n      graduation: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 14l9-5-9-5-9 5 9 5z\" />\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z\" />\n        </svg>\n      ),\n      smile: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      chart: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n      ),\n      lock: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n        </svg>\n      ),\n      trending: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n        </svg>\n      ),\n      refresh: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n        </svg>\n      )\n    };\n    return icons[iconType] || null;\n  };\n\n  const outcomes = [\n    {\n      icon: 'target',\n      title: 'Ticket Deflection',\n      baseline: {\n        label: 'Month 1',\n        value: `${roiResult.automatable_tickets.toLocaleString()}`,\n        subtitle: `${ticketDeflectionRate.toFixed(1)}% of total volume`\n      },\n      improved: {\n        label: 'Month 6',\n        value: `${month6Tickets.toLocaleString()}`,\n        subtitle: totalMonthlyTickets > 0 \n          ? `${(month6Tickets / totalMonthlyTickets * 100).toFixed(1)}% of total volume`\n          : '0.0% of total volume'\n      },\n      description: 'Tickets handled autonomously without human intervention'\n    },\n    {\n      icon: 'clock',\n      title: 'Time Savings',\n      baseline: {\n        label: 'Month 1',\n        value: `${Math.round(roiResult.total_hours_saved).toLocaleString()} hrs`,\n        subtitle: `${roiResult.fte_equivalent.toFixed(1)} FTE capacity`\n      },\n      improved: {\n        label: 'Month 6',\n        value: `${Math.round(month6Hours).toLocaleString()} hrs`,\n        subtitle: `${month6FTE.toFixed(1)} FTE capacity`\n      },\n      description: 'IT team hours redirected from routine work to strategic initiatives'\n    },\n    {\n      icon: 'currency',\n      title: 'Cost Savings',\n      baseline: {\n        label: 'Monthly',\n        value: formatLargeNumber(monthlyValue, '$'),\n        subtitle: 'Labor cost savings'\n      },\n      improved: {\n        label: 'Annual',\n        value: formatLargeNumber(month6Value, '$'),\n        subtitle: 'With learning curve'\n      },\n      description: 'Fully-loaded labor cost at $100K per FTE'\n    },\n    {\n      icon: 'lightning',\n      title: 'Resolution Speed',\n      baseline: {\n        label: 'Current Avg',\n        value: `${Math.round(avgHoursPerTicket * 60).toLocaleString()} min`,\n        subtitle: 'Manual processing'\n      },\n      improved: {\n        label: 'With AI Workers',\n        value: '< 5 min',\n        subtitle: '70-90% faster'\n      },\n      description: 'Average time from ticket creation to resolution'\n    }\n  ];\n\n  const qualitativeOutcomes = [\n    {\n      icon: 'graduation',\n      title: 'Continuous Learning',\n      description: 'AI Workers improve accuracy over time by learning from your unique policies, edge cases, and ticket patterns'\n    },\n    {\n      icon: 'smile',\n      title: 'Employee Satisfaction',\n      description: 'End users get faster responses, IT team focuses on meaningful work instead of repetitive tickets'\n    },\n    {\n      icon: 'chart',\n      title: 'Operational Insights',\n      description: 'Real-time dashboards showing automation rates, ticket patterns, and opportunities for optimization'\n    },\n    {\n      icon: 'lock',\n      title: 'Compliance & Audit',\n      description: 'Complete audit trails for all automated actions, ensuring compliance and security governance'\n    },\n    {\n      icon: 'trending',\n      title: 'Scalable Operations',\n      description: 'Handle ticket volume growth without proportional headcount increases'\n    },\n    {\n      icon: 'refresh',\n      title: 'Reduced Context Switching',\n      description: 'IT team interrupted less frequently, can focus on project work and strategic initiatives'\n    }\n  ];\n\n  return (\n    <div className=\"max-w-6xl mx-auto mb-16\">\n      <div className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          What to Expect\n        </h2>\n        <p className=\"text-text-secondary max-w-3xl\">\n          Projected results from deploying AI Workers with your {totalMonthlyTickets.toLocaleString()} monthly tickets\n        </p>\n      </div>\n\n      {/* Quantitative Outcomes */}\n      <div className=\"mb-12\">\n        <h3 className=\"text-xl font-bold text-text-primary mb-6\">\n          Measurable Impact\n        </h3>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {outcomes.map((outcome, index) => (\n            <Card key={index}>\n              <div className=\"flex items-start gap-4 mb-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center text-accent-blue\">\n                  {getIconSvg(outcome.icon)}\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"text-lg font-bold text-text-primary mb-1\">\n                    {outcome.title}\n                  </h4>\n                  <p className=\"text-sm text-text-secondary\">\n                    {outcome.description}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 p-4 bg-bg-primary rounded-lg\">\n                <div>\n                  <div className=\"text-xs text-text-tertiary mb-1\">\n                    {outcome.baseline.label}\n                  </div>\n                  <div className=\"text-2xl font-bold text-text-primary mb-1\">\n                    {outcome.baseline.value}\n                  </div>\n                  <div className=\"text-xs text-text-tertiary\">\n                    {outcome.baseline.subtitle}\n                  </div>\n                </div>\n                <div className=\"border-l border-brand-secondary/20 pl-4\">\n                  <div className=\"text-xs text-accent-green mb-1\">\n                    {outcome.improved.label}\n                  </div>\n                  <div className=\"text-2xl font-bold text-accent-green mb-1\">\n                    {outcome.improved.value}\n                  </div>\n                  <div className=\"text-xs text-text-tertiary\">\n                    {outcome.improved.subtitle}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Qualitative Outcomes */}\n      <div className=\"mb-12\">\n        <h3 className=\"text-xl font-bold text-text-primary mb-6\">\n          Strategic Benefits\n        </h3>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {qualitativeOutcomes.map((outcome, index) => (\n            <Card key={index} className=\"text-center\">\n              <div className=\"flex justify-center mb-3\">\n                <div className=\"w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center text-accent-blue\">\n                  {getIconSvg(outcome.icon)}\n                </div>\n              </div>\n              <h4 className=\"text-base font-bold text-text-primary mb-2\">\n                {outcome.title}\n              </h4>\n              <p className=\"text-sm text-text-secondary\">\n                {outcome.description}\n              </p>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Learning Curve Explanation */}\n      <Card className=\"bg-accent-blue/5 border-accent-blue/20\">\n        <div className=\"flex items-start gap-4\">\n          <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-accent-blue\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n            </svg>\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"text-lg font-bold text-text-primary mb-2\">\n              Why Performance Improves Over Time\n            </h4>\n            <p className=\"text-sm text-text-secondary mb-3\">\n              Unlike traditional automation with static rules, AI Workers continuously learn from every ticket they process:\n            </p>\n            <ul className=\"space-y-2 text-sm text-text-secondary\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Policy learning:</strong> Understand nuances in approval patterns and access policies</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Edge case handling:</strong> Build knowledge of exceptions and special scenarios</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Ticket pattern recognition:</strong> Better categorization and routing over time</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Context awareness:</strong> Learn relationships between users, teams, and resources</span>\n              </li>\n            </ul>\n            <p className=\"text-xs text-text-tertiary mt-3\">\n              Conservative estimate: 15% improvement by Month 6. Top performers see 30-40% improvement by Month 12.\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      {/* Confidence Disclaimer */}\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-sm text-text-tertiary\">\n          Outcomes based on {roiResult.confidence}% confidence score using your actual tech stack and ticket distribution.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14051},"src/components/assessment/report/v5/UseCaseCards.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport Card from '@/components/ui/Card';\nimport StatusPill from '@/components/ui/StatusPill';\nimport ConnectedAppLogos from '@/components/ui/ConnectedAppLogos';\nimport { MatchedUseCase } from '@/types/types-v3';\n\ninterface UseCaseCardsProps {\n  useCases: MatchedUseCase[];\n  showRank?: boolean;\n}\n\nexport default function UseCaseCards({ useCases, showRank = true }: UseCaseCardsProps) {\n  const [expandedWorkflows, setExpandedWorkflows] = useState<Record<string, boolean>>({});\n\n  // Convert tool names from underscore format to proper names\n  const convertToolName = (tool: string): string => {\n    const toolMap: Record<string, string> = {\n      'okta': 'Okta',\n      'servicenow': 'ServiceNow',\n      'slack': 'Slack',\n      'jira': 'Jira',\n      'jira_service_management': 'Jira Service Management',\n      'zendesk': 'Zendesk',\n      'microsoft_365': 'Microsoft 365',\n      'microsoft_entra': 'Microsoft Entra',\n      'microsoft_teams': 'Microsoft Teams',\n      'google_workspace': 'Google Workspace',\n      'google_drive': 'Google Drive',\n      'google_docs': 'Google Docs',\n      'google_sheets': 'Google Sheets',\n      'google_calendar': 'Google Calendar',\n      'gmail': 'Gmail',\n      'azure_ad': 'Azure AD',\n      'salesforce': 'Salesforce',\n      'github': 'GitHub',\n      'gitlab': 'GitLab',\n      'confluence': 'Confluence',\n      'asana': 'Asana',\n      'monday_com': 'Monday.com',\n      'zoom': 'Zoom',\n      'teams': 'Teams',\n      'workday': 'Workday',\n      'bamboohr': 'BambooHR',\n      'duo_security': 'Duo Security',\n      'cyberark': 'CyberArk',\n      'jumpcloud': 'JumpCloud',\n      'freshservice': 'Freshservice',\n      'ivanti': 'Ivanti',\n      'sap_successfactors': 'SAP SuccessFactors',\n      'hibob': 'HiBob',\n      'docusign': 'DocuSign',\n      'linear': 'Linear',\n      'sharepoint': 'SharePoint'\n    };\n    \n    return toolMap[tool.toLowerCase()] || tool.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  const getFitScoreColor = (score: number) => {\n    if (score >= 80) return 'text-accent-green';\n    if (score >= 60) return 'text-accent-blue';\n    if (score >= 40) return 'text-accent-orange';\n    return 'text-text-tertiary';\n  };\n\n  const getFitScoreLabel = (score: number) => {\n    if (score >= 80) return 'Excellent Fit';\n    if (score >= 60) return 'Good Fit';\n    if (score >= 40) return 'Moderate Fit';\n    return 'Basic Fit';\n  };\n\n  const getPriorityStatus = (priority: string): 'success' | 'active' | 'warning' => {\n    if (priority === 'immediate') return 'success';\n    if (priority === 'quick_win') return 'active';\n    return 'warning';\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    if (priority === 'immediate') return 'Deploy Week 1';\n    if (priority === 'quick_win') return 'Deploy Month 1-2';\n    return 'Deploy Month 3+';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {useCases.map((useCase, index) => (\n        <Card key={useCase.use_case_id} hover>\n          {/* Rank Number */}\n          {showRank && (\n            <div className=\"text-sm font-medium mb-3\" style={{ color: '#8a8784' }}>\n              {String(index + 1).padStart(2, '0')}\n            </div>\n          )}\n\n          {/* Header with Priority */}\n          <div className=\"flex items-start justify-between mb-4\">\n            <div>\n              <h3 className=\"text-xl font-bold text-text-primary mb-1\">\n                {useCase.name}\n              </h3>\n              <span className=\"text-sm text-text-tertiary\">\n                {useCase.category}\n              </span>\n            </div>\n            \n            {/* Tool Logos and Fit Score */}\n            <div className=\"flex items-center gap-4\">\n              {/* Tool Logos */}\n              {useCase.required_tools && useCase.required_tools.length > 0 && (\n                <ConnectedAppLogos \n                  apps={useCase.required_tools.map(convertToolName)}\n                  maxVisible={5}\n                  size={24}\n                />\n              )}\n              \n              {/* Fit Score */}\n              <div className=\"text-right\">\n                <div className={`text-3xl font-bold ${getFitScoreColor(useCase.fit_score)}`}>\n                  {useCase.fit_score}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">\n                  {getFitScoreLabel(useCase.fit_score)}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Description */}\n          <p className=\"text-text-secondary mb-4 leading-relaxed\">\n            {useCase.value_proposition}\n          </p>\n\n          {/* Deploy Badge */}\n          <div className=\"mb-6\">\n            <StatusPill status={getPriorityStatus(useCase.priority)}>\n              {getPriorityLabel(useCase.priority)}\n            </StatusPill>\n          </div>\n\n          {/* Impact Metrics */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-bg-primary rounded-lg mb-6\">\n            <div>\n              <div className=\"text-2xl font-bold text-accent-green\">\n                {useCase.estimated_monthly_deflection.toLocaleString()}\n              </div>\n              <div className=\"text-xs text-text-tertiary\">Tickets/Month</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-accent-blue\">\n                {Math.round(useCase.estimated_hours_saved).toLocaleString()} hrs\n              </div>\n              <div className=\"text-xs text-text-tertiary\">Time Saved/Month</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-text-primary\">\n                {useCase.time_to_value_days} days\n              </div>\n              <div className=\"text-xs text-text-tertiary\">Time to Value</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-accent-orange\">\n                {Math.round(useCase.confidence * 100)}%\n              </div>\n              <div className=\"text-xs text-text-tertiary\">Confidence</div>\n            </div>\n          </div>\n\n          {/* How It Works - Collapsible */}\n          <div className=\"mb-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <button\n                onClick={() => setExpandedWorkflows(prev => ({\n                  ...prev,\n                  [useCase.use_case_id]: !prev[useCase.use_case_id]\n                }))}\n                className=\"flex items-center gap-2 text-sm font-semibold text-text-primary hover:text-highlight transition-colors duration-200\"\n              >\n                <svg\n                  className={`w-4 h-4 transition-transform duration-200 ${expandedWorkflows[useCase.use_case_id] ? 'rotate-180' : ''}`}\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                </svg>\n                <span>How it works:</span>\n              </button>\n              \n              {/* Tool Logos on the right */}\n              {useCase.required_tools && useCase.required_tools.length > 0 && (\n                <ConnectedAppLogos \n                  apps={useCase.required_tools.map(convertToolName)}\n                  maxVisible={5}\n                  size={32}\n                />\n              )}\n            </div>\n            \n            {expandedWorkflows[useCase.use_case_id] && (\n              <ul className=\"space-y-1 mt-4\">\n                {useCase.workflow_steps.map((step, i) => (\n                  <li key={i} className=\"text-sm text-text-secondary flex items-start gap-2\">\n                    <span className=\"text-accent-green mt-0.5 flex-shrink-0\">→</span>\n                    <span>{step}</span>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":8003},"src/components/assessment/report/v5/DeploymentTimeline.tsx":{"content":"'use client';\n\nexport default function DeploymentTimeline() {\n  const timeline = [\n    {\n      phaseNumber: \"Phase One\",\n      phaseName: \"Integration Setup\",\n      activity: \"Connect systems and validate API access\",\n      participants: \"IT Admin, Security Lead, Implementation Engineer, CIO\"\n    },\n    {\n      phaseNumber: \"Phase Two\",\n      phaseName: \"Rule & Policy Configuration\",\n      activity: \"Input approval workflows, exception rules, escalation paths\",\n      participants: \"Process Owner, Legal, End User Rep\"\n    },\n    {\n      phaseNumber: \"Phase Three\",\n      phaseName: \"AI Worker Training\",\n      activity: \"Fine-tune AI Worker on historical tickets and validate accuracy\",\n      participants: \"Implementation Engineer, IT Admin, End User Rep\"\n    },\n    {\n      phaseNumber: \"Phase Four\",\n      phaseName: \"User Acceptance Testing (UAT)\",\n      activity: \"Test AI Worker with real scenarios; gather feedback\",\n      participants: \"End User Rep, Department Head, Security Lead\"\n    },\n    {\n      phaseNumber: \"Phase Five\",\n      phaseName: \"Security & Compliance Review\",\n      activity: \"Final audit of data access, logging, and governance controls\",\n      participants: \"Security Lead, Legal, CIO/CISO\"\n    },\n    {\n      phaseNumber: \"Phase Six\",\n      phaseName: \"Production Pilot Launch\",\n      activity: \"Deploy AI Worker to production with limited scope; monitor performance\",\n      participants: \"All Stakeholders (monitoring & support)\"\n    }\n  ];\n\n  return (\n    <section className=\"mb-16\">\n      <h3 className=\"text-2xl font-bold text-text-primary mb-4\">\n        Timeline to Deploy\n      </h3>\n      <p className=\"text-lg text-text-secondary mb-8\">\n        A realistic view of what to expect from kickoff to production, typically completed within <strong className=\"text-text-primary\">4–6 weeks</strong>.\n      </p>\n      \n      <div className=\"bg-bg-card border border-brand-secondary/10 rounded-card p-6 mb-6 overflow-x-auto\">\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"border-b border-bg-card-alt/20\">\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/4\">Phase</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/2\">Activity</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/4\">Key Participants</th>\n            </tr>\n          </thead>\n          <tbody>\n            {timeline.map((row, index) => (\n              <tr key={index} className=\"border-b border-bg-card-alt/10 hover:bg-bg-card-alt/5 transition-colors duration-200\">\n                <td className=\"py-4 px-4 text-sm text-text-primary\">\n                  <div>{row.phaseNumber}</div>\n                  <div className=\"font-bold\">{row.phaseName}</div>\n                </td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary\">{row.activity}</td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary\">{row.participants}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3148},"src/components/assessment/report/v5/GetStartedRoadmap.tsx":{"content":"import Card from '@/components/ui/Card';\nimport { MatchedUseCase } from '@/types/types-v3';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface GetStartedRoadmapProps {\n  matchedUseCases: MatchedUseCase[];\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport default function GetStartedRoadmap({ matchedUseCases, feasibilityResults }: GetStartedRoadmapProps) {\n  \n  // Group and prioritize\n  const immediateUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'immediate')\n    .sort((a, b) => b.fit_score - a.fit_score);\n  \n  const quickWinUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'quick_win')\n    .sort((a, b) => b.fit_score - a.fit_score);\n\n  // Find future/additional capabilities to expand into\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n  const matchedIds = new Set(matchedUseCases.map(uc => uc.use_case_id));\n  \n  const futureCapabilities: any[] = [];\n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    if (enabledUseCaseIds.has(uc.id) && !matchedIds.has(uc.id)) {\n      futureCapabilities.push(uc);\n    }\n  });\n  \n  // Sort by implementation effort and time to value\n  futureCapabilities.sort((a, b) => {\n    const effortOrder: Record<string, number> = { low: 0, medium: 1, high: 2 };\n    if (effortOrder[a.implementation_effort] !== effortOrder[b.implementation_effort]) {\n      return effortOrder[a.implementation_effort] - effortOrder[b.implementation_effort];\n    }\n    return a.time_to_value_days - b.time_to_value_days;\n  });\n\n  if (matchedUseCases.length === 0 && futureCapabilities.length === 0) {\n    return null;\n  }\n\n  const renderPhase = (\n    title: string,\n    timeframe: string,\n    useCases: MatchedUseCase[],\n    phaseColor: string,\n    icon: string\n  ) => {\n    if (useCases.length === 0) return null;\n\n    const totalTickets = useCases.reduce((sum, uc) => sum + uc.estimated_monthly_deflection, 0);\n    const totalHours = useCases.reduce((sum, uc) => sum + uc.estimated_hours_saved, 0);\n\n    return (\n      <div className=\"relative\">\n        <Card>\n          <div className=\"flex items-start gap-4 mb-6\">\n            <div className={`flex-shrink-0 w-12 h-12 ${phaseColor} rounded-full flex items-center justify-center relative z-10`}>\n              <svg className=\"w-6 h-6 text-current\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                {icon === '🚀' && <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />}\n                {icon === '⚡' && <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />}\n                {icon === '📈' && <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />}\n              </svg>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-xl font-bold text-text-primary mb-1\">{title}</h3>\n              <p className=\"text-sm text-text-tertiary\">{timeframe}</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-accent-blue\">{totalTickets.toLocaleString()} tickets/month</div>\n              <div className=\"text-sm font-semibold text-text-primary\">{Math.round(totalHours).toLocaleString()} hrs saved/month</div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            {useCases.map((useCase, index) => (\n              <div key={useCase.use_case_id} className=\"p-4 bg-bg-primary rounded-lg border border-brand-secondary/10\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"text-sm font-semibold text-accent-blue\">\n                        Step {index + 1}\n                      </span>\n                      <h4 className=\"text-base font-bold text-text-primary\">\n                        {useCase.name}\n                      </h4>\n                    </div>\n                    <p className=\"text-sm text-text-secondary line-clamp-1\">\n                      {useCase.description}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mt-3\">\n                  <div>\n                    <div className=\"text-sm font-bold text-accent-green\">\n                      {useCase.estimated_monthly_deflection.toLocaleString()}\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Tickets</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-bold text-accent-blue\">\n                      {Math.round(useCase.estimated_hours_saved).toLocaleString()}h\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Saved</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-bold text-text-primary\">\n                      {useCase.time_to_value_days}d\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Setup</div>\n                  </div>\n                  <div>\n                    <div className={`text-sm font-bold ${\n                      useCase.implementation_effort === 'low' ? 'text-accent-green' :\n                      useCase.implementation_effort === 'medium' ? 'text-accent-blue' :\n                      'text-accent-orange'\n                    }`}>\n                      {useCase.implementation_effort}\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Effort</div>\n                  </div>\n                </div>\n\n                {/* Prerequisites Preview */}\n                {useCase.prerequisites.length > 0 && (\n                  <div className=\"mt-3 pt-3 border-t border-brand-secondary/10\">\n                    <details className=\"group\">\n                      <summary className=\"text-xs text-accent-blue cursor-pointer hover:underline list-none flex items-center gap-1\">\n                        <svg className=\"w-3 h-3 transition-transform group-open:rotate-90\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                        </svg>\n                        View {useCase.prerequisites.length} prerequisite{useCase.prerequisites.length !== 1 ? 's' : ''}\n                      </summary>\n                      <ul className=\"mt-2 space-y-1 ml-4\">\n                        {useCase.prerequisites.map((prereq, i) => (\n                          <li key={i} className=\"text-xs text-text-secondary flex items-start gap-1\">\n                            <span className=\"text-accent-green mt-0.5\">✓</span>\n                            {prereq}\n                          </li>\n                        ))}\n                      </ul>\n                    </details>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  // Calculate cumulative impact\n  const allPriorityUseCases = [...immediateUseCases, ...quickWinUseCases];\n  const cumulativeTickets = allPriorityUseCases.reduce((sum, uc) => sum + uc.estimated_monthly_deflection, 0);\n  const cumulativeHours = allPriorityUseCases.reduce((sum, uc) => sum + uc.estimated_hours_saved, 0);\n  const cumulativeFTE = (cumulativeHours * 12) / 2000;\n  const cumulativeValue = cumulativeFTE * 100000; // $100K fully loaded cost\n\n  return (\n    <div className=\"max-w-4xl mx-auto mb-16\">\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          How to Get Started\n        </h2>\n        <p className=\"text-text-secondary max-w-2xl mx-auto\">\n          A phased deployment plan showing when to deploy each AI Worker, based on your current capabilities and business impact.\n        </p>\n      </div>\n\n      <div className=\"space-y-8\">\n        {renderPhase(\n          'Week 1: Quick Deploy',\n          'Deploy in first 7 days',\n          immediateUseCases,\n          'bg-accent-green/20',\n          '🚀'\n        )}\n\n        {renderPhase(\n          'Month 1-2: Build Momentum',\n          'Deploy over next 4-8 weeks',\n          quickWinUseCases,\n          'bg-accent-blue/20',\n          '⚡'\n        )}\n\n        {/* Phase 3: Scale & Expand */}\n        {futureCapabilities.length > 0 && (\n          <div className=\"relative\">\n            <Card>\n              <div className=\"flex items-start gap-4 mb-6\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-accent-orange/20 rounded-full flex items-center justify-center relative z-10\">\n                  <svg className=\"w-6 h-6 text-current\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n                  </svg>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-bold text-text-primary mb-1\">\n                    Month 3+: Scale & Expand\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Expand automation across more workflows\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-accent-orange\">{futureCapabilities.length}</div>\n                  <div className=\"text-xs text-text-tertiary\">more AI Workers</div>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {futureCapabilities.map((uc: any) => (\n                  <div key={uc.id} className=\"p-4 bg-bg-primary rounded-lg border border-brand-secondary/10\">\n                    <h4 className=\"text-sm font-bold text-text-primary mb-1\">\n                      {uc.name}\n                    </h4>\n                    <p className=\"text-xs text-text-secondary line-clamp-2 mb-3\">\n                      {uc.description}\n                    </p>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-text-tertiary\">{uc.category}</span>\n                      <span className={`font-medium ${\n                        uc.implementation_effort === 'low' ? 'text-accent-green' :\n                        uc.implementation_effort === 'medium' ? 'text-accent-blue' :\n                        'text-accent-orange'\n                      }`}>\n                        {uc.time_to_value_days}d • {uc.implementation_effort} effort\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          </div>\n        )}\n      </div>\n\n      {/* Cumulative Impact Card */}\n      {allPriorityUseCases.length > 0 && (\n        <div className=\"mt-12\" style={{ boxShadow: '0 0 20px rgba(130, 216, 149, 0.3)', borderRadius: '12px' }}>\n          <Card>\n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-xl font-bold text-text-primary mb-2\">\n                Cumulative Impact (First 2 Months)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                By deploying AI workers with these {allPriorityUseCases.length} skills\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-accent-green mb-1\">\n                  {cumulativeTickets.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Tickets Automated</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-accent-blue mb-1\">\n                  {Math.round(cumulativeHours).toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Hours Saved/Month</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-text-primary mb-1\">\n                  {cumulativeFTE.toFixed(1)}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">FTE Capacity Freed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-accent-orange mb-1\">\n                  ${Math.round(cumulativeValue / 1000).toLocaleString()}K\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Annual Value</div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Next Steps CTA */}\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-sm text-text-tertiary mb-4\">\n          Ready to start your deployment?\n        </p>\n        <a \n          href=\"https://www.ai.work/book-a-demo\" \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n          className=\"px-6 py-3 bg-white text-black rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-flex items-center gap-2\"\n        >\n          <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n          Schedule Implementation Planning Call\n        </a>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13646},"src/components/assessment/report/v5/CustomReportCTA.tsx":{"content":"'use client';\n\nimport { useEffect } from 'react';\n\ninterface CustomReportCTAProps {\n  onRequestDiscovery?: () => void;\n}\n\nexport default function CustomReportCTA({\n  onRequestDiscovery,\n}: CustomReportCTAProps) {\n  useEffect(() => {\n    // Load HubSpot Meetings Embed script\n    const script = document.createElement('script');\n    script.src = 'https://static.hsappstatic.net/MeetingsEmbed/ex/MeetingsEmbedCode.js';\n    script.type = 'text/javascript';\n    script.async = true;\n    document.body.appendChild(script);\n\n    return () => {\n      // Cleanup: remove script when component unmounts\n      if (document.body.contains(script)) {\n        document.body.removeChild(script);\n      }\n    };\n  }, []);\n  return (\n    <div className=\"mb-20\">\n      <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-xl py-8 px-6 transition-all duration-200\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-4xl font-bold text-text-primary mb-6\">\n            Validate your AI Worker plan — with real data.\n          </h2>\n          <p className=\"text-xl text-text-tertiary mb-10 leading-relaxed\">\n            Turn your Blueprint into proof. In 7 days, we’ll analyze your live\n            ticket data to confirm which workflows are truly automation-ready,\n            the ROI you can expect, and a deployment roadmap built on evidence —\n            not estimates.\n          </p>\n\n          <div className=\"bg-bg-primary border border-bg-card-alt/20 rounded-lg py-8 px-6 mb-8 text-left\">\n            <h3 className=\"text-2xl font-bold text-text-primary mb-6 text-center\">\n              7-Day Ticket Listening Process\n            </h3>\n\n            <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n              <div>\n                <div className=\"text-4xl font-bold text-highlight mb-2\">1</div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">\n                  Quick Call (15 min)\n                </h4>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                  Confirm systems, scope, and security setup.\n                </p>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-highlight mb-2\">2</div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">\n                  Discovery Agent Runs\n                </h4>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                  Analyze ticket data, classify patterns, and detect\n                  automation-ready workflows.\n                </p>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-highlight mb-2\">3</div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">\n                  Verified Report\n                </h4>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                  Receive your empirical automation roadmap with ROI confidence\n                  scores and next-step guidance.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"border-t border-bg-card-alt/20 pt-6\">\n              <h2 className=\"text-2xl font-bold text-text-primary mb-6 text-center\">\n                Start your 7-day validation today\n              </h2>\n            </div>\n\n            {/* HubSpot Meeting Scheduler */}\n            <div className=\"border-bg-card-alt/20 pt-6 mt-6\">\n              <div \n                className=\"meetings-iframe-container\" \n                data-src=\"https://meetings-eu1.hubspot.com/maor-ezer/schedule-an-onboarding-session?embed=true\"\n              />\n            </div>\n          </div>\n\n          <div className=\"mt-8 flex items-center justify-center gap-8 text-sm text-text-tertiary\">\n            <div className=\"flex items-center gap-2\">\n              <svg\n                className=\"w-5 h-5\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n              <span>7-day analysis</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg\n                className=\"w-5 h-5\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\"\n                />\n              </svg>\n              <span>Read-only access</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg\n                className=\"w-5 h-5\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"\n                />\n              </svg>\n              <span>15-min setup call</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer Note */}\n      <div className=\"text-center text-text-tertiary text-sm mt-8\">\n        <p className=\"leading-relaxed\">\n          This assessment is based on anonymized IT automation data. Confidence:\n          ~70% accuracy with self-reported inputs.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6060},"src/components/assessment/report/v5/GapAnalysis.tsx":{"content":"'use client';\n\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport Card from '@/components/ui/Card';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface GapAnalysisProps {\n  feasibilityResults: FeasibilityResult[];\n}\n\ninterface UseCaseInfo {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n}\n\nexport default function GapAnalysis({ feasibilityResults }: GapAnalysisProps) {\n  return (\n    <section className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-4\">\n        More Available Capabilities\n      </h2>\n      <p className=\"text-xl text-text-tertiary mb-12\">\n        Additional AI Worker capabilities available through your current tech stack\n      </p>\n\n      <div className=\"space-y-8\">\n        {feasibilityResults.map((result, idx) => {\n          // Get ALL use cases enabled by this tool from FeasibilityEngine\n          const enabledUseCaseIds = new Set(result.enabled_use_cases);\n          \n          // Build comprehensive list of use cases\n          const allUseCasesForTool: UseCaseInfo[] = [];\n          \n          (useCaseMappings as any).use_cases.forEach((uc: any) => {\n            if (enabledUseCaseIds.has(uc.id)) {\n              allUseCasesForTool.push({\n                id: uc.id,\n                name: uc.name,\n                category: uc.category,\n                description: uc.description\n              });\n            }\n          });\n\n          // Sort alphabetically\n          allUseCasesForTool.sort((a, b) => a.name.localeCompare(b.name));\n\n          return (\n            <Card key={idx} className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n              <div className=\"flex items-start justify-between mb-6\">\n                <h3 className=\"text-2xl font-bold text-text-primary\">{result.tool}</h3>\n                <span className=\"px-3 py-1 rounded-full bg-highlight/20 text-highlight text-sm font-medium\">\n                  {Math.round(result.confidence * 100)}% Confidence\n                </span>\n              </div>\n\n              {/* Always show APIs if available */}\n              {result.available_apis.length > 0 && (\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center gap-2\">\n                    <svg className=\"w-5 h-5 text-highlight\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                    Available APIs\n                  </h4>\n                  <ul className=\"space-y-2\">\n                    {result.available_apis.map((api, i) => (\n                      <li key={i} className=\"text-text-tertiary pl-6\">\n                        • {api}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {/* Show ALL AI Worker actions this tool enables */}\n              {allUseCasesForTool.length > 0 && (\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center gap-2\">\n                    <svg className=\"w-5 h-5 text-highlight\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                    AI Worker Actions Available ({allUseCasesForTool.length})\n                  </h4>\n                  <div className=\"grid md:grid-cols-2 gap-2\">\n                    {allUseCasesForTool.map((uc) => (\n                      <div key={uc.id} className=\"text-text-tertiary pl-6\">\n                        • <span className=\"font-medium\">{uc.name}</span>\n                        <span className=\"text-text-tertiary/60 text-sm ml-2\">({uc.category})</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </Card>\n          );\n        })}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4115},"src/components/assessment/report/v5/RequiredAssets.tsx":{"content":"'use client';\n\nimport ResponsiveTable from '@/components/ui/ResponsiveTable';\n\nexport default function RequiredAssets() {\n  const categories = [\n    {\n      category: \"Rules (Knowledge)\",\n      description: \"All written policies, exception rules, approval workflows, and escalation paths. This includes IT service catalogs, compliance documents, access control matrices, and any documented decision trees. These materials form the AI Worker's 'source of truth' and ensure it follows your organization's governance standards. Without comprehensive rules, the AI Worker cannot make informed, policy-compliant decisions.\"\n    },\n    {\n      category: \"Data\",\n      description: \"Historical tickets, support requests, incident logs, and user interaction data from the past 6-12 months. This data reveals patterns in ticket volume, resolution times, common issues, and edge cases. The AI Worker learns from this information to understand your environment's unique characteristics and improve accuracy over time. Minimum recommended dataset: 3 months of ticket history with at least 1,000 tickets.\"\n    },\n    {\n      category: \"Connections\",\n      description: \"Read/write API access to integrated systems (ITSM tools, identity providers, collaboration platforms). This includes OAuth2 tokens, service account credentials, API keys, and SSO configurations. Proper integration credentials enable the AI Worker to execute actions across your tech stack. Security note: use dedicated service accounts with least-privilege access and enable audit logging for all automated actions.\"\n    },\n    {\n      category: \"Stakeholder Alignment\",\n      description: \"Buy-in and availability from key participants including IT admins, security leads, process owners, legal/compliance teams, and end-user representatives. Each stakeholder plays a critical role in configuration, testing, and validation. Schedule regular check-ins during the 4-6 week deployment to address concerns, gather feedback, and ensure smooth adoption across departments.\"\n    }\n  ];\n\n  const columns = [\n    {\n      key: 'category',\n      label: 'Category',\n      className: 'font-semibold text-text-primary w-1/4'\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      className: 'w-3/4'\n    }\n  ];\n\n  return (\n    <section className=\"mb-16\">\n      <h3 className=\"text-2xl font-bold text-text-primary mb-4\">\n        What You Will Need to Collect\n      </h3>\n      <p className=\"text-lg text-text-secondary mb-8\">\n        To ensure the AI Worker is configured correctly and governed effectively, gather the following before deployment:\n      </p>\n      \n      <div className=\"bg-bg-card border border-brand-secondary/10 rounded-card p-6 mb-8 overflow-x-auto\">\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"border-b border-bg-card-alt/20\">\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/4\">Category</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-3/4\">Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {categories.map((row, index) => (\n              <tr key={index} className=\"border-b border-bg-card-alt/10 hover:bg-bg-card-alt/5 transition-colors duration-200\">\n                <td className=\"py-4 px-4 text-sm font-semibold text-text-primary\">{row.category}</td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary leading-relaxed\">{row.description}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"bg-bg-card-alt/10 border border-bg-card-alt/20 rounded-card p-6\">\n        <h4 className=\"text-lg font-bold text-text-primary mb-3\">\n          Why This Matters\n        </h4>\n        <p className=\"text-lg text-text-secondary mb-3 leading-relaxed\">\n          This plan gives your team a <strong className=\"text-text-primary\">realistic roadmap</strong> to deploy AI safely — not a hype cycle.\n        </p>\n        <p className=\"text-lg text-text-secondary leading-relaxed\">\n          By preparing these assets and stakeholders upfront, you'll ensure your AI Workers are operational, auditable, and scalable within weeks — not quarters.\n        </p>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4317},"src/components/assessment/report/v5/OpportunityAnalysis.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport ConnectedAppLogos from '@/components/ui/ConnectedAppLogos';\nimport { MatchedUseCase } from '@/types/types-v3';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface OpportunityAnalysisProps {\n  matchedUseCases: MatchedUseCase[];\n  feasibilityResults: FeasibilityResult[];\n  topN?: number;\n}\n\nexport default function OpportunityAnalysis({ \n  matchedUseCases,\n  feasibilityResults,\n  topN = 10\n}: OpportunityAnalysisProps) {\n  const [expandedWorkflows, setExpandedWorkflows] = useState<Record<string, boolean>>({});\n\n  // Convert tool names from underscore format to proper names\n  const convertToolName = (tool: string): string => {\n    const toolMap: Record<string, string> = {\n      'okta': 'Okta',\n      'servicenow': 'ServiceNow',\n      'slack': 'Slack',\n      'jira': 'Jira',\n      'jira_service_management': 'Jira Service Management',\n      'zendesk': 'Zendesk',\n      'microsoft_365': 'Microsoft 365',\n      'microsoft_entra': 'Microsoft Entra',\n      'microsoft_teams': 'Microsoft Teams',\n      'google_workspace': 'Google Workspace',\n      'google_drive': 'Google Drive',\n      'google_docs': 'Google Docs',\n      'google_sheets': 'Google Sheets',\n      'google_calendar': 'Google Calendar',\n      'gmail': 'Gmail',\n      'azure_ad': 'Azure AD',\n      'salesforce': 'Salesforce',\n      'github': 'GitHub',\n      'gitlab': 'GitLab',\n      'confluence': 'Confluence',\n      'asana': 'Asana',\n      'monday_com': 'Monday.com',\n      'zoom': 'Zoom',\n      'teams': 'Teams',\n      'workday': 'Workday',\n      'bamboohr': 'BambooHR',\n      'duo_security': 'Duo Security',\n      'cyberark': 'CyberArk',\n      'jumpcloud': 'JumpCloud',\n      'freshservice': 'Freshservice',\n      'ivanti': 'Ivanti',\n      'sap_successfactors': 'SAP SuccessFactors',\n      'hibob': 'HiBob',\n      'docusign': 'DocuSign',\n      'linear': 'Linear',\n      'sharepoint': 'SharePoint'\n    };\n    \n    return toolMap[tool.toLowerCase()] || tool.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  // Get category color based on category name\n  const getCategoryColor = (category: string): string => {\n    const categoryColors: Record<string, string> = {\n      'Identity Access & Compliance': 'bg-accent-green/20 text-accent-green',\n      'CRM Integration': 'bg-accent-blue/20 text-accent-blue',\n      'Knowledge Management': 'bg-purple-500/20 text-purple-400',\n      'IT Service Management': 'bg-accent-orange/20 text-accent-orange',\n      'HR & Onboarding': 'bg-pink-500/20 text-pink-400',\n      'Procurement': 'bg-yellow-500/20 text-yellow-400',\n      'Project Management': 'bg-indigo-500/20 text-indigo-400',\n      'Communication & Collaboration': 'bg-teal-500/20 text-teal-400'\n    };\n    \n    return categoryColors[category] || 'bg-accent-green/20 text-accent-green';\n  };\n  \n  // Get all enabled use case IDs\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n\n  // Build comprehensive list: matched use cases PLUS enabled use cases without volume matches\n  const allOpportunities: MatchedUseCase[] = [];\n  \n  // First, add all matched use cases (these have impact data)\n  allOpportunities.push(...matchedUseCases);\n  \n  // Then, add enabled use cases that weren't matched (no volume data, but still possible)\n  const matchedIds = new Set(matchedUseCases.map(uc => uc.use_case_id));\n  \n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    if (enabledUseCaseIds.has(uc.id) && !matchedIds.has(uc.id)) {\n      // Create a pseudo-matched use case with estimated impact based on typical values\n      const estimatedVolume = Math.round((uc.typical_volume_pct || 0.05) * 1000); // Assume 1000 tickets baseline\n      const estimatedHours = estimatedVolume * (uc.typical_ttr_hours || 1) * (uc.automation_rate || 0.8);\n      \n      allOpportunities.push({\n        use_case_id: uc.id,\n        name: uc.name,\n        category: uc.category,\n        description: uc.description,\n        value_proposition: uc.value_proposition,\n        fit_score: 45, // Base score for enabled but unmatched\n        estimated_monthly_deflection: estimatedVolume,\n        estimated_hours_saved: estimatedHours,\n        confidence: uc.confidence * 0.7, // Lower confidence since no volume match\n        implementation_effort: uc.implementation_effort,\n        time_to_value_days: uc.time_to_value_days,\n        prerequisites: uc.prerequisites,\n        workflow_steps: uc.workflow_steps,\n        priority: uc.time_to_value_days <= 7 ? 'immediate' : \n                  uc.time_to_value_days <= 21 ? 'quick_win' : 'future',\n        required_tools: uc.required_tools,\n        automation_type: uc.automation_type\n      });\n    }\n  });\n\n  // Sort by fit score and limit to topN\n  const topUseCases = allOpportunities\n    .sort((a, b) => b.fit_score - a.fit_score)\n    .slice(0, topN);\n\n  if (topUseCases.length === 0) {\n    return null;\n  }\n\n  const getFitScoreColor = (score: number) => {\n    if (score >= 80) return 'text-accent-green';\n    if (score >= 60) return 'text-accent-blue';\n    if (score >= 40) return 'text-accent-orange';\n    return 'text-text-tertiary';\n  };\n\n  const getFitScoreLabel = (score: number) => {\n    if (score >= 80) return 'Excellent Fit';\n    if (score >= 60) return 'Good Fit';\n    if (score >= 40) return 'Moderate Fit';\n    return 'Basic Fit';\n  };\n\n  const getPriorityStatus = (priority: string): 'success' | 'active' | 'warning' => {\n    if (priority === 'immediate') return 'success';\n    if (priority === 'quick_win') return 'active';\n    return 'warning';\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    if (priority === 'immediate') return 'Deploy Week 1';\n    if (priority === 'quick_win') return 'Deploy Month 1-2';\n    return 'Deploy Month 3+';\n  };\n\n  // Separate full automation and assisted use cases\n  const fullAutomationCases = topUseCases.filter(uc => uc.automation_type === 'full_automation');\n  const assistedCases = topUseCases.filter(uc => uc.automation_type === 'assisted');\n\n  const renderUseCaseCard = (useCase: any, index: number) => (\n    <div \n      key={useCase.use_case_id}\n      className=\"relative bg-bg-card rounded-lg p-6 border border-brand-secondary/10 hover:border-highlight/50 transition-all duration-200 overflow-hidden\"\n    >\n      {/* Top Section: Rank, Title, and Tool Logos */}\n      <div className=\"flex items-start justify-between mb-2\">\n        <div className=\"flex-1\">\n          {/* Rank Number */}\n          <div className=\"text-sm font-medium mb-2\" style={{ color: '#8a8784' }}>\n            {String(index + 1).padStart(2, '0')}\n          </div>\n          \n          {/* Title */}\n          <h3 className=\"text-2xl font-bold text-text-primary mb-2\">\n            {useCase.name}\n          </h3>\n\n          {/* Category Badge */}\n          <div className={`inline-flex px-3 py-1 rounded-full text-xs font-medium ${getCategoryColor(useCase.category)}`}>\n            {useCase.category}\n          </div>\n        </div>\n\n        {/* Tool Logos - Prominent Top Right */}\n        {useCase.required_tools && useCase.required_tools.length > 0 && (\n          <div className=\"ml-6 flex-shrink-0\">\n            <ConnectedAppLogos \n              apps={useCase.required_tools.map(convertToolName)}\n              maxVisible={3}\n              size={48}\n              prominent={true}\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Description */}\n      <p className=\"text-lg text-text-secondary mb-6 leading-relaxed\">\n        {useCase.value_proposition}\n      </p>\n\n      {/* Impact Metrics - Enhanced */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 p-5 bg-bg-primary/50 rounded-lg border border-border/50 mb-6\">\n        <div>\n          <div className=\"text-3xl font-bold text-accent-green mb-1\">\n            {useCase.estimated_monthly_deflection.toLocaleString()}\n          </div>\n          <div className=\"text-xs text-text-tertiary uppercase tracking-wide\">Tickets/Month</div>\n        </div>\n        <div>\n          <div className=\"text-3xl font-bold text-accent-blue mb-1\">\n            {Math.round(useCase.estimated_hours_saved).toLocaleString()} <span className=\"text-xl\">hrs</span>\n          </div>\n          <div className=\"text-xs text-text-tertiary uppercase tracking-wide\">Time Saved/Month</div>\n        </div>\n        <div>\n          <div className=\"text-3xl font-bold text-text-primary mb-1\">\n            {useCase.time_to_value_days} <span className=\"text-xl\">days</span>\n          </div>\n          <div className=\"text-xs text-text-tertiary uppercase tracking-wide\">Time to Value</div>\n        </div>\n        <div>\n          <div className=\"text-3xl font-bold text-accent-orange mb-1\">\n            {Math.round(useCase.confidence * 100)}%\n          </div>\n          <div className=\"text-xs text-text-tertiary uppercase tracking-wide\">Confidence</div>\n        </div>\n      </div>\n\n      {/* How It Works - Collapsible */}\n      <div>\n        <button\n          onClick={() => setExpandedWorkflows(prev => ({\n            ...prev,\n            [useCase.use_case_id]: !prev[useCase.use_case_id]\n          }))}\n          className=\"flex items-center gap-2 text-sm font-semibold text-text-primary hover:text-highlight transition-colors duration-200 w-full text-left\"\n        >\n          <span>How it works</span>\n          <svg\n            className={`w-4 h-4 transition-transform duration-200 ${expandedWorkflows[useCase.use_case_id] ? 'rotate-180' : ''}`}\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </button>\n        \n        {expandedWorkflows[useCase.use_case_id] && (\n          <ul className=\"space-y-2 mt-4 pl-1\">\n            {useCase.workflow_steps.map((step: string, i: number) => (\n              <li key={i} className=\"text-sm text-text-secondary flex items-start gap-3\">\n                <span className=\"text-highlight mt-0.5 flex-shrink-0 font-bold\">→</span>\n                <span>{step}</span>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      {fullAutomationCases.length > 0 && (\n        <div className=\"mb-12\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-3xl font-bold text-text-primary mb-3\">\n              Full Automation Opportunities\n            </h2>\n            <p className=\"text-lg text-text-secondary\">\n              These use cases can be completely automated end-to-end, requiring no human intervention. Deploy these first for maximum impact.\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 gap-6\">\n            {fullAutomationCases.map((useCase, index) => renderUseCaseCard(useCase, index))}\n          </div>\n        </div>\n      )}\n      \n      {assistedCases.length > 0 && (\n        <div>\n          <div className=\"mb-8\">\n            <h2 className=\"text-3xl font-bold text-text-primary mb-3\">\n              AI-Assisted Opportunities\n            </h2>\n            <p className=\"text-lg text-text-secondary\">\n              These use cases benefit from AI assistance to augment human work, providing recommendations and automating parts of the workflow.\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 gap-6\">\n            {assistedCases.map((useCase, index) => renderUseCaseCard(useCase, index))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":11678},"src/app/report/v5/[id]/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter, useParams } from \"next/navigation\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { AssessmentData, ReadinessScore } from \"@/types\";\nimport { calculateReadinessScore } from \"@/lib/scoringAlgorithm\";\nimport {\n  FeasibilityEngine,\n  FeasibilityResult,\n} from \"@/lib/engines/feasibility-engine\";\nimport { UseCaseMatcher, MatchedUseCase } from \"@/lib/engines/use-case-matcher\";\nimport { ROICalculator, ROIResult } from \"@/lib/engines/roi-calculator\";\nimport ExecutiveSummary from \"@/components/assessment/report/v5/ExecutiveSummary\";\nimport OpportunityAnalysis from \"@/components/assessment/report/v5/OpportunityAnalysis\";\nimport ExpectedOutcomes from \"@/components/assessment/report/v5/ExpectedOutcomes\";\nimport CustomReportCTA from \"@/components/assessment/report/v5/CustomReportCTA\";\n\nexport default function ReportV5Page() {\n  const router = useRouter();\n  const params = useParams();\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState<ReadinessScore | null>(null);\n  const [assessmentData, setAssessmentData] = useState<AssessmentData | null>(\n    null,\n  );\n  const [copied, setCopied] = useState(false);\n\n  const [feasibilityResults, setFeasibilityResults] = useState<\n    FeasibilityResult[]\n  >([]);\n  const [matchedUseCases, setMatchedUseCases] = useState<MatchedUseCase[]>([]);\n  const [roiResult, setRoiResult] = useState<ROIResult | null>(null);\n\n  const handleShare = () => {\n    navigator.clipboard.writeText(window.location.href);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  useEffect(() => {\n    async function loadAssessmentData() {\n      const id = params.id as string;\n      \n      // If ID is \"new\", load from sessionStorage\n      if (id === \"new\") {\n        const dataStr = sessionStorage.getItem(\"assessmentData\");\n        if (!dataStr) {\n          router.push(\"/\");\n          return;\n        }\n        const data: AssessmentData = JSON.parse(dataStr);\n        setAssessmentData(data);\n        processAssessmentData(data);\n        return;\n      }\n      \n      // Otherwise, load from database\n      try {\n        const response = await fetch(`/api/assessments/${id}`);\n        const result = await response.json();\n        \n        if (result.success && result.data) {\n          const data = result.data.reportData as AssessmentData;\n          setAssessmentData(data);\n          processAssessmentData(data);\n        } else {\n          // Fallback to sessionStorage\n          const dataStr = sessionStorage.getItem(\"assessmentData\");\n          if (dataStr) {\n            const data: AssessmentData = JSON.parse(dataStr);\n            setAssessmentData(data);\n            processAssessmentData(data);\n          } else {\n            router.push(\"/\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading assessment:\", error);\n        // Fallback to sessionStorage\n        const dataStr = sessionStorage.getItem(\"assessmentData\");\n        if (dataStr) {\n          const data: AssessmentData = JSON.parse(dataStr);\n          setAssessmentData(data);\n          processAssessmentData(data);\n        } else {\n          router.push(\"/\");\n        }\n      }\n    }\n    \n    loadAssessmentData();\n  }, [params.id, router]);\n  \n  function processAssessmentData(data: AssessmentData) {\n    setTimeout(() => {\n      const calcScore = calculateReadinessScore(data);\n      setScore(calcScore);\n\n      const feasibilityEngine = new FeasibilityEngine();\n      const useCaseMatcher = new UseCaseMatcher();\n      const roiCalculator = new ROICalculator();\n\n      const tools =\n        data.techStack?.map((toolName) => ({\n          name: toolName,\n          license_tier: \"standard\",\n        })) || [];\n\n      const activities = [];\n      if (data.ticketDistribution && data.monthlyTickets) {\n        const categoryMapping: Record<string, { key: string; ttr: number }> = {\n          applications: { key: \"app_access\", ttr: 1.7 },\n          hardware: { key: \"hardware\", ttr: 2.5 },\n          onboarding: { key: \"onboarding\", ttr: 4.0 },\n          distributionLists: { key: \"distribution_lists\", ttr: 0.75 },\n          network: { key: \"network\", ttr: 1.5 },\n          security: { key: \"security\", ttr: 3.0 },\n        };\n\n        for (const [key, percentage] of Object.entries(\n          data.ticketDistribution,\n        )) {\n          const mapping = categoryMapping[key];\n          if (mapping && percentage > 0) {\n            activities.push({\n              category: mapping.key,\n              monthly_volume: Math.round(\n                (data.monthlyTickets * percentage) / 100,\n              ),\n              avg_ttr_hours: mapping.ttr,\n            });\n          }\n        }\n      }\n\n      const feasibility = feasibilityEngine.analyzeStack(tools);\n      const matches = useCaseMatcher.matchUseCases(activities, feasibility);\n      const roi = roiCalculator.calculateROI(\n        data.monthlyTickets || 1000,\n        matches,\n      );\n\n      setFeasibilityResults(feasibility);\n      setMatchedUseCases(matches);\n      setRoiResult(roi);\n      setLoading(false);\n    }, 3000);\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-bg-primary flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-16 w-16 border-4 border-highlight border-t-transparent mb-8\" />\n          <h2 className=\"text-2xl font-bold text-text-primary mb-2\">\n            Analyzing your environment...\n          </h2>\n          <p className=\"text-text-tertiary\">\n            Running AI Worker readiness analysis\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!score || !assessmentData) return null;\n\n  return (\n    <div className=\"min-h-screen bg-bg-primary\">\n      {/* Header */}\n      <header className=\"border-b border-bg-card-alt/20\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4 flex items-center justify-between\">\n          <Link href=\"/\">\n            <Image\n              src=\"/images/aiwork-logo.png\"\n              alt=\"ai.work\"\n              width={120}\n              height={30}\n              className=\"h-7 w-auto\"\n            />\n          </Link>\n          <button\n            onClick={handleShare}\n            className=\"flex items-center gap-2 px-4 py-2 bg-white text-black rounded-lg font-semibold hover:bg-gray-100 transition-colors\"\n          >\n            <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n            <span className=\"text-sm\">\n              {copied ? \"Copied!\" : \"Share this\"}\n            </span>\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z\" />\n            </svg>\n          </button>\n        </div>\n      </header>\n\n      {/* Main */}\n      <main className=\"py-12\">\n        <div className=\"container mx-auto px-4 max-w-7xl\">\n          {/* Heading */}\n          <div className=\"mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4 text-text-primary\">\n              AI Worker Readiness Assessment\n            </h1>\n            <p className=\"text-xl text-text-secondary\">\n              Analysis complete for {assessmentData.techStack?.length || 0} connected tools and{' '}\n              {(assessmentData.monthlyTickets || 0).toLocaleString()} monthly tickets\n            </p>\n          </div>\n\n          {/* Hero Statistics */}\n          {roiResult && (\n            <ExecutiveSummary\n              roiResult={roiResult}\n              totalMonthlyTickets={assessmentData.monthlyTickets || 1000}\n            />\n          )}\n\n          {/* Use Case Cards */}\n          <OpportunityAnalysis\n            matchedUseCases={matchedUseCases}\n            feasibilityResults={feasibilityResults}\n            topN={10}\n          />\n\n          <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n          {/* What to Expect */}\n          {roiResult && (\n            <ExpectedOutcomes\n              roiResult={roiResult}\n              totalMonthlyTickets={assessmentData.monthlyTickets || 1000}\n            />\n          )}\n\n          <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n          {/* Call to Action */}\n          <CustomReportCTA />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8618},"src/components/assessment/report/v5/ROIBreakdown.tsx":{"content":"'use client';\n\nimport { ROIResult } from '@/lib/engines/roi-calculator';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport Card from '@/components/ui/Card';\nimport useCaseMappings from '@/data/use-case-mappings.json';\nimport { formatLargeNumber } from '@/lib/utils/formatNumber';\n\ninterface ROIBreakdownProps {\n  roiResult: ROIResult;\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport default function ROIBreakdown({ roiResult, feasibilityResults }: ROIBreakdownProps) {\n  // Get all enabled use case IDs\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n\n  // Get categories from matched use cases (actual impact)\n  const matchedCategories = new Set(\n    roiResult.breakdown_by_category.map(cat => cat.category)\n  );\n\n  // Find additional categories with enabled use cases\n  const additionalCategories: Record<string, {\n    category: string;\n    useCases: any[];\n    estimatedTickets: number;\n    estimatedHours: number;\n  }> = {};\n\n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    // Filter out Meetings & Collaboration Licenses category\n    if (uc.category === 'Meetings & Collaboration Licenses') {\n      return;\n    }\n    \n    if (enabledUseCaseIds.has(uc.id) && !matchedCategories.has(uc.category)) {\n      if (!additionalCategories[uc.category]) {\n        additionalCategories[uc.category] = {\n          category: uc.category,\n          useCases: [],\n          estimatedTickets: 0,\n          estimatedHours: 0\n        };\n      }\n      additionalCategories[uc.category].useCases.push(uc);\n      // Estimate based on typical values (assuming 1000 ticket baseline)\n      const estTickets = Math.round((uc.typical_volume_pct || 0.05) * 1000 * (uc.automation_rate || 0.8));\n      const estHours = estTickets * (uc.typical_ttr_hours || 1.5);\n      additionalCategories[uc.category].estimatedTickets += estTickets;\n      additionalCategories[uc.category].estimatedHours += estHours;\n    }\n  });\n  return (\n    <section className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-4\">\n        ROI Breakdown\n      </h2>\n      <p className=\"text-xl text-text-tertiary mb-12\">\n        Detailed impact analysis by category\n      </p>\n\n      {/* Summary Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">Automatable Tickets</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {roiResult.automatable_tickets.toLocaleString()}\n            <span className=\"text-lg text-text-tertiary ml-2\">\n              ({roiResult.automatable_pct.toFixed(1)}%)\n            </span>\n          </div>\n        </Card>\n\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">Hours Saved/Month</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {Math.round(roiResult.total_hours_saved).toLocaleString()}\n          </div>\n        </Card>\n\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">FTE Equivalent</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {roiResult.fte_equivalent.toFixed(1)}\n          </div>\n        </Card>\n\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">Annual Value</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {formatLargeNumber(roiResult.annual_value_usd, '$')}\n          </div>\n        </Card>\n      </div>\n\n      {/* Category Breakdown */}\n      <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n        <h3 className=\"text-2xl font-bold text-text-primary mb-6\">\n          Impact by Category\n        </h3>\n\n        {/* Matched Categories with Actual Impact */}\n        <div className=\"space-y-6 mb-8\">\n          {roiResult.breakdown_by_category\n            .filter(cat => cat.category !== 'Meetings & Collaboration Licenses')\n            .map((category, idx) => (\n            <div key={idx} className=\"border-b border-bg-card-alt/20 pb-6\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div>\n                  <h4 className=\"text-lg font-semibold text-text-primary\">\n                    {category.category}\n                  </h4>\n                  <p className=\"text-sm text-text-tertiary\">\n                    {category.tickets.toLocaleString()} tickets/month automated\n                  </p>\n                </div>\n                <span className=\"px-3 py-1 rounded-full bg-highlight/20 text-highlight text-sm font-medium\">\n                  {Math.round(category.confidence * 100)}% confidence\n                </span>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"text-2xl font-bold text-highlight\">\n                    {Math.round(category.hours_saved).toLocaleString()} hours/month\n                  </div>\n                  <div className=\"text-sm text-text-tertiary\">\n                    ~{((category.hours_saved * 12) / 2000).toFixed(1)} FTE saved annually\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Additional Categories with Estimated Potential */}\n        {Object.keys(additionalCategories).length > 0 && (\n          <>\n            <div className=\"border-t border-bg-card-alt/20 pt-8 mb-6\">\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">\n                Additional Automation Potential\n              </h4>\n              <p className=\"text-sm text-text-tertiary\">\n                More categories you can automate with your current capabilities\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {Object.values(additionalCategories).map((cat, idx) => (\n                <div key={idx} className=\"border-b border-bg-card-alt/20 last:border-0 pb-6 last:pb-0\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <h5 className=\"text-lg font-semibold text-text-primary\">\n                        {cat.category}\n                      </h5>\n                      <p className=\"text-sm text-text-tertiary\">\n                        {cat.useCases.length} AI Worker{cat.useCases.length !== 1 ? 's' : ''} available\n                      </p>\n                    </div>\n                    <span className=\"px-3 py-1 rounded-full bg-accent-blue/20 text-accent-blue text-sm font-medium\">\n                      Estimated\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"text-2xl font-bold text-accent-blue\">\n                        ~{Math.round(cat.estimatedHours)} hours/month\n                      </div>\n                      <div className=\"text-sm text-text-tertiary\">\n                        Potential savings based on typical use patterns\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </>\n        )}\n\n        <div className=\"mt-8 p-4 bg-bg-card-alt/30 rounded-lg\">\n          <p className=\"text-sm text-text-tertiary\">\n            <span className=\"font-semibold text-text-primary\">Overall Confidence: {roiResult.confidence}%</span>\n            {' '}— Based on weighted average of use case confidence scores and your ticket volumes\n          </p>\n        </div>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":7879},"src/components/assessment/report/v5/InternalAlignment.tsx":{"content":"'use client';\n\nimport ResponsiveTable from '@/components/ui/ResponsiveTable';\n\nexport default function InternalAlignment() {\n  const stakeholders = [\n    {\n      role: \"IT Admin / System Owner\",\n      whyInvolved: \"Provides admin API tokens and validates integrations\",\n      includeOnCalls: true,\n      approvalNeeded: \"Super Admin, Privacy & Security approval\"\n    },\n    {\n      role: \"Security Lead\",\n      whyInvolved: \"Approves OAuth scopes, validates data access controls\",\n      includeOnCalls: true,\n      approvalNeeded: \"Data access & encryption protocols\"\n    },\n    {\n      role: \"Legal / Compliance Officer\",\n      whyInvolved: \"Ensures AI Worker aligns with regulatory obligations\",\n      includeOnCalls: true,\n      approvalNeeded: \"AI governance & data residency approvals\"\n    },\n    {\n      role: \"Finance / Procurement\",\n      whyInvolved: \"Manages contract, budget allocation, and ROI tracking\",\n      includeOnCalls: false,\n      approvalNeeded: \"Contract & payment approvals\"\n    },\n    {\n      role: \"End User Representative\",\n      whyInvolved: \"Validates workflow accuracy and user experience\",\n      includeOnCalls: true,\n      approvalNeeded: \"Process sign-off\"\n    },\n    {\n      role: \"Department Head (IT, HR, Procurement)\",\n      whyInvolved: \"Champions adoption and ensures team readiness\",\n      includeOnCalls: false,\n      approvalNeeded: \"Change management approval\"\n    },\n    {\n      role: \"CIO / CISO\",\n      whyInvolved: \"Executive sponsor ensuring strategic alignment\",\n      includeOnCalls: true,\n      approvalNeeded: \"Strategic & security approval\"\n    }\n  ];\n\n  const columns = [\n    {\n      key: 'role',\n      label: 'Role',\n      className: 'font-semibold text-text-primary w-1/5'\n    },\n    {\n      key: 'whyInvolved',\n      label: 'Why They\\'re Involved',\n      className: 'w-2/5'\n    },\n    {\n      key: 'includeOnCalls',\n      label: 'Include on Calendar Invites',\n      className: 'text-center w-1/6',\n      render: (value: boolean) => (\n        <div className=\"flex justify-center\">\n          {value ? (\n            <svg className=\"w-5 h-5 text-accent-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n            </svg>\n          ) : (\n            <span className=\"text-text-tertiary\">—</span>\n          )}\n        </div>\n      )\n    },\n    {\n      key: 'approvalNeeded',\n      label: 'Approval Needed',\n      className: 'w-1/5'\n    }\n  ];\n\n  return (\n    <section className=\"mb-16\">\n      <h3 className=\"text-2xl font-bold text-text-primary mb-4\">\n        Secure Internal Alignment\n      </h3>\n      <p className=\"text-lg text-text-secondary mb-2\">\n        AI Workers cross multiple systems — and therefore multiple teams.\n      </p>\n      <p className=\"text-lg text-text-secondary mb-8\">\n        To deploy effectively, you'll need participation and approval from these roles:\n      </p>\n      \n      <div className=\"bg-bg-card border border-brand-secondary/10 rounded-card p-6 overflow-x-auto\">\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"border-b border-bg-card-alt/20\">\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/5\">Role</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-2/5\">Why They're Involved</th>\n              <th className=\"text-center py-4 px-4 text-sm font-semibold text-text-primary w-1/6\">Include on Calendar Invites</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/5\">Approval Needed</th>\n            </tr>\n          </thead>\n          <tbody>\n            {stakeholders.map((stakeholder, index) => (\n              <tr key={index} className=\"border-b border-bg-card-alt/10 hover:bg-bg-card-alt/5 transition-colors duration-200\">\n                <td className=\"py-4 px-4 text-sm font-semibold text-text-primary\">{stakeholder.role}</td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary\">{stakeholder.whyInvolved}</td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary text-center\">\n                  <div className=\"flex justify-center\">\n                    {stakeholder.includeOnCalls ? (\n                      <svg className=\"w-5 h-5 text-accent-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                      </svg>\n                    ) : (\n                      <span className=\"text-text-tertiary\">—</span>\n                    )}\n                  </div>\n                </td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary\">{stakeholder.approvalNeeded}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5116},"src/components/assessment/report/v5/BestFitUseCases.tsx":{"content":"import Card from '@/components/ui/Card';\nimport StatusPill from '@/components/ui/StatusPill';\nimport { MatchedUseCase } from '@/types/types-v3';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface BestFitUseCasesProps {\n  matchedUseCases: MatchedUseCase[];\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport default function BestFitUseCases({ matchedUseCases, feasibilityResults }: BestFitUseCasesProps) {\n  \n  // Group matched use cases by priority\n  const immediateUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'immediate')\n    .sort((a, b) => b.fit_score - a.fit_score);\n  \n  const quickWinUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'quick_win')\n    .sort((a, b) => b.fit_score - a.fit_score);\n  \n  const futureUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'future')\n    .sort((a, b) => b.fit_score - a.fit_score);\n\n  // Get ALL enabled use cases\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n  \n  // Find additional enabled capabilities not in matched use cases\n  const matchedIds = new Set(matchedUseCases.map(uc => uc.use_case_id));\n  const additionalCapabilities: any[] = [];\n  \n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    // Filter out Meetings & Collaboration Licenses category\n    if (uc.category === 'Meetings & Collaboration Licenses') {\n      return;\n    }\n    \n    if (enabledUseCaseIds.has(uc.id) && !matchedIds.has(uc.id)) {\n      additionalCapabilities.push(uc);\n    }\n  });\n  \n  // Group additional capabilities by category\n  const capabilitiesByCategory: Record<string, any[]> = {};\n  additionalCapabilities.forEach(uc => {\n    if (!capabilitiesByCategory[uc.category]) {\n      capabilitiesByCategory[uc.category] = [];\n    }\n    capabilitiesByCategory[uc.category].push(uc);\n  });\n\n  if (matchedUseCases.length === 0 && additionalCapabilities.length === 0) {\n    return null;\n  }\n\n  const renderUseCaseGrid = (useCases: MatchedUseCase[]) => {\n    if (useCases.length === 0) return null;\n\n    return (\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {useCases.map(useCase => (\n          <Card key={useCase.use_case_id} hover>\n            <div className=\"mb-3\">\n              <h4 className=\"text-lg font-bold text-text-primary mb-1\">\n                {useCase.name}\n              </h4>\n              <span className=\"text-sm text-text-tertiary\">{useCase.category}</span>\n            </div>\n\n            <p className=\"text-sm text-text-secondary mb-4 line-clamp-2\">\n              {useCase.description}\n            </p>\n\n            {/* Quick Metrics */}\n            <div className=\"grid grid-cols-3 gap-3 mb-4\">\n              <div>\n                <div className=\"text-lg font-bold text-accent-green\">\n                  {useCase.estimated_monthly_deflection.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Tickets</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-accent-blue\">\n                  {Math.round(useCase.estimated_hours_saved).toLocaleString()}h\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Saved</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-text-primary\">\n                  {useCase.fit_score}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Fit Score</div>\n              </div>\n            </div>\n\n            {/* Implementation Info */}\n            <div className=\"flex items-center justify-between text-xs text-text-tertiary\">\n              <span>{useCase.time_to_value_days} day setup</span>\n              <span className={`font-semibold ${\n                useCase.implementation_effort === 'low' ? 'text-accent-green' :\n                useCase.implementation_effort === 'medium' ? 'text-accent-blue' :\n                'text-accent-orange'\n              }`}>\n                {useCase.implementation_effort} effort\n              </span>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto mb-16\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          Your AI Worker Deployment Plan\n        </h2>\n        <p className=\"text-text-secondary\">\n          Organized by when to deploy, based on setup complexity, time-to-value, and business impact.\n        </p>\n      </div>\n\n      {/* Immediate Deployment (Week 1) */}\n      {immediateUseCases.length > 0 && (\n        <div className=\"mb-12\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"flex-shrink-0 w-12 h-12 bg-accent-green/20 rounded-full flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-accent-green\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary\">\n                Deploy Immediately (Week 1)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                {immediateUseCases.length} AI Worker{immediateUseCases.length !== 1 ? 's' : ''} ready for immediate deployment\n              </p>\n            </div>\n          </div>\n          {renderUseCaseGrid(immediateUseCases)}\n        </div>\n      )}\n\n      {/* Quick Wins (Month 1-2) */}\n      {quickWinUseCases.length > 0 && (\n        <div className=\"mb-12\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-accent-blue\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary\">\n                Quick Wins (Month 1-2)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                {quickWinUseCases.length} AI Worker{quickWinUseCases.length !== 1 ? 's' : ''} for near-term deployment\n              </p>\n            </div>\n          </div>\n          {renderUseCaseGrid(quickWinUseCases)}\n        </div>\n      )}\n\n      {/* Future Opportunities (Month 3+) */}\n      {futureUseCases.length > 0 && (\n        <div>\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"flex-shrink-0 w-12 h-12 bg-accent-orange/20 rounded-full flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-accent-orange\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary\">\n                📅 Strategic Opportunities (Month 3+)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                {futureUseCases.length} AI Worker{futureUseCases.length !== 1 ? 's' : ''} for longer-term planning\n              </p>\n            </div>\n          </div>\n          {renderUseCaseGrid(futureUseCases)}\n        </div>\n      )}\n\n      {/* Additional Capabilities */}\n      {additionalCapabilities.length > 0 && (\n        <div className=\"mt-16\">\n          <div className=\"mb-8\">\n            <h3 className=\"text-2xl font-bold text-text-primary mb-2\">\n              More Available Capabilities\n            </h3>\n            <p className=\"text-text-secondary\">\n              {additionalCapabilities.length} additional AI Worker automation{additionalCapabilities.length !== 1 ? 's' : ''} you can deploy\n            </p>\n          </div>\n\n          <div className=\"space-y-8\">\n            {Object.entries(capabilitiesByCategory).map(([category, capabilities]) => (\n              <div key={category}>\n                <h4 className=\"text-lg font-semibold text-text-primary mb-4 flex items-center gap-2\">\n                  <span className=\"text-highlight\">▸</span> {category}\n                </h4>\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {capabilities.map((uc: any) => (\n                    <Card key={uc.id} className=\"!p-4\" hover>\n                      <h5 className=\"font-semibold text-text-primary mb-1\">{uc.name}</h5>\n                      <p className=\"text-xs text-text-tertiary mb-3 line-clamp-2\">{uc.description}</p>\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"text-text-tertiary\">{uc.time_to_value_days}d setup</span>\n                        <span className={`font-medium ${\n                          uc.implementation_effort === 'low' ? 'text-accent-green' :\n                          uc.implementation_effort === 'medium' ? 'text-accent-blue' :\n                          'text-accent-orange'\n                        }`}>\n                          {uc.implementation_effort} effort\n                        </span>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10152},"src/components/assessment/report/v5/GetStartedPlan.tsx":{"content":"'use client';\n\nimport { MatchedUseCase } from '@/types/types-v3';\nimport InternalAlignment from './InternalAlignment';\nimport DeploymentTimeline from './DeploymentTimeline';\nimport RequiredAssets from './RequiredAssets';\n\ninterface GetStartedPlanProps {\n  matchedUseCases: MatchedUseCase[];\n}\n\nexport default function GetStartedPlan({ matchedUseCases }: GetStartedPlanProps) {\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      {/* Section 1: Introduction */}\n      <section className=\"mb-16\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-6\">\n          Get Started: Your AI Worker Deployment Plan\n        </h2>\n        <p className=\"text-lg text-text-secondary leading-relaxed\">\n          A clear, personalized blueprint for moving from readiness to real results. You've identified where your tech stack can support AI Workers. Now it's time to move from <em className=\"text-text-primary\">readiness</em> to <em className=\"text-text-primary\">deployment</em>. This blueprint shows what to expect during implementation — even if you work with other vendors — so your team can align, prepare, and accelerate securely.\n        </p>\n      </section>\n\n      {/* Section 2: Internal Alignment */}\n      <InternalAlignment />\n\n      {/* Section 3: Deployment Timeline */}\n      <DeploymentTimeline />\n\n      {/* Section 4: Required Assets */}\n      <RequiredAssets />\n    </div>\n  );\n}\n","size_bytes":1411},"src/components/HubSpotForm.tsx":{"content":"'use client';\n\nimport { useEffect } from 'react';\n\ninterface HubSpotFormProps {\n  portalId: string;\n  formId: string;\n  region?: string;\n}\n\nexport default function HubSpotForm({ \n  portalId, \n  formId, \n  region = 'eu1'\n}: HubSpotFormProps) {\n  useEffect(() => {\n    // Load the HubSpot forms script\n    const script = document.createElement('script');\n    script.src = `https://js-${region}.hsforms.net/forms/embed/v2.js`;\n    script.charset = 'utf-8';\n    script.type = 'text/javascript';\n    document.body.appendChild(script);\n\n    // Create the form once the script loads\n    script.addEventListener('load', () => {\n      if ((window as any).hbspt) {\n        (window as any).hbspt.forms.create({\n          region: region,\n          portalId: portalId,\n          formId: formId,\n          target: '#hubspotForm',\n          onFormReady: () => {\n            console.log('HubSpot form ready');\n          },\n          onFormSubmitted: () => {\n            console.log('HubSpot form submitted');\n          }\n        });\n      }\n    });\n\n    return () => {\n      // Cleanup: remove script when component unmounts\n      if (document.body.contains(script)) {\n        document.body.removeChild(script);\n      }\n    };\n  }, [portalId, formId, region]);\n\n  return (\n    <div id=\"hubspotForm\" className=\"hubspot-form-wrapper\" />\n  );\n}\n","size_bytes":1326},"src/styles/hubspot-form.css":{"content":"/* HubSpot Form Styles for Dark Theme */\n.hubspot-form-wrapper {\n  width: 100%;\n}\n\n.hubspot-form-wrapper .hs-form {\n  font-family: inherit;\n}\n\n.hubspot-form-wrapper .hs-form-field {\n  margin-bottom: 1rem;\n}\n\n.hubspot-form-wrapper .hs-form-field label {\n  color: #FBFAF9;\n  font-size: 0.875rem;\n  font-weight: 500;\n  margin-bottom: 0.5rem;\n  display: block;\n}\n\n.hubspot-form-wrapper .hs-input {\n  width: 100%;\n  padding: 0.75rem 1rem;\n  background-color: rgba(255, 255, 255, 0.05);\n  border: 1px solid rgba(130, 216, 149, 0.2);\n  border-radius: 0.5rem;\n  color: #FBFAF9;\n  font-size: 1rem;\n  transition: all 200ms;\n}\n\n.hubspot-form-wrapper .hs-input:focus {\n  outline: none;\n  border-color: #82D895;\n  background-color: rgba(255, 255, 255, 0.08);\n}\n\n.hubspot-form-wrapper .hs-input::placeholder {\n  color: #8A8784;\n}\n\n.hubspot-form-wrapper .hs-error-msgs {\n  list-style: none;\n  padding: 0;\n  margin-top: 0.25rem;\n}\n\n.hubspot-form-wrapper .hs-error-msg {\n  color: #ff6b6b;\n  font-size: 0.75rem;\n}\n\n.hubspot-form-wrapper .hs-submit,\n.hubspot-form-wrapper .hs_submit {\n  margin-top: 0;\n  width: 100% !important;\n  display: block;\n}\n\n.hubspot-form-wrapper .hs-submit .actions {\n  width: 100%;\n}\n\n.hubspot-form-wrapper .hs-button,\n.hubspot-form-wrapper input[type=\"submit\"],\n.hubspot-form-wrapper .hs-button.primary {\n  width: 100% !important;\n  max-width: 100% !important;\n  display: block !important;\n  background-color: #ffffff;\n  color: #000000;\n  padding: 1rem 2rem;\n  border-radius: 0.5rem;\n  font-weight: 600;\n  border: none;\n  cursor: pointer;\n  transition: colors 200ms;\n  font-size: 1rem;\n  text-align: center;\n}\n\n.hubspot-form-wrapper .hs-button:hover {\n  background-color: #f3f4f6;\n}\n\n.hubspot-form-wrapper .hs-button::after {\n  content: '→';\n}\n\n.hubspot-form-wrapper .hs-richtext {\n  color: #8A8784;\n  font-size: 0.875rem;\n  margin-bottom: 1rem;\n}\n\n.hubspot-form-wrapper .hs-richtext a {\n  color: #82D895;\n  text-decoration: underline;\n}\n\n.hubspot-form-wrapper .hs-form-required {\n  color: #82D895;\n}\n\n.hubspot-form-wrapper select.hs-input {\n  appearance: none;\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3E%3Cpath stroke='%238A8784' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3E%3C/svg%3E\");\n  background-position: right 0.5rem center;\n  background-repeat: no-repeat;\n  background-size: 1.5em 1.5em;\n  padding-right: 2.5rem;\n}\n\n.hubspot-form-wrapper textarea.hs-input {\n  min-height: 100px;\n  resize: vertical;\n}\n","size_bytes":2540},"src/lib/services/assessmentService.ts":{"content":"import { db } from \"@/lib/db\";\nimport { assessments, type Assessment, type InsertAssessment } from \"../../../shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function createAssessment(data: Omit<InsertAssessment, 'id' | 'createdAt'>): Promise<Assessment> {\n  const [assessment] = await db\n    .insert(assessments)\n    .values(data)\n    .returning();\n  return assessment;\n}\n\nexport async function getAssessmentById(id: string): Promise<Assessment | undefined> {\n  const [assessment] = await db\n    .select()\n    .from(assessments)\n    .where(eq(assessments.id, id));\n  return assessment || undefined;\n}\n\nexport async function getAllAssessments(): Promise<Assessment[]> {\n  return await db.select().from(assessments).orderBy(assessments.createdAt);\n}\n","size_bytes":764},"src/lib/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../../shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":488},"shared/schema.ts":{"content":"import { pgTable, text, integer, jsonb, timestamp, uuid } from \"drizzle-orm/pg-core\";\n\nexport const assessments = pgTable(\"assessments\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  email: text(\"email\"),\n  techStack: jsonb(\"tech_stack\").notNull(),\n  monthlyTickets: integer(\"monthly_tickets\").notNull(),\n  ticketDistribution: jsonb(\"ticket_distribution\").notNull(),\n  additionalContext: text(\"additional_context\"),\n  reportData: jsonb(\"report_data\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport type Assessment = typeof assessments.$inferSelect;\nexport type InsertAssessment = typeof assessments.$inferInsert;\n","size_bytes":655},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./drizzle\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n});\n","size_bytes":216},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":485},"src/app/api/assessments/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport { createAssessment } from \"@/lib/services/assessmentService\";\n\nexport async function POST(req: NextRequest) {\n  try {\n    const data = await req.json();\n    \n    const assessment = await createAssessment({\n      techStack: data.techStack,\n      monthlyTickets: data.monthlyTickets,\n      ticketDistribution: data.ticketDistribution,\n      additionalContext: data.additionalContext || null,\n      reportData: data.reportData,\n    });\n    \n    return NextResponse.json({ \n      success: true, \n      id: assessment.id \n    });\n  } catch (error) {\n    console.error(\"Error saving assessment:\", error);\n    return NextResponse.json(\n      { success: false, error: \"Failed to save assessment\" },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":790},"src/app/api/assessments/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport { getAssessmentById } from \"@/lib/services/assessmentService\";\n\nexport async function GET(\n  req: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const assessment = await getAssessmentById(id);\n    \n    if (!assessment) {\n      return NextResponse.json(\n        { success: false, error: \"Assessment not found\" },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json({ \n      success: true, \n      data: assessment \n    });\n  } catch (error) {\n    console.error(\"Error fetching assessment:\", error);\n    return NextResponse.json(\n      { success: false, error: \"Failed to fetch assessment\" },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":775},"src/app/email-gate/page.tsx":{"content":"import { Suspense } from 'react';\nimport EmailGateContent from './EmailGateContent';\n\nexport default function EmailGatePage() {\n  return (\n    <Suspense fallback={\n      <div className=\"min-h-screen bg-bg-primary flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-16 w-16 border-4 border-highlight border-t-transparent mb-4\" />\n          <p className=\"text-text-secondary\">Loading...</p>\n        </div>\n      </div>\n    }>\n      <EmailGateContent />\n    </Suspense>\n  );\n}\n","size_bytes":562},"src/app/api/assessments/submit-email/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { createAssessment } from '@/lib/services/assessmentService';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { email, techStack, monthlyTickets, ticketDistribution, additionalContext } = body;\n\n    // Validate required fields\n    if (!email || !techStack || !monthlyTickets || !ticketDistribution) {\n      return NextResponse.json(\n        { success: false, error: 'Missing required fields' },\n        { status: 400 }\n      );\n    }\n\n    // Save assessment with email to database\n    const assessment = await createAssessment({\n      email,\n      techStack,\n      monthlyTickets,\n      ticketDistribution,\n      additionalContext,\n      reportData: body, // Store full assessment data\n    });\n\n    return NextResponse.json({ \n      success: true, \n      id: assessment.id \n    });\n  } catch (error) {\n    console.error('Error saving assessment with email:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to save assessment' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1119},"src/app/api/assessments/[id]/update-email/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/lib/db';\nimport { assessments } from '../../../../../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { email } = await request.json();\n    const { id } = await params;\n\n    if (!email) {\n      return NextResponse.json(\n        { success: false, error: 'Email is required' },\n        { status: 400 }\n      );\n    }\n\n    // Check if assessment exists\n    const [existing] = await db\n      .select()\n      .from(assessments)\n      .where(eq(assessments.id, id))\n      .limit(1);\n\n    if (!existing) {\n      return NextResponse.json(\n        { success: false, error: 'Assessment not found' },\n        { status: 404 }\n      );\n    }\n\n    // Update assessment with email\n    await db\n      .update(assessments)\n      .set({ email })\n      .where(eq(assessments.id, id));\n\n    return NextResponse.json({ \n      success: true,\n      id\n    });\n  } catch (error) {\n    console.error('Error updating assessment email:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to update email' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1252},"src/app/variant/page.tsx":{"content":"'use client';\n\nimport Link from \"next/link\";\nimport Image from \"next/image\";\n\nexport default function VariantLandingPage() {\n  return (\n    <div className=\"min-h-screen bg-bg-primary text-text-primary\">\n      {/* Header */}\n      <header className=\"border-b border-bg-card-alt/20\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <Link href=\"/\">\n            <Image\n              src=\"/images/aiwork-logo.png\"\n              alt=\"ai.work\"\n              width={120}\n              height={30}\n              className=\"h-7 w-auto\"\n            />\n          </Link>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto px-6 py-20\">\n        {/* Hero Section */}\n        <section className=\"text-center mb-20\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-8 leading-tight text-text-primary\">\n            Find out how much ticket volume your team can deflect with AI Workers.\n          </h1>\n          <p className=\"text-text-tertiary text-xl mb-8 max-w-3xl mx-auto leading-relaxed\">\n            In five minutes, you'll receive a personalized report showing which workflows can be automated, how many tickets can be deflected, and what that means for your team's time, cost, and SLAs.\n          </p>\n\n          {/* CTA Button */}\n          <div className=\"max-w-md mx-auto mb-6\">\n            <Link\n              href=\"/assessment\"\n              className=\"w-full bg-white text-black px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-flex items-center justify-center gap-2\"\n            >\n              <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n              Start Assessment\n              <span>→</span>\n            </Link>\n          </div>\n\n          <p className=\"text-sm text-text-tertiary\">\n            5 minutes • Instant results • No data stored or shared\n          </p>\n        </section>\n\n        {/* Value Proposition */}\n        <section className=\"mb-20\">\n          <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-6 text-center text-text-primary\">\n              Turn backlog into bandwidth.\n            </h2>\n            <p className=\"text-lg text-text-secondary mb-4 leading-relaxed\">\n              Every IT team faces growing ticket volume and shrinking resources.\n              The AI Readiness Report highlights where AI Workers can take on repetitive requests—so your experts can focus on higher-value work instead of constant triage.\n            </p>\n            <p className=\"text-lg text-text-primary font-semibold leading-relaxed\">\n              It's not theory. It's your systems, your workflows, and your deflection potential—quantified.\n            </p>\n          </div>\n        </section>\n\n        {/* Your Report Includes */}\n        <section className=\"mb-20\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-12 text-center text-text-primary\">\n            Your Report Includes\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* Ticket Deflection Score */}\n            <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-8 hover:border-bg-card-alt/40 transition-colors\">\n              <div className=\"flex md:block items-start gap-4\">\n                <div className=\"w-12 h-12 bg-bg-card-alt rounded-full flex items-center justify-center flex-shrink-0 md:mb-4\">\n                  <svg\n                    className=\"w-6 h-6 text-text-tertiary\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" strokeWidth=\"2\" />\n                    <path strokeWidth=\"2\" d=\"M12 6v6l4 2\" />\n                  </svg>\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg mb-2 text-text-primary\">\n                    Ticket Deflection Score\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Estimated percentage of requests AI Workers can handle end-to-end.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Opportunity Map */}\n            <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-8 hover:border-bg-card-alt/40 transition-colors\">\n              <div className=\"flex md:block items-start gap-4\">\n                <div className=\"w-12 h-12 bg-highlight/20 rounded-full flex items-center justify-center flex-shrink-0 md:mb-4\">\n                  <svg\n                    className=\"w-6 h-6 text-highlight\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n                  </svg>\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg mb-2 text-text-primary\">\n                    Opportunity Map\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Repetitive workflows ready for automation across IT, HR, and Procurement.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Impact Forecast */}\n            <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-8 hover:border-bg-card-alt/40 transition-colors\">\n              <div className=\"flex md:block items-start gap-4\">\n                <div className=\"w-12 h-12 bg-status-active/20 rounded-full flex items-center justify-center flex-shrink-0 md:mb-4\">\n                  <svg\n                    className=\"w-6 h-6 text-blue-500\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeWidth=\"2\"\n                      d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\"\n                    />\n                  </svg>\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg mb-2 text-text-primary\">\n                    Impact Forecast\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Time and cost savings based on your current ticket load.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Implementation Plan */}\n            <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-8 hover:border-bg-card-alt/40 transition-colors\">\n              <div className=\"flex md:block items-start gap-4\">\n                <div className=\"w-12 h-12 bg-status-warning/20 rounded-full flex items-center justify-center flex-shrink-0 md:mb-4\">\n                  <svg\n                    className=\"w-6 h-6 text-status-warning\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeWidth=\"2\"\n                      d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\"\n                    />\n                  </svg>\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg mb-2 text-text-primary\">\n                    Implementation Plan\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Step-by-step actions to deploy safely and measure ROI.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* What You'll Get */}\n        <section className=\"mb-20\">\n          <div className=\"border border-bg-card-alt/20 bg-bg-card rounded-xl p-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-10 text-center text-text-primary\">\n              What You'll Get\n            </h2>\n            <div className=\"space-y-4 max-w-3xl mx-auto\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 mt-1\">\n                  <svg className=\"w-6 h-6 text-highlight\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                </div>\n                <p className=\"text-lg text-text-secondary\">\n                  A personalized Ticket Deflection Report tailored to your stack\n                </p>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 mt-1\">\n                  <svg className=\"w-6 h-6 text-highlight\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                </div>\n                <p className=\"text-lg text-text-secondary\">\n                  Top categories of tickets AI Workers can resolve automatically\n                </p>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 mt-1\">\n                  <svg className=\"w-6 h-6 text-highlight\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                </div>\n                <p className=\"text-lg text-text-secondary\">\n                  Estimated reduction in backlog and resolution time\n                </p>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 mt-1\">\n                  <svg className=\"w-6 h-6 text-highlight\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                </div>\n                <p className=\"text-lg text-text-secondary\">\n                  A deployment plan to move from pilots to production deflection\n                </p>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 mt-1\">\n                  <svg className=\"w-6 h-6 text-highlight\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                </div>\n                <p className=\"text-lg text-text-secondary\">\n                  Metrics you can share with leadership to prove value\n                </p>\n              </div>\n            </div>\n\n            {/* CTA Button */}\n            <div className=\"max-w-md mx-auto mt-12\">\n              <Link\n                href=\"/assessment\"\n                className=\"w-full bg-white text-black px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-flex items-center justify-center gap-2\"\n              >\n                <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n                Start Your Assessment\n                <span>→</span>\n              </Link>\n            </div>\n\n            <p className=\"text-xs text-text-tertiary mt-6 text-center\">\n              Join IT leaders using AI Workers to deflect tickets and free their teams for strategic work.\n            </p>\n          </div>\n        </section>\n\n      </main>\n\n      {/* Footer */}\n      <footer className=\"border-t border-bg-card-alt/20 py-8\">\n        <div className=\"max-w-7xl mx-auto px-6 text-center text-sm text-text-tertiary\">\n          <p>© {new Date().getFullYear()} ai.work. All rights reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":12214},"src/app/email-gate/EmailGateContent.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nexport default function EmailGateContent() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const [email, setEmail] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [hasAssessment, setHasAssessment] = useState(false);\n  const [assessmentData, setAssessmentData] = useState<any>(null);\n  const [assessmentId, setAssessmentId] = useState<string | null>(null);\n  const [opportunityCount, setOpportunityCount] = useState(0);\n\n  useEffect(() => {\n    // Check if there's an assessment ID in URL params\n    const id = searchParams.get('id');\n    \n    if (id) {\n      // Load assessment from database\n      setAssessmentId(id);\n      fetch(`/api/assessments/${id}`)\n        .then(res => res.json())\n        .then(data => {\n          if (data.success && data.data) {\n            setHasAssessment(true);\n            setAssessmentData(data.data);\n            // Calculate opportunity count from matched use cases\n            const count = data.data.reportData?.matchedUseCases?.length || 0;\n            setOpportunityCount(count);\n          } else {\n            // Fallback to sessionStorage\n            const storedData = sessionStorage.getItem('assessmentData');\n            if (storedData) {\n              setHasAssessment(true);\n              setAssessmentData(JSON.parse(storedData));\n            } else {\n              router.push('/');\n            }\n          }\n        })\n        .catch(() => {\n          // Fallback to sessionStorage on error\n          const storedData = sessionStorage.getItem('assessmentData');\n          if (storedData) {\n            setHasAssessment(true);\n            setAssessmentData(JSON.parse(storedData));\n          } else {\n            router.push('/');\n          }\n        });\n    } else {\n      // Check sessionStorage as fallback\n      const data = sessionStorage.getItem('assessmentData');\n      if (data) {\n        const parsedData = JSON.parse(data);\n        setHasAssessment(true);\n        setAssessmentData(parsedData);\n        // Calculate opportunity count from matched use cases\n        const count = parsedData.matchedUseCases?.length || 0;\n        setOpportunityCount(count);\n      } else {\n        router.push('/');\n      }\n    }\n  }, [router, searchParams]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    console.log('Form submitted, email:', email);\n    console.log('Assessment ID:', assessmentId);\n    console.log('Assessment Data:', assessmentData);\n    \n    if (!email) {\n      console.log('No email provided');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      if (assessmentId) {\n        // Update existing assessment with email\n        console.log('Updating assessment with ID:', assessmentId);\n        const response = await fetch(`/api/assessments/${assessmentId}/update-email`, {\n          method: 'PATCH',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ email }),\n        });\n\n        console.log('Response status:', response.status);\n        const responseData = await response.json();\n        console.log('Response data:', responseData);\n\n        if (!response.ok) {\n          throw new Error(`Failed to submit email: ${response.status} - ${JSON.stringify(responseData)}`);\n        }\n\n        // Clear sessionStorage\n        sessionStorage.removeItem('assessmentData');\n\n        // Redirect to full report\n        console.log('Redirecting to:', `/report/v5/${assessmentId}`);\n        router.push(`/report/v5/${assessmentId}`);\n      } else if (assessmentData) {\n        // Fallback: create new assessment with email\n        console.log('Creating new assessment with email');\n        const response = await fetch('/api/assessments/submit-email', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            email,\n            ...assessmentData,\n          }),\n        });\n\n        console.log('Response status:', response.status);\n        const responseData = await response.json();\n        console.log('Response data:', responseData);\n\n        if (!response.ok) {\n          throw new Error(`Failed to submit email: ${response.status} - ${JSON.stringify(responseData)}`);\n        }\n\n        const { id } = responseData;\n\n        // Clear sessionStorage\n        sessionStorage.removeItem('assessmentData');\n\n        // Redirect to full report\n        console.log('Redirecting to:', `/report/v5/${id}`);\n        router.push(`/report/v5/${id}`);\n      } else {\n        console.log('No assessment ID or data available');\n        throw new Error('No assessment data available');\n      }\n    } catch (error) {\n      console.error('Error submitting email:', error);\n      alert(`Failed to submit email. Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!hasAssessment) {\n    return null; // Will redirect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-bg-primary text-text-primary\">\n      {/* Header */}\n      <header className=\"border-b border-bg-card-alt/20\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <Link href=\"/\">\n            <Image\n              src=\"/images/aiwork-logo.png\"\n              alt=\"ai.work\"\n              width={120}\n              height={30}\n              className=\"h-7 w-auto\"\n            />\n          </Link>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto px-6 py-12\">\n        {/* Report Preview Header - Clear */}\n        <div className=\"mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4 text-text-primary\">\n            AI Worker Readiness Assessment\n          </h1>\n          <p className=\"text-xl text-text-secondary\">\n            Analysis complete for {assessmentData?.techStack?.length || 0} connected tools and{' '}\n            {(assessmentData?.monthlyTickets || 0).toLocaleString()} monthly tickets\n          </p>\n        </div>\n\n        {/* Email Gate Form */}\n        <div className=\"bg-bg-card border border-border rounded-xl p-8 mb-12 max-w-2xl mx-auto\">\n          <h2 className=\"text-2xl font-bold mb-4 text-center\">\n            We've identified {opportunityCount} {opportunityCount === 1 ? 'way' : 'ways'} you can employ an AI Worker to deflect tickets immediately\n          </h2>\n          <p className=\"text-text-secondary mb-6 text-center\">\n            Enter your work email to unlock the complete list with personalized recommendations and ROI calculations.\n          </p>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Work email*\"\n                className=\"w-full px-4 py-3 bg-bg-secondary border border-border rounded-lg text-black placeholder-gray-500 focus:outline-none focus:border-highlight transition-colors\"\n                required\n              />\n            </div>\n            \n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"w-full bg-white text-black px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n              {isSubmitting ? 'Unlocking...' : 'Unlock Full Assessment'}\n              <span>→</span>\n            </button>\n          </form>\n\n          <p className=\"text-xs text-text-tertiary mt-4 text-center\">\n            No sensitive data stored or shared. Responses anonymized for benchmarking.\n          </p>\n        </div>\n\n        {/* Blurred Report Preview */}\n        <div className=\"relative\">\n          {/* Blur Overlay */}\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-bg-primary/50 to-bg-primary z-10 backdrop-blur-md\"></div>\n          \n          {/* Preview Content */}\n          <div className=\"opacity-50 pointer-events-none\">\n            <div className=\"bg-bg-card border border-border rounded-xl p-8 mb-6\">\n              <h2 className=\"text-3xl font-bold mb-6\">Executive Summary</h2>\n              <div className=\"space-y-4\">\n                <div className=\"h-24 bg-bg-secondary rounded-lg\"></div>\n                <div className=\"h-32 bg-bg-secondary rounded-lg\"></div>\n                <div className=\"h-24 bg-bg-secondary rounded-lg\"></div>\n              </div>\n            </div>\n\n            <div className=\"bg-bg-card border border-border rounded-xl p-8 mb-6\">\n              <h2 className=\"text-3xl font-bold mb-6\">What You Can Automate Right Now</h2>\n              <div className=\"space-y-6\">\n                <div className=\"h-64 bg-bg-secondary rounded-lg\"></div>\n                <div className=\"h-64 bg-bg-secondary rounded-lg\"></div>\n                <div className=\"h-64 bg-bg-secondary rounded-lg\"></div>\n              </div>\n            </div>\n\n            <div className=\"bg-bg-card border border-border rounded-xl p-8\">\n              <h2 className=\"text-3xl font-bold mb-6\">Get Started Plan</h2>\n              <div className=\"space-y-4\">\n                <div className=\"h-48 bg-bg-secondary rounded-lg\"></div>\n                <div className=\"h-48 bg-bg-secondary rounded-lg\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9725},"src/components/assessment/report/ROICalculationModal.tsx":{"content":"'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { X, Info } from 'lucide-react';\n\ninterface ROICalculationModalProps {\n  trigger?: React.ReactNode;\n  className?: string;\n}\n\nexport default function ROICalculationModal({ trigger, className = '' }: ROICalculationModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const modalRef = useRef<HTMLDivElement>(null);\n  const triggerRef = useRef<HTMLElement | null>(null);\n  const closeButtonRef = useRef<HTMLButtonElement>(null);\n\n  const handleOpen = (e: React.MouseEvent | React.KeyboardEvent) => {\n    triggerRef.current = e.currentTarget as HTMLElement;\n    setIsOpen(true);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n    // Restore focus to trigger element\n    setTimeout(() => {\n      triggerRef.current?.focus();\n    }, 0);\n  };\n\n  // Handle Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen]);\n\n  // Focus management and trap\n  useEffect(() => {\n    if (!isOpen || !modalRef.current) return;\n\n    // Move focus to close button or modal container\n    const initialFocus = closeButtonRef.current || modalRef.current;\n    initialFocus?.focus();\n\n    // Focus trap\n    const handleTab = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || !modalRef.current) return;\n\n      const focusableElements = modalRef.current.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n\n      // Guard against empty or single-element lists\n      if (focusableElements.length === 0) {\n        e.preventDefault();\n        return;\n      }\n\n      const firstFocusable = focusableElements[0] as HTMLElement;\n      const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n      // Single focusable element - prevent tabbing away\n      if (focusableElements.length === 1) {\n        e.preventDefault();\n        firstFocusable?.focus();\n        return;\n      }\n\n      // Handle backward tab\n      if (e.shiftKey) {\n        if (document.activeElement === firstFocusable) {\n          e.preventDefault();\n          lastFocusable?.focus();\n        }\n      } else {\n        // Handle forward tab\n        if (document.activeElement === lastFocusable) {\n          e.preventDefault();\n          firstFocusable?.focus();\n        }\n      }\n    };\n\n    // Use document listener to catch all tabs\n    document.addEventListener('keydown', handleTab);\n    return () => document.removeEventListener('keydown', handleTab);\n  }, [isOpen]);\n\n  const defaultTrigger = (\n    <button\n      onClick={handleOpen}\n      className=\"inline-flex items-center gap-1 text-accent-green hover:text-accent-green/80 transition-colors\"\n      aria-label=\"How is this calculated?\"\n    >\n      <Info className=\"w-4 h-4\" />\n    </button>\n  );\n\n  if (!isOpen) {\n    return (\n      <span className={className}>\n        {trigger ? (\n          <span onClick={handleOpen} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && handleOpen(e)}>\n            {trigger}\n          </span>\n        ) : (\n          defaultTrigger\n        )}\n      </span>\n    );\n  }\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black/60 z-50 backdrop-blur-sm\"\n        onClick={handleClose}\n        aria-hidden=\"true\"\n        role=\"presentation\"\n      />\n\n      {/* Modal */}\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-title\">\n        <div className=\"flex min-h-full items-center justify-center p-4\">\n          <div\n            ref={modalRef}\n            tabIndex={-1}\n            className=\"relative bg-[#1a1a1a] border border-brand-secondary/20 rounded-lg shadow-xl max-w-3xl w-full max-h-[85vh] overflow-y-auto focus:outline-none\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className=\"sticky top-0 bg-[#1a1a1a] border-b border-brand-secondary/20 px-6 py-4 flex items-center justify-between\">\n              <h2 id=\"modal-title\" className=\"text-2xl font-bold text-text-primary\">How We Calculate Your ROI</h2>\n              <button\n                ref={closeButtonRef}\n                onClick={handleClose}\n                className=\"text-text-secondary hover:text-text-primary transition-colors\"\n                aria-label=\"Close modal\"\n              >\n                <X className=\"w-6 h-6\" />\n              </button>\n            </div>\n\n            {/* Content */}\n            <div className=\"px-6 py-6 space-y-8 text-text-secondary\">\n              {/* The Short Version */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">The Short Version</h3>\n                <ol className=\"list-decimal list-inside space-y-2 text-lg\">\n                  <li>You tell us your <strong className=\"text-text-primary\">ticket volumes</strong> and the <strong className=\"text-text-primary\">average hands-on time</strong> it takes a person to handle them.</li>\n                  <li>Based on your <strong className=\"text-text-primary\">tech stack</strong>, we identify <strong className=\"text-text-primary\">AI Workers</strong> (use cases) that can either fully handle or greatly speed up those tickets.</li>\n                  <li>We <strong className=\"text-text-primary\">avoid double-counting</strong> by only using the remaining tickets in each category as we add use cases.</li>\n                  <li>We translate time saved into two views:\n                    <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                      <li><strong className=\"text-text-primary\">Capacity FTE</strong> (operational headroom)</li>\n                      <li><strong className=\"text-text-primary\">Budget FTE</strong> (realistic financial impact)</li>\n                    </ul>\n                  </li>\n                  <li>We apply <strong className=\"text-text-primary\">confidence</strong> and show <strong className=\"text-text-primary\">Expected / P70 / P90</strong> ranges so you can choose how conservative you want to be.</li>\n                </ol>\n              </section>\n\n              {/* Key Concepts */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">Key Concepts</h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-accent-green/10 border border-accent-green/30 rounded-lg\">\n                    <h4 className=\"font-semibold text-accent-green mb-2\">Capacity FTE vs Budget FTE</h4>\n                    <p className=\"text-lg\"><strong className=\"text-text-primary\">Capacity FTE</strong> shows operational headroom (hours saved converted to an annualized FTE using 2,000 hours/FTE). It's useful for planning workload and SLAs.</p>\n                    <p className=\"text-lg mt-2\"><strong className=\"text-text-primary\">Budget FTE</strong> reflects what typically turns into budget-relevant capacity. We apply a <strong className=\"text-text-primary\">capture rate</strong> (how much saved time becomes truly usable—default 50%) and <strong className=\"text-text-primary\">effective hours per FTE</strong> (realistic annual working hours—default 1,800).</p>\n                  </div>\n\n                  <div className=\"p-4 bg-accent-blue/10 border border-accent-blue/30 rounded-lg\">\n                    <h4 className=\"font-semibold text-accent-blue mb-2\">Confidence Bands</h4>\n                    <p className=\"text-lg\">Not every organization sees the same outcomes. Each worker has a confidence score. We weight savings by confidence and present:</p>\n                    <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1 text-lg\">\n                      <li><strong className=\"text-text-primary\">Expected</strong> (our best estimate)</li>\n                      <li><strong className=\"text-text-primary\">P70</strong> (conservative)</li>\n                      <li><strong className=\"text-text-primary\">P90</strong> (more conservative)</li>\n                    </ul>\n                    <p className=\"text-lg mt-2\">This gives you a range to share with stakeholders depending on your risk tolerance.</p>\n                  </div>\n                </div>\n              </section>\n\n              {/* How Savings Are Calculated */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">How Savings Are Calculated</h3>\n                <div className=\"space-y-3 text-lg\">\n                  <p>For each matching AI Worker:</p>\n                  <ul className=\"list-disc list-inside ml-4 space-y-2\">\n                    <li>We determine how many tickets it can handle from the <strong className=\"text-text-primary\">remaining pool</strong> in that category.</li>\n                    <li>We estimate <strong className=\"text-text-primary\">time saved per ticket</strong>:\n                      <ul className=\"list-disc list-inside ml-6 mt-1 space-y-1\">\n                        <li>If the task is fully automated: the <strong className=\"text-text-primary\">full hands-on time</strong> is saved.</li>\n                        <li>If it still needs a quick review/approval: we save the <strong className=\"text-text-primary\">difference</strong> between the original time and the short micro-touch (typically ~5 minutes).</li>\n                      </ul>\n                    </li>\n                    <li>If a small share of tickets still require a person (approvals/exceptions), we reduce the savings for those.</li>\n                  </ul>\n                  <p className=\"mt-3\">We add up the hours across all workers to get <strong className=\"text-text-primary\">total hours saved per month</strong>. If totals ever exceed your overall ticket count, we automatically <strong className=\"text-text-primary\">cap and scale</strong> the result so it stays realistic.</p>\n                </div>\n              </section>\n\n              {/* Guardrails */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">Guardrails That Keep Results Honest</h3>\n                <div className=\"grid md:grid-cols-2 gap-3\">\n                  <div className=\"p-3 bg-bg-primary/50 rounded border border-brand-secondary/10\">\n                    <span className=\"text-accent-green font-medium\">✓</span> No double-counting within a category\n                  </div>\n                  <div className=\"p-3 bg-bg-primary/50 rounded border border-brand-secondary/10\">\n                    <span className=\"text-accent-green font-medium\">✓</span> Caps to prevent saving more tickets than you have\n                  </div>\n                  <div className=\"p-3 bg-bg-primary/50 rounded border border-brand-secondary/10\">\n                    <span className=\"text-accent-green font-medium\">✓</span> Confidence-weighted outcomes\n                  </div>\n                  <div className=\"p-3 bg-bg-primary/50 rounded border border-brand-secondary/10\">\n                    <span className=\"text-accent-green font-medium\">✓</span> Conservative defaults for micro-touch and capture rate\n                  </div>\n                </div>\n              </section>\n\n              {/* FAQs */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">Frequently Asked Questions</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-text-primary mb-1\">Why two FTE numbers?</h4>\n                    <p className=\"text-lg\">Capacity FTE describes operational headroom. Budget FTE is what usually translates into budget or hiring decisions.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-text-primary mb-1\">Why not just divide by 2,000 and be done?</h4>\n                    <p className=\"text-lg\">Because saved minutes rarely convert 1:1 into money. Capture rate and effective hours reflect how teams actually work.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-text-primary mb-1\">Our tickets still need approvals—does that inflate savings?</h4>\n                    <p className=\"text-lg\">No. If a worker still needs a quick human touch, we subtract that micro-touch from the saved time.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-text-primary mb-1\">Where do the worker confidence scores come from?</h4>\n                    <p className=\"text-lg\">From real-world maturity of the automation and how well it fits your stack. We weight savings by those scores.</p>\n                  </div>\n                </div>\n              </section>\n            </div>\n\n            {/* Footer */}\n            <div className=\"sticky bottom-0 bg-[#1a1a1a] border-t border-brand-secondary/20 px-6 py-4\">\n              <button\n                onClick={handleClose}\n                className=\"w-full bg-accent-green text-black font-medium py-3 px-6 rounded-lg hover:bg-accent-green/90 transition-colors\"\n              >\n                Got it\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":13459},"archive/reports/components/v4/ExpectedOutcomes.tsx":{"content":"import Card from '@/components/ui/Card';\nimport { ROIResult } from '@/types/types-v3';\nimport { formatLargeNumber } from '@/lib/utils/formatNumber';\n\ninterface ExpectedOutcomesProps {\n  roiResult: ROIResult;\n  totalMonthlyTickets: number;\n}\n\nexport default function ExpectedOutcomes({ \n  roiResult, \n  totalMonthlyTickets \n}: ExpectedOutcomesProps) {\n  \n  // Calculate additional metrics\n  const ticketDeflectionRate = totalMonthlyTickets > 0 \n    ? (roiResult.automatable_tickets / totalMonthlyTickets) * 100 \n    : 0;\n  const avgHoursPerTicket = roiResult.automatable_tickets > 0 \n    ? roiResult.total_hours_saved / roiResult.automatable_tickets \n    : 0;\n  const monthlyValue = roiResult.annual_value_usd / 12;\n\n  // Learning curve projection (conservative 15% improvement over 6 months)\n  const month6Multiplier = 1.15;\n  const projectedMonth6Tickets = Math.round(roiResult.automatable_tickets * month6Multiplier);\n  \n  // Cap at total monthly tickets (can't automate more than 100%)\n  const month6Tickets = Math.min(projectedMonth6Tickets, totalMonthlyTickets);\n  \n  // Calculate actual improvement ratio achieved (may be less than 1.15 if capped)\n  // Guard against division by zero\n  const actualMultiplier = roiResult.automatable_tickets > 0 \n    ? month6Tickets / roiResult.automatable_tickets \n    : 0;\n  \n  // Apply proportional improvements to hours, FTE, and value\n  const month6Hours = roiResult.total_hours_saved * actualMultiplier;\n  const month6FTE = roiResult.fte_equivalent * actualMultiplier;\n  const month6Value = roiResult.annual_value_usd * actualMultiplier;\n\n  const getIconSvg = (iconType: string) => {\n    const icons: Record<string, JSX.Element> = {\n      target: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      clock: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      currency: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      lightning: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n        </svg>\n      ),\n      graduation: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 14l9-5-9-5-9 5 9 5z\" />\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z\" />\n        </svg>\n      ),\n      smile: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      chart: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n      ),\n      lock: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n        </svg>\n      ),\n      trending: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n        </svg>\n      ),\n      refresh: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n        </svg>\n      )\n    };\n    return icons[iconType] || null;\n  };\n\n  const outcomes = [\n    {\n      icon: 'target',\n      title: 'Ticket Deflection',\n      baseline: {\n        label: 'Month 1',\n        value: `${roiResult.automatable_tickets.toLocaleString()}`,\n        subtitle: `${ticketDeflectionRate.toFixed(1)}% of total volume`\n      },\n      improved: {\n        label: 'Month 6',\n        value: `${month6Tickets.toLocaleString()}`,\n        subtitle: totalMonthlyTickets > 0 \n          ? `${(month6Tickets / totalMonthlyTickets * 100).toFixed(1)}% of total volume`\n          : '0.0% of total volume'\n      },\n      description: 'Tickets handled autonomously without human intervention'\n    },\n    {\n      icon: 'clock',\n      title: 'Time Savings',\n      baseline: {\n        label: 'Month 1',\n        value: `${Math.round(roiResult.total_hours_saved).toLocaleString()} hrs`,\n        subtitle: `${roiResult.fte_equivalent.toFixed(1)} FTE capacity`\n      },\n      improved: {\n        label: 'Month 6',\n        value: `${Math.round(month6Hours).toLocaleString()} hrs`,\n        subtitle: `${month6FTE.toFixed(1)} FTE capacity`\n      },\n      description: 'IT team hours redirected from routine work to strategic initiatives'\n    },\n    {\n      icon: 'currency',\n      title: 'Cost Savings',\n      baseline: {\n        label: 'Monthly',\n        value: formatLargeNumber(monthlyValue, '$'),\n        subtitle: 'Labor cost savings'\n      },\n      improved: {\n        label: 'Annual',\n        value: formatLargeNumber(month6Value, '$'),\n        subtitle: 'With learning curve'\n      },\n      description: 'Fully-loaded labor cost at $100K per FTE'\n    },\n    {\n      icon: 'lightning',\n      title: 'Resolution Speed',\n      baseline: {\n        label: 'Current Avg',\n        value: `${Math.round(avgHoursPerTicket * 60).toLocaleString()} min`,\n        subtitle: 'Manual processing'\n      },\n      improved: {\n        label: 'With AI Workers',\n        value: '< 5 min',\n        subtitle: '70-90% faster'\n      },\n      description: 'Average time from ticket creation to resolution'\n    }\n  ];\n\n  const qualitativeOutcomes = [\n    {\n      icon: 'graduation',\n      title: 'Continuous Learning',\n      description: 'AI Workers improve accuracy over time by learning from your unique policies, edge cases, and ticket patterns'\n    },\n    {\n      icon: 'smile',\n      title: 'Employee Satisfaction',\n      description: 'End users get faster responses, IT team focuses on meaningful work instead of repetitive tickets'\n    },\n    {\n      icon: 'chart',\n      title: 'Operational Insights',\n      description: 'Real-time dashboards showing automation rates, ticket patterns, and opportunities for optimization'\n    },\n    {\n      icon: 'lock',\n      title: 'Compliance & Audit',\n      description: 'Complete audit trails for all automated actions, ensuring compliance and security governance'\n    },\n    {\n      icon: 'trending',\n      title: 'Scalable Operations',\n      description: 'Handle ticket volume growth without proportional headcount increases'\n    },\n    {\n      icon: 'refresh',\n      title: 'Reduced Context Switching',\n      description: 'IT team interrupted less frequently, can focus on project work and strategic initiatives'\n    }\n  ];\n\n  return (\n    <div className=\"max-w-6xl mx-auto mb-16\">\n      <div className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          What to Expect\n        </h2>\n        <p className=\"text-text-secondary max-w-3xl\">\n          Projected results from deploying AI Workers with your {totalMonthlyTickets.toLocaleString()} monthly tickets\n        </p>\n      </div>\n\n      {/* Quantitative Outcomes */}\n      <div className=\"mb-12\">\n        <h3 className=\"text-xl font-bold text-text-primary mb-6\">\n          Measurable Impact\n        </h3>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {outcomes.map((outcome, index) => (\n            <Card key={index}>\n              <div className=\"flex items-start gap-4 mb-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center text-accent-blue\">\n                  {getIconSvg(outcome.icon)}\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"text-lg font-bold text-text-primary mb-1\">\n                    {outcome.title}\n                  </h4>\n                  <p className=\"text-sm text-text-secondary\">\n                    {outcome.description}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 p-4 bg-bg-primary rounded-lg\">\n                <div>\n                  <div className=\"text-xs text-text-tertiary mb-1\">\n                    {outcome.baseline.label}\n                  </div>\n                  <div className=\"text-2xl font-bold text-text-primary mb-1\">\n                    {outcome.baseline.value}\n                  </div>\n                  <div className=\"text-xs text-text-tertiary\">\n                    {outcome.baseline.subtitle}\n                  </div>\n                </div>\n                <div className=\"border-l border-brand-secondary/20 pl-4\">\n                  <div className=\"text-xs text-accent-green mb-1\">\n                    {outcome.improved.label}\n                  </div>\n                  <div className=\"text-2xl font-bold text-accent-green mb-1\">\n                    {outcome.improved.value}\n                  </div>\n                  <div className=\"text-xs text-text-tertiary\">\n                    {outcome.improved.subtitle}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Qualitative Outcomes */}\n      <div className=\"mb-12\">\n        <h3 className=\"text-xl font-bold text-text-primary mb-6\">\n          Strategic Benefits\n        </h3>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {qualitativeOutcomes.map((outcome, index) => (\n            <Card key={index} className=\"text-center\">\n              <div className=\"flex justify-center mb-3\">\n                <div className=\"w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center text-accent-blue\">\n                  {getIconSvg(outcome.icon)}\n                </div>\n              </div>\n              <h4 className=\"text-base font-bold text-text-primary mb-2\">\n                {outcome.title}\n              </h4>\n              <p className=\"text-sm text-text-secondary\">\n                {outcome.description}\n              </p>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Learning Curve Explanation */}\n      <Card className=\"bg-accent-blue/5 border-accent-blue/20\">\n        <div className=\"flex items-start gap-4\">\n          <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-accent-blue\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n            </svg>\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"text-lg font-bold text-text-primary mb-2\">\n              Why Performance Improves Over Time\n            </h4>\n            <p className=\"text-sm text-text-secondary mb-3\">\n              Unlike traditional automation with static rules, AI Workers continuously learn from every ticket they process:\n            </p>\n            <ul className=\"space-y-2 text-sm text-text-secondary\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Policy learning:</strong> Understand nuances in approval patterns and access policies</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Edge case handling:</strong> Build knowledge of exceptions and special scenarios</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Ticket pattern recognition:</strong> Better categorization and routing over time</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Context awareness:</strong> Learn relationships between users, teams, and resources</span>\n              </li>\n            </ul>\n            <p className=\"text-xs text-text-tertiary mt-3\">\n              Conservative estimate: 15% improvement by Month 6. Top performers see 30-40% improvement by Month 12.\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      {/* Confidence Disclaimer */}\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-sm text-text-tertiary\">\n          Outcomes based on {roiResult.confidence}% confidence score using your actual tech stack and ticket distribution.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14051},"archive/reports/components/BestFitUseCases-v3.tsx":{"content":"import Card from '@/components/ui/Card';\nimport StatusPill from '@/components/ui/StatusPill';\nimport { MatchedUseCase } from '@/types/types-v3';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface BestFitUseCasesProps {\n  matchedUseCases: MatchedUseCase[];\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport default function BestFitUseCases({ matchedUseCases, feasibilityResults }: BestFitUseCasesProps) {\n  \n  // Group matched use cases by priority\n  const immediateUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'immediate')\n    .sort((a, b) => b.fit_score - a.fit_score);\n  \n  const quickWinUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'quick_win')\n    .sort((a, b) => b.fit_score - a.fit_score);\n  \n  const futureUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'future')\n    .sort((a, b) => b.fit_score - a.fit_score);\n\n  // Get ALL enabled use cases\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n  \n  // Find additional enabled capabilities not in matched use cases\n  const matchedIds = new Set(matchedUseCases.map(uc => uc.use_case_id));\n  const additionalCapabilities: any[] = [];\n  \n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    // Filter out Meetings & Collaboration Licenses category\n    if (uc.category === 'Meetings & Collaboration Licenses') {\n      return;\n    }\n    \n    if (enabledUseCaseIds.has(uc.id) && !matchedIds.has(uc.id)) {\n      additionalCapabilities.push(uc);\n    }\n  });\n  \n  // Group additional capabilities by category\n  const capabilitiesByCategory: Record<string, any[]> = {};\n  additionalCapabilities.forEach(uc => {\n    if (!capabilitiesByCategory[uc.category]) {\n      capabilitiesByCategory[uc.category] = [];\n    }\n    capabilitiesByCategory[uc.category].push(uc);\n  });\n\n  if (matchedUseCases.length === 0 && additionalCapabilities.length === 0) {\n    return null;\n  }\n\n  const renderUseCaseGrid = (useCases: MatchedUseCase[]) => {\n    if (useCases.length === 0) return null;\n\n    return (\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {useCases.map(useCase => (\n          <Card key={useCase.use_case_id} hover>\n            <div className=\"mb-3\">\n              <h4 className=\"text-lg font-bold text-text-primary mb-1\">\n                {useCase.name}\n              </h4>\n              <span className=\"text-sm text-text-tertiary\">{useCase.category}</span>\n            </div>\n\n            <p className=\"text-sm text-text-secondary mb-4 line-clamp-2\">\n              {useCase.description}\n            </p>\n\n            {/* Quick Metrics */}\n            <div className=\"grid grid-cols-3 gap-3 mb-4\">\n              <div>\n                <div className=\"text-lg font-bold text-accent-green\">\n                  {useCase.estimated_monthly_deflection.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Tickets</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-accent-blue\">\n                  {Math.round(useCase.estimated_hours_saved).toLocaleString()}h\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Saved</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-text-primary\">\n                  {useCase.fit_score}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Fit Score</div>\n              </div>\n            </div>\n\n            {/* Implementation Info */}\n            <div className=\"flex items-center justify-between text-xs text-text-tertiary\">\n              <span>{useCase.time_to_value_days} day setup</span>\n              <span className={`font-semibold ${\n                useCase.implementation_effort === 'low' ? 'text-accent-green' :\n                useCase.implementation_effort === 'medium' ? 'text-accent-blue' :\n                'text-accent-orange'\n              }`}>\n                {useCase.implementation_effort} effort\n              </span>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto mb-16\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          Your AI Worker Deployment Plan\n        </h2>\n        <p className=\"text-text-secondary\">\n          Organized by when to deploy, based on setup complexity, time-to-value, and business impact.\n        </p>\n      </div>\n\n      {/* Immediate Deployment (Week 1) */}\n      {immediateUseCases.length > 0 && (\n        <div className=\"mb-12\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"flex-shrink-0 w-12 h-12 bg-accent-green/20 rounded-full flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-accent-green\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary\">\n                Deploy Immediately (Week 1)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                {immediateUseCases.length} AI Worker{immediateUseCases.length !== 1 ? 's' : ''} ready for immediate deployment\n              </p>\n            </div>\n          </div>\n          {renderUseCaseGrid(immediateUseCases)}\n        </div>\n      )}\n\n      {/* Quick Wins (Month 1-2) */}\n      {quickWinUseCases.length > 0 && (\n        <div className=\"mb-12\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-accent-blue\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary\">\n                Quick Wins (Month 1-2)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                {quickWinUseCases.length} AI Worker{quickWinUseCases.length !== 1 ? 's' : ''} for near-term deployment\n              </p>\n            </div>\n          </div>\n          {renderUseCaseGrid(quickWinUseCases)}\n        </div>\n      )}\n\n      {/* Future Opportunities (Month 3+) */}\n      {futureUseCases.length > 0 && (\n        <div>\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"flex-shrink-0 w-12 h-12 bg-accent-orange/20 rounded-full flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-accent-orange\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary\">\n                📅 Strategic Opportunities (Month 3+)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                {futureUseCases.length} AI Worker{futureUseCases.length !== 1 ? 's' : ''} for longer-term planning\n              </p>\n            </div>\n          </div>\n          {renderUseCaseGrid(futureUseCases)}\n        </div>\n      )}\n\n      {/* Additional Capabilities */}\n      {additionalCapabilities.length > 0 && (\n        <div className=\"mt-16\">\n          <div className=\"mb-8\">\n            <h3 className=\"text-2xl font-bold text-text-primary mb-2\">\n              More Available Capabilities\n            </h3>\n            <p className=\"text-text-secondary\">\n              {additionalCapabilities.length} additional AI Worker automation{additionalCapabilities.length !== 1 ? 's' : ''} you can deploy\n            </p>\n          </div>\n\n          <div className=\"space-y-8\">\n            {Object.entries(capabilitiesByCategory).map(([category, capabilities]) => (\n              <div key={category}>\n                <h4 className=\"text-lg font-semibold text-text-primary mb-4 flex items-center gap-2\">\n                  <span className=\"text-highlight\">▸</span> {category}\n                </h4>\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {capabilities.map((uc: any) => (\n                    <Card key={uc.id} className=\"!p-4\" hover>\n                      <h5 className=\"font-semibold text-text-primary mb-1\">{uc.name}</h5>\n                      <p className=\"text-xs text-text-tertiary mb-3 line-clamp-2\">{uc.description}</p>\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"text-text-tertiary\">{uc.time_to_value_days}d setup</span>\n                        <span className={`font-medium ${\n                          uc.implementation_effort === 'low' ? 'text-accent-green' :\n                          uc.implementation_effort === 'medium' ? 'text-accent-blue' :\n                          'text-accent-orange'\n                        }`}>\n                          {uc.implementation_effort} effort\n                        </span>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10152},"archive/reports/components/v4/GapAnalysis.tsx":{"content":"'use client';\n\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport Card from '@/components/ui/Card';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface GapAnalysisProps {\n  feasibilityResults: FeasibilityResult[];\n}\n\ninterface UseCaseInfo {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n}\n\nexport default function GapAnalysis({ feasibilityResults }: GapAnalysisProps) {\n  return (\n    <section className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-4\">\n        More Available Capabilities\n      </h2>\n      <p className=\"text-xl text-text-tertiary mb-12\">\n        Additional AI Worker capabilities available through your current tech stack\n      </p>\n\n      <div className=\"space-y-8\">\n        {feasibilityResults.map((result, idx) => {\n          // Get ALL use cases enabled by this tool from FeasibilityEngine\n          const enabledUseCaseIds = new Set(result.enabled_use_cases);\n          \n          // Build comprehensive list of use cases\n          const allUseCasesForTool: UseCaseInfo[] = [];\n          \n          (useCaseMappings as any).use_cases.forEach((uc: any) => {\n            if (enabledUseCaseIds.has(uc.id)) {\n              allUseCasesForTool.push({\n                id: uc.id,\n                name: uc.name,\n                category: uc.category,\n                description: uc.description\n              });\n            }\n          });\n\n          // Sort alphabetically\n          allUseCasesForTool.sort((a, b) => a.name.localeCompare(b.name));\n\n          return (\n            <Card key={idx} className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n              <div className=\"flex items-start justify-between mb-6\">\n                <h3 className=\"text-2xl font-bold text-text-primary\">{result.tool}</h3>\n                <span className=\"px-3 py-1 rounded-full bg-highlight/20 text-highlight text-sm font-medium\">\n                  {Math.round(result.confidence * 100)}% Confidence\n                </span>\n              </div>\n\n              {/* Always show APIs if available */}\n              {result.available_apis.length > 0 && (\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center gap-2\">\n                    <svg className=\"w-5 h-5 text-highlight\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                    Available APIs\n                  </h4>\n                  <ul className=\"space-y-2\">\n                    {result.available_apis.map((api, i) => (\n                      <li key={i} className=\"text-text-tertiary pl-6\">\n                        • {api}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {/* Show ALL AI Worker actions this tool enables */}\n              {allUseCasesForTool.length > 0 && (\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center gap-2\">\n                    <svg className=\"w-5 h-5 text-highlight\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                    AI Worker Actions Available ({allUseCasesForTool.length})\n                  </h4>\n                  <div className=\"grid md:grid-cols-2 gap-2\">\n                    {allUseCasesForTool.map((uc) => (\n                      <div key={uc.id} className=\"text-text-tertiary pl-6\">\n                        • <span className=\"font-medium\">{uc.name}</span>\n                        <span className=\"text-text-tertiary/60 text-sm ml-2\">({uc.category})</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </Card>\n          );\n        })}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4115},"archive/reports/components/v4/ROIBreakdown.tsx":{"content":"'use client';\n\nimport { ROIResult } from '@/lib/engines/roi-calculator';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport Card from '@/components/ui/Card';\nimport useCaseMappings from '@/data/use-case-mappings.json';\nimport { formatLargeNumber } from '@/lib/utils/formatNumber';\n\ninterface ROIBreakdownProps {\n  roiResult: ROIResult;\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport default function ROIBreakdown({ roiResult, feasibilityResults }: ROIBreakdownProps) {\n  // Get all enabled use case IDs\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n\n  // Get categories from matched use cases (actual impact)\n  const matchedCategories = new Set(\n    roiResult.breakdown_by_category.map(cat => cat.category)\n  );\n\n  // Find additional categories with enabled use cases\n  const additionalCategories: Record<string, {\n    category: string;\n    useCases: any[];\n    estimatedTickets: number;\n    estimatedHours: number;\n  }> = {};\n\n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    // Filter out Meetings & Collaboration Licenses category\n    if (uc.category === 'Meetings & Collaboration Licenses') {\n      return;\n    }\n    \n    if (enabledUseCaseIds.has(uc.id) && !matchedCategories.has(uc.category)) {\n      if (!additionalCategories[uc.category]) {\n        additionalCategories[uc.category] = {\n          category: uc.category,\n          useCases: [],\n          estimatedTickets: 0,\n          estimatedHours: 0\n        };\n      }\n      additionalCategories[uc.category].useCases.push(uc);\n      // Estimate based on typical values (assuming 1000 ticket baseline)\n      const estTickets = Math.round((uc.typical_volume_pct || 0.05) * 1000 * (uc.automation_rate || 0.8));\n      const estHours = estTickets * (uc.typical_ttr_hours || 1.5);\n      additionalCategories[uc.category].estimatedTickets += estTickets;\n      additionalCategories[uc.category].estimatedHours += estHours;\n    }\n  });\n  return (\n    <section className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-4\">\n        ROI Breakdown\n      </h2>\n      <p className=\"text-xl text-text-tertiary mb-12\">\n        Detailed impact analysis by category\n      </p>\n\n      {/* Summary Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">Automatable Tickets</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {roiResult.automatable_tickets.toLocaleString()}\n            <span className=\"text-lg text-text-tertiary ml-2\">\n              ({roiResult.automatable_pct.toFixed(1)}%)\n            </span>\n          </div>\n        </Card>\n\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">Hours Saved/Month</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {Math.round(roiResult.total_hours_saved).toLocaleString()}\n          </div>\n        </Card>\n\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">FTE Equivalent</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {roiResult.fte_equivalent.toFixed(1)}\n          </div>\n        </Card>\n\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">Annual Value</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {formatLargeNumber(roiResult.annual_value_usd, '$')}\n          </div>\n        </Card>\n      </div>\n\n      {/* Category Breakdown */}\n      <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n        <h3 className=\"text-2xl font-bold text-text-primary mb-6\">\n          Impact by Category\n        </h3>\n\n        {/* Matched Categories with Actual Impact */}\n        <div className=\"space-y-6 mb-8\">\n          {roiResult.breakdown_by_category\n            .filter(cat => cat.category !== 'Meetings & Collaboration Licenses')\n            .map((category, idx) => (\n            <div key={idx} className=\"border-b border-bg-card-alt/20 pb-6\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div>\n                  <h4 className=\"text-lg font-semibold text-text-primary\">\n                    {category.category}\n                  </h4>\n                  <p className=\"text-sm text-text-tertiary\">\n                    {category.tickets.toLocaleString()} tickets/month automated\n                  </p>\n                </div>\n                <span className=\"px-3 py-1 rounded-full bg-highlight/20 text-highlight text-sm font-medium\">\n                  {Math.round(category.confidence * 100)}% confidence\n                </span>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"text-2xl font-bold text-highlight\">\n                    {Math.round(category.hours_saved).toLocaleString()} hours/month\n                  </div>\n                  <div className=\"text-sm text-text-tertiary\">\n                    ~{((category.hours_saved * 12) / 2000).toFixed(1)} FTE saved annually\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Additional Categories with Estimated Potential */}\n        {Object.keys(additionalCategories).length > 0 && (\n          <>\n            <div className=\"border-t border-bg-card-alt/20 pt-8 mb-6\">\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">\n                Additional Automation Potential\n              </h4>\n              <p className=\"text-sm text-text-tertiary\">\n                More categories you can automate with your current capabilities\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {Object.values(additionalCategories).map((cat, idx) => (\n                <div key={idx} className=\"border-b border-bg-card-alt/20 last:border-0 pb-6 last:pb-0\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <h5 className=\"text-lg font-semibold text-text-primary\">\n                        {cat.category}\n                      </h5>\n                      <p className=\"text-sm text-text-tertiary\">\n                        {cat.useCases.length} AI Worker{cat.useCases.length !== 1 ? 's' : ''} available\n                      </p>\n                    </div>\n                    <span className=\"px-3 py-1 rounded-full bg-accent-blue/20 text-accent-blue text-sm font-medium\">\n                      Estimated\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"text-2xl font-bold text-accent-blue\">\n                        ~{Math.round(cat.estimatedHours)} hours/month\n                      </div>\n                      <div className=\"text-sm text-text-tertiary\">\n                        Potential savings based on typical use patterns\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </>\n        )}\n\n        <div className=\"mt-8 p-4 bg-bg-card-alt/30 rounded-lg\">\n          <p className=\"text-sm text-text-tertiary\">\n            <span className=\"font-semibold text-text-primary\">Overall Confidence: {roiResult.confidence}%</span>\n            {' '}— Based on weighted average of use case confidence scores and your ticket volumes\n          </p>\n        </div>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":7879},"archive/reports/components/v4/BestFitUseCases.tsx":{"content":"import Card from '@/components/ui/Card';\nimport StatusPill from '@/components/ui/StatusPill';\nimport { MatchedUseCase } from '@/types/types-v3';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface BestFitUseCasesProps {\n  matchedUseCases: MatchedUseCase[];\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport default function BestFitUseCases({ matchedUseCases, feasibilityResults }: BestFitUseCasesProps) {\n  \n  // Group matched use cases by priority\n  const immediateUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'immediate')\n    .sort((a, b) => b.fit_score - a.fit_score);\n  \n  const quickWinUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'quick_win')\n    .sort((a, b) => b.fit_score - a.fit_score);\n  \n  const futureUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'future')\n    .sort((a, b) => b.fit_score - a.fit_score);\n\n  // Get ALL enabled use cases\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n  \n  // Find additional enabled capabilities not in matched use cases\n  const matchedIds = new Set(matchedUseCases.map(uc => uc.use_case_id));\n  const additionalCapabilities: any[] = [];\n  \n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    // Filter out Meetings & Collaboration Licenses category\n    if (uc.category === 'Meetings & Collaboration Licenses') {\n      return;\n    }\n    \n    if (enabledUseCaseIds.has(uc.id) && !matchedIds.has(uc.id)) {\n      additionalCapabilities.push(uc);\n    }\n  });\n  \n  // Group additional capabilities by category\n  const capabilitiesByCategory: Record<string, any[]> = {};\n  additionalCapabilities.forEach(uc => {\n    if (!capabilitiesByCategory[uc.category]) {\n      capabilitiesByCategory[uc.category] = [];\n    }\n    capabilitiesByCategory[uc.category].push(uc);\n  });\n\n  if (matchedUseCases.length === 0 && additionalCapabilities.length === 0) {\n    return null;\n  }\n\n  const renderUseCaseGrid = (useCases: MatchedUseCase[]) => {\n    if (useCases.length === 0) return null;\n\n    return (\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {useCases.map(useCase => (\n          <Card key={useCase.use_case_id} hover>\n            <div className=\"mb-3\">\n              <h4 className=\"text-lg font-bold text-text-primary mb-1\">\n                {useCase.name}\n              </h4>\n              <span className=\"text-sm text-text-tertiary\">{useCase.category}</span>\n            </div>\n\n            <p className=\"text-sm text-text-secondary mb-4 line-clamp-2\">\n              {useCase.description}\n            </p>\n\n            {/* Quick Metrics */}\n            <div className=\"grid grid-cols-3 gap-3 mb-4\">\n              <div>\n                <div className=\"text-lg font-bold text-accent-green\">\n                  {useCase.estimated_monthly_deflection.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Tickets</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-accent-blue\">\n                  {Math.round(useCase.estimated_hours_saved).toLocaleString()}h\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Saved</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-text-primary\">\n                  {useCase.fit_score}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Fit Score</div>\n              </div>\n            </div>\n\n            {/* Implementation Info */}\n            <div className=\"flex items-center justify-between text-xs text-text-tertiary\">\n              <span>{useCase.time_to_value_days} day setup</span>\n              <span className={`font-semibold ${\n                useCase.implementation_effort === 'low' ? 'text-accent-green' :\n                useCase.implementation_effort === 'medium' ? 'text-accent-blue' :\n                'text-accent-orange'\n              }`}>\n                {useCase.implementation_effort} effort\n              </span>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto mb-16\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          Your AI Worker Deployment Plan\n        </h2>\n        <p className=\"text-text-secondary\">\n          Organized by when to deploy, based on setup complexity, time-to-value, and business impact.\n        </p>\n      </div>\n\n      {/* Immediate Deployment (Week 1) */}\n      {immediateUseCases.length > 0 && (\n        <div className=\"mb-12\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"flex-shrink-0 w-12 h-12 bg-accent-green/20 rounded-full flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-accent-green\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary\">\n                Deploy Immediately (Week 1)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                {immediateUseCases.length} AI Worker{immediateUseCases.length !== 1 ? 's' : ''} ready for immediate deployment\n              </p>\n            </div>\n          </div>\n          {renderUseCaseGrid(immediateUseCases)}\n        </div>\n      )}\n\n      {/* Quick Wins (Month 1-2) */}\n      {quickWinUseCases.length > 0 && (\n        <div className=\"mb-12\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-accent-blue\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary\">\n                Quick Wins (Month 1-2)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                {quickWinUseCases.length} AI Worker{quickWinUseCases.length !== 1 ? 's' : ''} for near-term deployment\n              </p>\n            </div>\n          </div>\n          {renderUseCaseGrid(quickWinUseCases)}\n        </div>\n      )}\n\n      {/* Future Opportunities (Month 3+) */}\n      {futureUseCases.length > 0 && (\n        <div>\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"flex-shrink-0 w-12 h-12 bg-accent-orange/20 rounded-full flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-accent-orange\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary\">\n                📅 Strategic Opportunities (Month 3+)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                {futureUseCases.length} AI Worker{futureUseCases.length !== 1 ? 's' : ''} for longer-term planning\n              </p>\n            </div>\n          </div>\n          {renderUseCaseGrid(futureUseCases)}\n        </div>\n      )}\n\n      {/* Additional Capabilities */}\n      {additionalCapabilities.length > 0 && (\n        <div className=\"mt-16\">\n          <div className=\"mb-8\">\n            <h3 className=\"text-2xl font-bold text-text-primary mb-2\">\n              More Available Capabilities\n            </h3>\n            <p className=\"text-text-secondary\">\n              {additionalCapabilities.length} additional AI Worker automation{additionalCapabilities.length !== 1 ? 's' : ''} you can deploy\n            </p>\n          </div>\n\n          <div className=\"space-y-8\">\n            {Object.entries(capabilitiesByCategory).map(([category, capabilities]) => (\n              <div key={category}>\n                <h4 className=\"text-lg font-semibold text-text-primary mb-4 flex items-center gap-2\">\n                  <span className=\"text-highlight\">▸</span> {category}\n                </h4>\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {capabilities.map((uc: any) => (\n                    <Card key={uc.id} className=\"!p-4\" hover>\n                      <h5 className=\"font-semibold text-text-primary mb-1\">{uc.name}</h5>\n                      <p className=\"text-xs text-text-tertiary mb-3 line-clamp-2\">{uc.description}</p>\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"text-text-tertiary\">{uc.time_to_value_days}d setup</span>\n                        <span className={`font-medium ${\n                          uc.implementation_effort === 'low' ? 'text-accent-green' :\n                          uc.implementation_effort === 'medium' ? 'text-accent-blue' :\n                          'text-accent-orange'\n                        }`}>\n                          {uc.implementation_effort} effort\n                        </span>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10152},"archive/reports/components/v3/StackAnalysis.tsx":{"content":"'use client';\n\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport { MatchedUseCase } from '@/lib/engines/use-case-matcher';\nimport Card from '@/components/ui/Card';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface StackAnalysisProps {\n  feasibilityResults: FeasibilityResult[];\n  matchedUseCases: MatchedUseCase[];\n}\n\ninterface UseCaseInfo {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n  estimatedImpact?: number;\n  isMatched: boolean;\n  isRequired: boolean;\n}\n\nexport default function StackAnalysis({ feasibilityResults, matchedUseCases }: StackAnalysisProps) {\n  return (\n    <section className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-4\">\n        Your AI Worker Capabilities\n      </h2>\n      <p className=\"text-xl text-text-tertiary mb-12\">\n        Here's what AI Workers can automate using your current tools and APIs\n      </p>\n\n      <div className=\"space-y-8\">\n        {feasibilityResults.map((result, idx) => {\n          // Get ALL use cases enabled by this tool from FeasibilityEngine\n          const enabledUseCaseIds = new Set(result.enabled_use_cases);\n          \n          // Build comprehensive list of use cases\n          const allUseCasesForTool: UseCaseInfo[] = [];\n          \n          (useCaseMappings as any).use_cases.forEach((uc: any) => {\n            if (enabledUseCaseIds.has(uc.id)) {\n              // Check if this use case has a volume match (for impact data)\n              const matchedUseCase = matchedUseCases.find(muc => muc.use_case_id === uc.id);\n              \n              // Determine if tool is required or optional for this use case\n              const toolNameNormalized = result.tool.toLowerCase().replace(/[\\s-]+/g, '_');\n              const isRequired = uc.required_tools?.includes(toolNameNormalized);\n              \n              allUseCasesForTool.push({\n                id: uc.id,\n                name: uc.name,\n                category: uc.category,\n                description: uc.description,\n                estimatedImpact: matchedUseCase?.estimated_hours_saved,\n                isMatched: !!matchedUseCase,\n                isRequired: isRequired\n              });\n            }\n          });\n\n          // Sort: matched (with impact) first, then alphabetically\n          allUseCasesForTool.sort((a, b) => {\n            if (a.isMatched && !b.isMatched) return -1;\n            if (!a.isMatched && b.isMatched) return 1;\n            return a.name.localeCompare(b.name);\n          });\n\n          const totalImpact = allUseCasesForTool\n            .filter(uc => uc.estimatedImpact)\n            .reduce((sum, uc) => sum + (uc.estimatedImpact || 0), 0);\n\n          return (\n            <Card key={idx} className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n              <div className=\"flex items-start justify-between mb-6\">\n                <h3 className=\"text-2xl font-bold text-text-primary\">{result.tool}</h3>\n                <span className=\"px-3 py-1 rounded-full bg-highlight/20 text-highlight text-sm font-medium\">\n                  {Math.round(result.confidence * 100)}% Confidence\n                </span>\n              </div>\n\n              {/* Always show APIs if available */}\n              {result.available_apis.length > 0 && (\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center gap-2\">\n                    <span className=\"text-highlight\">✓</span> Available APIs\n                  </h4>\n                  <ul className=\"space-y-2\">\n                    {result.available_apis.map((api, i) => (\n                      <li key={i} className=\"text-text-tertiary pl-6\">\n                        • {api}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {/* Show ALL AI Worker actions this tool enables */}\n              {allUseCasesForTool.length > 0 && (\n                <div className=\"mb-6\">\n                  <h4 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center gap-2\">\n                    <span className=\"text-highlight\">✓</span> AI Worker Actions Available ({allUseCasesForTool.length})\n                  </h4>\n                  <div className=\"grid md:grid-cols-2 gap-2\">\n                    {allUseCasesForTool.map((uc, i) => (\n                      <div key={uc.id} className=\"text-text-tertiary pl-6\">\n                        • <span className=\"font-medium\">{uc.name}</span>\n                        <span className=\"text-text-tertiary/60 text-sm ml-2\">({uc.category})</span>\n                        {!uc.isRequired && (\n                          <span className=\"text-text-tertiary/40 text-xs ml-2\">enhances</span>\n                        )}\n                        {uc.estimatedImpact && (\n                          <span className=\"text-highlight text-sm ml-2\">~{Math.round(uc.estimatedImpact)}h/mo</span>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Show high-impact opportunity if we have matched use cases */}\n              {totalImpact > 0 && (\n                <div className=\"mb-6 p-4 bg-bg-card-alt/30 rounded-lg\">\n                  <h4 className=\"text-lg font-semibold text-text-primary mb-2 flex items-center gap-2\">\n                    <svg className=\"w-5 h-5 text-highlight\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                    High-Impact Opportunities\n                  </h4>\n                  <p className=\"text-text-tertiary mb-2\">\n                    We've identified {allUseCasesForTool.filter(uc => uc.isMatched).length} action{allUseCasesForTool.filter(uc => uc.isMatched).length !== 1 ? 's' : ''} an AI Worker could perform based on your ticket volume\n                  </p>\n                  <p className=\"text-highlight font-medium\">\n                    Estimated impact: ~{Math.round(totalImpact).toLocaleString()} hours/month\n                  </p>\n                </div>\n              )}\n\n            </Card>\n          );\n        })}\n      </div>\n    </section>\n  );\n}\n","size_bytes":6378},"archive/reports/components/AIWorkerCard.tsx":{"content":"import Card from \"@/components/ui/Card\";\nimport StatusPill from \"@/components/ui/StatusPill\";\nimport { MatchedWorker } from \"@/types\";\nimport toolsData from \"@/data/tools.json\";\n\ninterface AIWorkerCardProps {\n  worker: MatchedWorker;\n  rank?: number;\n  isTopWorkflow?: boolean;\n}\n\nexport default function AIWorkerCard({\n  worker,\n  rank,\n  isTopWorkflow = false,\n}: AIWorkerCardProps) {\n  // Calculate reduction percentage\n  const reductionPercentage = Math.round(\n    ((worker.metrics.avgResolutionBefore - worker.metrics.avgResolutionAfter) /\n      worker.metrics.avgResolutionBefore) *\n      100,\n  );\n\n  // Get phase label and status per spec\n  const getPhaseLabel = () => {\n    switch (worker.deploymentPhase) {\n      case \"week-1\":\n        return \"Week 1 Ready\";\n      case \"month-2\":\n        return \"Month 2-3\";\n      case \"month-4\":\n        return \"Month 4-6\";\n      case \"month-6\":\n        return \"Month 6+\";\n    }\n  };\n\n  const getPhaseStatus = (): \"success\" | \"active\" | \"warning\" => {\n    switch (worker.deploymentPhase) {\n      case \"week-1\":\n        return \"success\";\n      case \"month-2\":\n        return \"active\";\n      default:\n        return \"warning\";\n    }\n  };\n\n  // Format time (hours to hrs/min display)\n  const formatTime = (hours: number): string => {\n    if (hours < 1) {\n      return `${Math.round(hours * 60)} min`;\n    }\n    return `${hours} hr${hours > 1 ? \"s\" : \"\"}`;\n  };\n\n  return (\n    <Card hover className={isTopWorkflow ? \"border-2 border-accent-blue\" : \"\"}>\n      {/* Top Workflow Banner */}\n      {isTopWorkflow && (\n        <div className=\"bg-accent-blue text-bg-primary text-xs font-bold px-4 py-2 flex items-center gap-2 -m-6 mb-4\">\n          <span className=\"text-lg\">🏆</span>\n          YOUR TOP WORKFLOW\n        </div>\n      )}\n\n      {/* Tool Logos */}\n      <div className=\"flex items-center gap-2 mb-4\">\n        {worker.requiredTools.slice(0, 3).map((toolId) => {\n          const tool = toolsData.tools.find((t) => t.id === toolId);\n          if (!tool) return null;\n          return (\n            <img\n              key={toolId}\n              src={tool.logo}\n              alt={tool.name}\n              className=\"w-8 h-8 rounded bg-bg-elevated p-1\"\n              title={tool.name}\n              onError={(e) => {\n                (e.target as HTMLImageElement).style.display = \"none\";\n              }}\n            />\n          );\n        })}\n      </div>\n\n      {/* Status Pill */}\n      <div className=\"mb-4\">\n        <StatusPill status={getPhaseStatus()}>{getPhaseLabel()}</StatusPill>\n      </div>\n\n      {/* Title with Rank */}\n      {rank && (\n        <div className=\"flex items-center gap-3 mb-3\">\n          <span className=\"flex-shrink-0 w-8 h-8 bg-accent-blue rounded-full flex items-center justify-center text-bg-primary font-bold text-sm\">\n            {rank}\n          </span>\n          <h3 className=\"text-xl font-bold text-text-primary\">{worker.name}</h3>\n        </div>\n      )}\n      {!rank && (\n        <h3 className=\"text-xl font-bold text-text-primary mb-3\">\n          {worker.name}\n        </h3>\n      )}\n\n      {/* Description */}\n      <p className=\"text-text-secondary mb-6 leading-relaxed\">\n        {worker.description}\n      </p>\n\n      {/* Key Metrics - 3-column grid per spec */}\n      <div className=\"grid grid-cols-3 gap-3 mb-6\">\n        <div className=\"text-center p-3 bg-accent-green/10 rounded-lg\">\n          <div className=\"text-2xl font-bold text-accent-green\">\n            {worker.estimatedTickets}\n          </div>\n          <div className=\"text-xs text-text-tertiary mt-1\">Tickets/Month</div>\n        </div>\n\n        <div className=\"text-center p-3 bg-accent-blue/10 rounded-lg\">\n          <div className=\"text-2xl font-bold text-accent-blue\">\n            {worker.timeSaved}\n          </div>\n          <div className=\"text-xs text-text-tertiary mt-1\">Hours Saved</div>\n        </div>\n\n        <div className=\"text-center p-3 bg-accent-purple/10 rounded-lg\">\n          <div className=\"text-2xl font-bold text-accent-purple\">\n            ${worker.costSaved.toLocaleString()}\n          </div>\n          <div className=\"text-xs text-text-tertiary mt-1\">\n            Cost Saved/Month\n          </div>\n        </div>\n      </div>\n\n      {/* What it automates */}\n      <div className=\"mb-4\">\n        <h4 className=\"text-sm font-semibold text-text-primary mb-2\">\n          What it automates:\n        </h4>\n        <p className=\"text-sm text-text-secondary italic\">\n          {worker.description}\n        </p>\n      </div>\n\n      {/* Your current state */}\n      <div className=\"bg-bg-primary rounded-lg p-4 mb-4\">\n        <h4 className=\"text-sm font-semibold text-text-primary mb-3\">\n          Your current state:\n        </h4>\n        <div className=\"grid grid-cols-2 gap-3 text-sm\">\n          <div>\n            <span className=\"text-text-tertiary\">Volume:</span>\n            <span className=\"ml-2 font-medium text-text-primary\">\n              {worker.estimatedTickets} tickets/month\n            </span>\n          </div>\n          <div>\n            <span className=\"text-text-tertiary\">Avg Resolution:</span>\n            <span className=\"ml-2 font-medium text-text-primary\">\n              {formatTime(worker.metrics.avgResolutionBefore)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Before/After Timeline per spec */}\n      <div className=\"mb-6\">\n        <div className=\"bg-bg-elevated rounded-lg p-4 mb-3\">\n          <h5 className=\"text-xs font-semibold text-text-tertiary uppercase mb-2\">\n            BEFORE\n          </h5>\n          <p className=\"text-sm text-text-secondary mb-2\">\n            {worker.beforeAfter.before}\n          </p>\n          <div className=\"text-xs font-bold text-text-tertiary\">\n            ⏱️ {formatTime(worker.metrics.avgResolutionBefore)}\n          </div>\n        </div>\n\n        <div className=\"bg-accent-green/10 rounded-lg p-4 border-2 border-accent-green/20\">\n          <h5 className=\"text-xs font-semibold text-accent-green uppercase mb-2\">\n            AFTER\n          </h5>\n          <p className=\"text-sm text-text-primary mb-2\">\n            {worker.beforeAfter.after}\n          </p>\n          <div className=\"text-xs font-bold text-accent-green\">\n            ⏱️ {formatTime(worker.metrics.avgResolutionAfter)}\n          </div>\n        </div>\n      </div>\n\n      {/* With automation summary per spec */}\n      <div className=\"bg-gradient-to-r from-accent-green/10 to-accent-blue/10 rounded-lg p-4 mb-4\">\n        <h4 className=\"text-sm font-semibold text-text-primary mb-3 flex items-center gap-2\">\n          <span className=\"text-accent-green\">📈</span>\n          With automation:\n        </h4>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex items-start gap-2\">\n            <span className=\"text-text-secondary\">• Time saved:</span>\n            <span className=\"font-bold text-accent-green flex-1 text-right\">\n              {worker.timeSaved} hours/month ({reductionPercentage}% reduction)\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2\">\n            <span className=\"text-text-secondary\">• Tickets deflected:</span>\n            <span className=\"font-bold text-accent-blue flex-1 text-right\">\n              ~\n              {Math.round(\n                worker.estimatedTickets * worker.metrics.automationRate,\n              )}{\" \"}\n              tickets/month\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Why this matters - Value Rationale per spec */}\n      <div className=\"mb-4 pb-4 border-b border-brand-secondary/10\">\n        <h4 className=\"text-sm font-semibold text-text-primary mb-2\">\n          Why this matters:\n        </h4>\n        <p className=\"text-sm text-text-secondary leading-relaxed\">\n          {worker.valueRationale}\n        </p>\n      </div>\n\n      {/* Setup info footer per spec */}\n      <div className=\"flex items-center justify-between text-xs text-text-tertiary\">\n        <div className=\"flex items-center gap-1\">\n          <span>⏰</span>\n          <span>Setup: {worker.setupTime}</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>📚</span>\n          <span>Learning: {worker.learningPeriod}</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span\n            className={\n              worker.configComplexity === \"low\"\n                ? \"text-accent-green\"\n                : worker.configComplexity === \"medium\"\n                  ? \"text-yellow-600\"\n                  : \"text-orange-600\"\n            }\n          >\n            {worker.configComplexity === \"low\"\n              ? \"🟢\"\n              : worker.configComplexity === \"medium\"\n                ? \"🟡\"\n                : \"🟠\"}\n          </span>\n          <span className=\"capitalize\">{worker.configComplexity} setup</span>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":8888},"archive/reports/components/v4/GetStartedPlan.tsx":{"content":"'use client';\n\nimport { MatchedUseCase } from '@/types/types-v3';\nimport InternalAlignment from './InternalAlignment';\nimport DeploymentTimeline from './DeploymentTimeline';\nimport RequiredAssets from './RequiredAssets';\n\ninterface GetStartedPlanProps {\n  matchedUseCases: MatchedUseCase[];\n}\n\nexport default function GetStartedPlan({ matchedUseCases }: GetStartedPlanProps) {\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      {/* Section 1: Introduction */}\n      <section className=\"mb-16\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-6\">\n          Get Started: Your AI Worker Deployment Plan\n        </h2>\n        <p className=\"text-lg text-text-secondary leading-relaxed\">\n          A clear, personalized blueprint for moving from readiness to real results. You've identified where your tech stack can support AI Workers. Now it's time to move from <em className=\"text-text-primary\">readiness</em> to <em className=\"text-text-primary\">deployment</em>. This blueprint shows what to expect during implementation — even if you work with other vendors — so your team can align, prepare, and accelerate securely.\n        </p>\n      </section>\n\n      {/* Section 2: Internal Alignment */}\n      <InternalAlignment />\n\n      {/* Section 3: Deployment Timeline */}\n      <DeploymentTimeline />\n\n      {/* Section 4: Required Assets */}\n      <RequiredAssets />\n    </div>\n  );\n}\n","size_bytes":1411},"archive/reports/components/ExpectedOutcomes-v3.tsx":{"content":"import Card from '@/components/ui/Card';\nimport { ROIResult } from '@/types/types-v3';\n\ninterface ExpectedOutcomesProps {\n  roiResult: ROIResult;\n  totalMonthlyTickets: number;\n}\n\nexport default function ExpectedOutcomes({ \n  roiResult, \n  totalMonthlyTickets \n}: ExpectedOutcomesProps) {\n  \n  // Calculate additional metrics\n  const ticketDeflectionRate = totalMonthlyTickets > 0 \n    ? (roiResult.automatable_tickets / totalMonthlyTickets) * 100 \n    : 0;\n  const avgHoursPerTicket = roiResult.automatable_tickets > 0 \n    ? roiResult.total_hours_saved / roiResult.automatable_tickets \n    : 0;\n  const monthlyValue = roiResult.annual_value_usd / 12;\n\n  // Learning curve projection (conservative 15% improvement over 6 months)\n  const month6Multiplier = 1.15;\n  const projectedMonth6Tickets = Math.round(roiResult.automatable_tickets * month6Multiplier);\n  \n  // Cap at total monthly tickets (can't automate more than 100%)\n  const month6Tickets = Math.min(projectedMonth6Tickets, totalMonthlyTickets);\n  \n  // Calculate actual improvement ratio achieved (may be less than 1.15 if capped)\n  // Guard against division by zero\n  const actualMultiplier = roiResult.automatable_tickets > 0 \n    ? month6Tickets / roiResult.automatable_tickets \n    : 0;\n  \n  // Apply proportional improvements to hours, FTE, and value\n  const month6Hours = roiResult.total_hours_saved * actualMultiplier;\n  const month6FTE = roiResult.fte_equivalent * actualMultiplier;\n  const month6Value = roiResult.annual_value_usd * actualMultiplier;\n\n  const getIconSvg = (iconType: string) => {\n    const icons: Record<string, JSX.Element> = {\n      target: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      clock: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      currency: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      lightning: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n        </svg>\n      ),\n      graduation: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 14l9-5-9-5-9 5 9 5z\" />\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z\" />\n        </svg>\n      ),\n      smile: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      ),\n      chart: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n      ),\n      lock: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n        </svg>\n      ),\n      trending: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n        </svg>\n      ),\n      refresh: (\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n        </svg>\n      )\n    };\n    return icons[iconType] || null;\n  };\n\n  const outcomes = [\n    {\n      icon: 'target',\n      title: 'Ticket Deflection',\n      baseline: {\n        label: 'Month 1',\n        value: `${roiResult.automatable_tickets.toLocaleString()}`,\n        subtitle: `${ticketDeflectionRate.toFixed(1)}% of total volume`\n      },\n      improved: {\n        label: 'Month 6',\n        value: `${month6Tickets.toLocaleString()}`,\n        subtitle: totalMonthlyTickets > 0 \n          ? `${(month6Tickets / totalMonthlyTickets * 100).toFixed(1)}% of total volume`\n          : '0.0% of total volume'\n      },\n      description: 'Tickets handled autonomously without human intervention'\n    },\n    {\n      icon: 'clock',\n      title: 'Time Savings',\n      baseline: {\n        label: 'Month 1',\n        value: `${Math.round(roiResult.total_hours_saved).toLocaleString()} hrs`,\n        subtitle: `${roiResult.fte_equivalent.toFixed(1)} FTE capacity`\n      },\n      improved: {\n        label: 'Month 6',\n        value: `${Math.round(month6Hours).toLocaleString()} hrs`,\n        subtitle: `${month6FTE.toFixed(1)} FTE capacity`\n      },\n      description: 'IT team hours redirected from routine work to strategic initiatives'\n    },\n    {\n      icon: 'currency',\n      title: 'Cost Savings',\n      baseline: {\n        label: 'Monthly',\n        value: `$${(monthlyValue / 1000).toFixed(1)}K`,\n        subtitle: 'Labor cost savings'\n      },\n      improved: {\n        label: 'Annual',\n        value: `$${Math.round(month6Value / 1000).toLocaleString()}K`,\n        subtitle: 'With learning curve'\n      },\n      description: 'Fully-loaded labor cost at $100K per FTE'\n    },\n    {\n      icon: 'lightning',\n      title: 'Resolution Speed',\n      baseline: {\n        label: 'Current Avg',\n        value: `${Math.round(avgHoursPerTicket * 60).toLocaleString()} min`,\n        subtitle: 'Manual processing'\n      },\n      improved: {\n        label: 'With AI Workers',\n        value: '< 5 min',\n        subtitle: '70-90% faster'\n      },\n      description: 'Average time from ticket creation to resolution'\n    }\n  ];\n\n  const qualitativeOutcomes = [\n    {\n      icon: 'graduation',\n      title: 'Continuous Learning',\n      description: 'AI Workers improve accuracy over time by learning from your unique policies, edge cases, and ticket patterns'\n    },\n    {\n      icon: 'smile',\n      title: 'Employee Satisfaction',\n      description: 'End users get faster responses, IT team focuses on meaningful work instead of repetitive tickets'\n    },\n    {\n      icon: 'chart',\n      title: 'Operational Insights',\n      description: 'Real-time dashboards showing automation rates, ticket patterns, and opportunities for optimization'\n    },\n    {\n      icon: 'lock',\n      title: 'Compliance & Audit',\n      description: 'Complete audit trails for all automated actions, ensuring compliance and security governance'\n    },\n    {\n      icon: 'trending',\n      title: 'Scalable Operations',\n      description: 'Handle ticket volume growth without proportional headcount increases'\n    },\n    {\n      icon: 'refresh',\n      title: 'Reduced Context Switching',\n      description: 'IT team interrupted less frequently, can focus on project work and strategic initiatives'\n    }\n  ];\n\n  return (\n    <div className=\"max-w-6xl mx-auto mb-16\">\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          What to Expect\n        </h2>\n        <p className=\"text-text-secondary max-w-3xl mx-auto\">\n          Projected results from deploying AI Workers with your {totalMonthlyTickets.toLocaleString()} monthly tickets\n        </p>\n      </div>\n\n      {/* Quantitative Outcomes */}\n      <div className=\"mb-12\">\n        <h3 className=\"text-xl font-bold text-text-primary mb-6\">\n          Measurable Impact\n        </h3>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {outcomes.map((outcome, index) => (\n            <Card key={index}>\n              <div className=\"flex items-start gap-4 mb-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center text-accent-blue\">\n                  {getIconSvg(outcome.icon)}\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"text-lg font-bold text-text-primary mb-1\">\n                    {outcome.title}\n                  </h4>\n                  <p className=\"text-sm text-text-secondary\">\n                    {outcome.description}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 p-4 bg-bg-primary rounded-lg\">\n                <div>\n                  <div className=\"text-xs text-text-tertiary mb-1\">\n                    {outcome.baseline.label}\n                  </div>\n                  <div className=\"text-2xl font-bold text-text-primary mb-1\">\n                    {outcome.baseline.value}\n                  </div>\n                  <div className=\"text-xs text-text-tertiary\">\n                    {outcome.baseline.subtitle}\n                  </div>\n                </div>\n                <div className=\"border-l border-brand-secondary/20 pl-4\">\n                  <div className=\"text-xs text-accent-green mb-1\">\n                    {outcome.improved.label}\n                  </div>\n                  <div className=\"text-2xl font-bold text-accent-green mb-1\">\n                    {outcome.improved.value}\n                  </div>\n                  <div className=\"text-xs text-text-tertiary\">\n                    {outcome.improved.subtitle}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Qualitative Outcomes */}\n      <div className=\"mb-12\">\n        <h3 className=\"text-xl font-bold text-text-primary mb-6\">\n          Strategic Benefits\n        </h3>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {qualitativeOutcomes.map((outcome, index) => (\n            <Card key={index} className=\"text-center\">\n              <div className=\"flex justify-center mb-3\">\n                <div className=\"w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center text-accent-blue\">\n                  {getIconSvg(outcome.icon)}\n                </div>\n              </div>\n              <h4 className=\"text-base font-bold text-text-primary mb-2\">\n                {outcome.title}\n              </h4>\n              <p className=\"text-sm text-text-secondary\">\n                {outcome.description}\n              </p>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Learning Curve Explanation */}\n      <Card className=\"bg-accent-blue/5 border-accent-blue/20\">\n        <div className=\"flex items-start gap-4\">\n          <div className=\"flex-shrink-0 w-12 h-12 bg-accent-blue/20 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-accent-blue\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n            </svg>\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"text-lg font-bold text-text-primary mb-2\">\n              Why Performance Improves Over Time\n            </h4>\n            <p className=\"text-sm text-text-secondary mb-3\">\n              Unlike traditional automation with static rules, AI Workers continuously learn from every ticket they process:\n            </p>\n            <ul className=\"space-y-2 text-sm text-text-secondary\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Policy learning:</strong> Understand nuances in approval patterns and access policies</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Edge case handling:</strong> Build knowledge of exceptions and special scenarios</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Ticket pattern recognition:</strong> Better categorization and routing over time</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-accent-blue mt-0.5\">→</span>\n                <span><strong>Context awareness:</strong> Learn relationships between users, teams, and resources</span>\n              </li>\n            </ul>\n            <p className=\"text-xs text-text-tertiary mt-3\">\n              Conservative estimate: 15% improvement by Month 6. Top performers see 30-40% improvement by Month 12.\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      {/* Confidence Disclaimer */}\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-sm text-text-tertiary\">\n          Outcomes based on {roiResult.confidence}% confidence score using your actual tech stack and ticket distribution.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14031},"archive/reports/components/BeforeAfterTimeline.tsx":{"content":"interface BeforeAfterTimelineProps {\n  before: string;\n  after: string;\n}\n\nexport default function BeforeAfterTimeline({ before, after }: BeforeAfterTimelineProps) {\n  return (\n    <div className=\"my-6\">\n      <div className=\"flex items-start gap-4 mb-4\">\n        <div className=\"flex-shrink-0 w-20 text-sm text-text-tertiary font-semibold\">\n          Before\n        </div>\n        <div className=\"flex-1 p-4 bg-accent-orange/10 border border-accent-orange/20 rounded-lg\">\n          <p className=\"text-sm text-text-secondary\">{before}</p>\n        </div>\n      </div>\n      \n      <div className=\"flex items-start gap-4\">\n        <div className=\"flex-shrink-0 w-20 text-sm text-text-tertiary font-semibold\">\n          After\n        </div>\n        <div className=\"flex-1 p-4 bg-accent-green/10 border border-accent-green/20 rounded-lg\">\n          <p className=\"text-sm text-text-secondary\">{after}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":946},"archive/reports/components/v4/RequiredAssets.tsx":{"content":"'use client';\n\nimport ResponsiveTable from '@/components/ui/ResponsiveTable';\n\nexport default function RequiredAssets() {\n  const categories = [\n    {\n      category: \"Rules (Knowledge)\",\n      description: \"All written policies, exception rules, approval workflows, and escalation paths. This includes IT service catalogs, compliance documents, access control matrices, and any documented decision trees. These materials form the AI Worker's 'source of truth' and ensure it follows your organization's governance standards. Without comprehensive rules, the AI Worker cannot make informed, policy-compliant decisions.\"\n    },\n    {\n      category: \"Data\",\n      description: \"Historical tickets, support requests, incident logs, and user interaction data from the past 6-12 months. This data reveals patterns in ticket volume, resolution times, common issues, and edge cases. The AI Worker learns from this information to understand your environment's unique characteristics and improve accuracy over time. Minimum recommended dataset: 3 months of ticket history with at least 1,000 tickets.\"\n    },\n    {\n      category: \"Connections\",\n      description: \"Read/write API access to integrated systems (ITSM tools, identity providers, collaboration platforms). This includes OAuth2 tokens, service account credentials, API keys, and SSO configurations. Proper integration credentials enable the AI Worker to execute actions across your tech stack. Security note: use dedicated service accounts with least-privilege access and enable audit logging for all automated actions.\"\n    },\n    {\n      category: \"Stakeholder Alignment\",\n      description: \"Buy-in and availability from key participants including IT admins, security leads, process owners, legal/compliance teams, and end-user representatives. Each stakeholder plays a critical role in configuration, testing, and validation. Schedule regular check-ins during the 4-6 week deployment to address concerns, gather feedback, and ensure smooth adoption across departments.\"\n    }\n  ];\n\n  const columns = [\n    {\n      key: 'category',\n      label: 'Category',\n      className: 'font-semibold text-text-primary w-1/4'\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      className: 'w-3/4'\n    }\n  ];\n\n  return (\n    <section className=\"mb-16\">\n      <h3 className=\"text-2xl font-bold text-text-primary mb-4\">\n        What You Will Need to Collect\n      </h3>\n      <p className=\"text-lg text-text-secondary mb-8\">\n        To ensure the AI Worker is configured correctly and governed effectively, gather the following before deployment:\n      </p>\n      \n      <div className=\"bg-bg-card border border-brand-secondary/10 rounded-card p-6 mb-8 overflow-x-auto\">\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"border-b border-bg-card-alt/20\">\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/4\">Category</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-3/4\">Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {categories.map((row, index) => (\n              <tr key={index} className=\"border-b border-bg-card-alt/10 hover:bg-bg-card-alt/5 transition-colors duration-200\">\n                <td className=\"py-4 px-4 text-sm font-semibold text-text-primary\">{row.category}</td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary leading-relaxed\">{row.description}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"bg-bg-card-alt/10 border border-bg-card-alt/20 rounded-card p-6\">\n        <h4 className=\"text-lg font-bold text-text-primary mb-3\">\n          Why This Matters\n        </h4>\n        <p className=\"text-lg text-text-secondary mb-3 leading-relaxed\">\n          This plan gives your team a <strong className=\"text-text-primary\">realistic roadmap</strong> to deploy AI safely — not a hype cycle.\n        </p>\n        <p className=\"text-lg text-text-secondary leading-relaxed\">\n          By preparing these assets and stakeholders upfront, you'll ensure your AI Workers are operational, auditable, and scalable within weeks — not quarters.\n        </p>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4317},"archive/reports/components/v3/BestFitUseCases.tsx":{"content":"import { AutomationOpportunity } from '@/types';\nimport ConnectedAppLogos from '@/components/ui/ConnectedAppLogos';\n\ninterface BestFitUseCasesProps {\n  opportunities: AutomationOpportunity[];\n  techStack: string[];\n}\n\nexport default function BestFitUseCases({\n  opportunities,\n  techStack,\n}: BestFitUseCasesProps) {\n  // Get top 3 high-confidence opportunities for use case breakdown\n  const topUseCases = opportunities\n    .filter(opp => opp.confidence === 'high')\n    .slice(0, 3);\n\n  return (\n    <div className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-8\">What This Looks Like in Practice</h2>\n      \n      <p className=\"text-lg text-text-tertiary mb-8 max-w-4xl leading-relaxed\">\n        Here are three high-confidence automation scenarios based on your tech stack. \n        Each shows the workstream, required skills, and AI Workers that handle the work.\n      </p>\n\n      <div className=\"space-y-8\">\n        {topUseCases.map((opp, index) => (\n          <div key={index} className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg overflow-hidden transition-all duration-200\">\n            {/* Header */}\n            <div className=\"bg-bg-card-alt/30 border-b border-bg-card-alt/20 py-8 px-6\">\n              <div className=\"flex items-start justify-between gap-6\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <h3 className=\"text-2xl font-bold text-text-primary\">{opp.processName}</h3>\n                  </div>\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <span className=\"text-sm text-text-tertiary\">{opp.category}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs text-text-tertiary\">Integrates with:</span>\n                    <ConnectedAppLogos \n                      apps={techStack.filter(tool => \n                        opp.tool.includes(tool) || opp.description.includes(tool)\n                      ).slice(0, 5)}\n                      maxVisible={5}\n                      size={24}\n                      spacing={12}\n                    />\n                  </div>\n                </div>\n                <div className=\"text-right flex-shrink-0\">\n                  <div className=\"text-3xl font-bold text-highlight\">{opp.projectedDeflection}%</div>\n                  <div className=\"text-sm text-text-tertiary\">deflection</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Workstream → Skills → Agents Breakdown */}\n            <div className=\"py-8 px-6\">\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                {/* Workstream */}\n                <div>\n                  <div className=\"text-xs uppercase tracking-wide text-text-tertiary mb-3\">Workstream</div>\n                  <div className=\"bg-bg-primary border border-bg-card-alt/20 rounded-lg p-4\">\n                    <div className=\"font-semibold text-text-primary mb-2\">{opp.workstream}</div>\n                    <p className=\"text-sm text-text-tertiary leading-relaxed\">{opp.description}</p>\n                  </div>\n                </div>\n\n                {/* Skills */}\n                <div>\n                  <div className=\"text-xs uppercase tracking-wide text-text-tertiary mb-3\">Skills Required</div>\n                  <div className=\"bg-bg-primary border border-bg-card-alt/20 rounded-lg p-4\">\n                    <div className=\"space-y-2\">\n                      {opp.skills.map((skill, idx) => (\n                        <div key={idx} className=\"flex items-center gap-2\">\n                          <div className=\"w-1.5 h-1.5 rounded-full bg-highlight\"></div>\n                          <span className=\"text-sm text-text-tertiary\">{skill}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                {/* AI Workers */}\n                <div>\n                  <div className=\"text-xs uppercase tracking-wide text-text-tertiary mb-3\">AI Workers</div>\n                  <div className=\"bg-bg-primary border border-bg-card-alt/20 rounded-lg p-4\">\n                    <div className=\"space-y-2\">\n                      {opp.agents.map((agent, idx) => (\n                        <div key={idx} className=\"flex items-center gap-2\">\n                          <div className=\"w-1.5 h-1.5 rounded-full bg-highlight\"></div>\n                          <span className=\"text-sm text-text-tertiary\">{agent}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Outcome */}\n              <div className=\"mt-6 pt-6 border-t border-bg-card-alt/20\">\n                <div className=\"flex items-start gap-3\">\n                  <svg className=\"w-5 h-5 text-highlight mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <div>\n                    <h4 className=\"font-semibold text-text-primary mb-1\">Expected Outcome</h4>\n                    <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                      {opp.projectedDeflection}% of {opp.processName.toLowerCase()} handled autonomously. \n                      Requests route through existing approval workflows and complete within enterprise guardrails.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5816},"archive/reports/components/v3/OpportunityAnalysis.tsx":{"content":"import { AutomationOpportunity } from '@/types';\nimport ConnectedAppLogos from '@/components/ui/ConnectedAppLogos';\n\ninterface OpportunityAnalysisProps {\n  topOpportunities: AutomationOpportunity[];\n  estimatedDeflection: number;\n  techStack: string[];\n}\n\nexport default function OpportunityAnalysis({\n  topOpportunities,\n  estimatedDeflection,\n  techStack,\n}: OpportunityAnalysisProps) {\n  return (\n    <div className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-8\">Where AI Workers Help First</h2>\n      \n      <p className=\"text-lg text-text-tertiary mb-8 max-w-4xl leading-relaxed\">\n        Based on your tech stack and ticket patterns, AI Workers can automate {estimatedDeflection}% of \n        volume across five high-impact areas. These workflows integrate with your existing tools and \n        operate within enterprise guardrails.\n      </p>\n\n      <div className=\"space-y-4\">\n        {topOpportunities.map((opp, index) => (\n          <div\n            key={index}\n            className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg overflow-hidden transition-all duration-200\"\n          >\n            <div className=\"py-8 px-6\">\n              <div className=\"flex items-start justify-between gap-6\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <div className=\"flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full flex items-center justify-center text-text-primary font-bold\">\n                      {index + 1}\n                    </div>\n                    <h3 className=\"text-2xl font-bold text-text-primary\">{opp.processName}</h3>\n                  </div>\n                  \n                  <p className=\"text-text-tertiary mb-4 leading-relaxed\">{opp.description}</p>\n                  \n                  <div className=\"flex flex-wrap gap-4 text-sm mb-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-text-tertiary\">Category:</span>\n                      <span className=\"text-text-primary\">{opp.category}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-text-tertiary\">Confidence:</span>\n                      <span className=\"text-highlight font-semibold capitalize\">{opp.confidence}</span>\n                    </div>\n                  </div>\n\n                  {/* Connected App Logos */}\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-xs text-text-tertiary\">Integrates with:</span>\n                    <ConnectedAppLogos \n                      apps={techStack.filter(tool => \n                        opp.tool.includes(tool) || opp.description.includes(tool)\n                      ).slice(0, 5)}\n                      maxVisible={5}\n                      size={24}\n                      spacing={12}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex-shrink-0 text-right\">\n                  <div className=\"text-4xl font-bold text-highlight mb-1\">{opp.projectedDeflection}%</div>\n                  <div className=\"text-sm text-text-tertiary\">deflection</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Enterprise Capabilities Callout */}\n      <div className=\"mt-8 bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 transition-all duration-200\">\n        <div className=\"flex items-start gap-4\">\n          <svg className=\"w-6 h-6 text-highlight mt-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.586-5.586a2 2 0 010 2.828l-3 3a2 2 0 01-2.828 0L8 9.172a2 2 0 000-2.828l3-3a2 2 0 012.828 0L15.586 5.414a2 2 0 012.828 0l3 3a2 2 0 010 2.828z\" />\n          </svg>\n          <div>\n            <h4 className=\"font-bold text-text-primary mb-2\">Enterprise-Grade Integration</h4>\n            <p className=\"text-sm text-text-tertiary leading-relaxed\">\n              AI Workers integrate with {techStack.length} tools in your stack through OAuth 2.0 connectors. \n              All actions flow through existing approval workflows, RBAC policies, and audit logs.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4459},"archive/reports/components/v3/GapAnalysis.tsx":{"content":"'use client';\n\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\n\ninterface GapAnalysisProps {\n  feasibilityResults: FeasibilityResult[];\n}\n\n// This component is intentionally hidden - focus is on what's possible NOW, not license upsells\nexport default function GapAnalysis({ feasibilityResults }: GapAnalysisProps) {\n  return null;\n}\n","size_bytes":355},"archive/reports/components/v4/OpportunityAnalysis.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport Card from '@/components/ui/Card';\nimport StatusPill from '@/components/ui/StatusPill';\nimport ConnectedAppLogos from '@/components/ui/ConnectedAppLogos';\nimport { MatchedUseCase } from '@/types/types-v3';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface OpportunityAnalysisProps {\n  matchedUseCases: MatchedUseCase[];\n  feasibilityResults: FeasibilityResult[];\n  topN?: number;\n}\n\nexport default function OpportunityAnalysis({ \n  matchedUseCases,\n  feasibilityResults,\n  topN = 10\n}: OpportunityAnalysisProps) {\n  const [expandedWorkflows, setExpandedWorkflows] = useState<Record<string, boolean>>({});\n\n  // Convert tool names from underscore format to proper names\n  const convertToolName = (tool: string): string => {\n    const toolMap: Record<string, string> = {\n      'okta': 'Okta',\n      'servicenow': 'ServiceNow',\n      'slack': 'Slack',\n      'jira': 'Jira',\n      'jira_service_management': 'Jira Service Management',\n      'zendesk': 'Zendesk',\n      'microsoft_365': 'Microsoft 365',\n      'microsoft_entra': 'Microsoft Entra',\n      'microsoft_teams': 'Microsoft Teams',\n      'google_workspace': 'Google Workspace',\n      'google_drive': 'Google Drive',\n      'google_docs': 'Google Docs',\n      'google_sheets': 'Google Sheets',\n      'google_calendar': 'Google Calendar',\n      'gmail': 'Gmail',\n      'azure_ad': 'Azure AD',\n      'salesforce': 'Salesforce',\n      'github': 'GitHub',\n      'gitlab': 'GitLab',\n      'confluence': 'Confluence',\n      'asana': 'Asana',\n      'monday_com': 'Monday.com',\n      'zoom': 'Zoom',\n      'teams': 'Teams',\n      'workday': 'Workday',\n      'bamboohr': 'BambooHR',\n      'duo_security': 'Duo Security',\n      'cyberark': 'CyberArk',\n      'jumpcloud': 'JumpCloud',\n      'freshservice': 'Freshservice',\n      'ivanti': 'Ivanti',\n      'sap_successfactors': 'SAP SuccessFactors',\n      'hibob': 'HiBob',\n      'docusign': 'DocuSign',\n      'linear': 'Linear',\n      'sharepoint': 'SharePoint'\n    };\n    \n    return toolMap[tool.toLowerCase()] || tool.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  // Get category color based on category name\n  const getCategoryColor = (category: string): string => {\n    const categoryColors: Record<string, string> = {\n      'Identity Access & Compliance': 'bg-accent-green/20 text-accent-green',\n      'CRM Integration': 'bg-accent-blue/20 text-accent-blue',\n      'Knowledge Management': 'bg-purple-500/20 text-purple-400',\n      'IT Service Management': 'bg-accent-orange/20 text-accent-orange',\n      'HR & Onboarding': 'bg-pink-500/20 text-pink-400',\n      'Procurement': 'bg-yellow-500/20 text-yellow-400',\n      'Project Management': 'bg-indigo-500/20 text-indigo-400',\n      'Communication & Collaboration': 'bg-teal-500/20 text-teal-400'\n    };\n    \n    return categoryColors[category] || 'bg-accent-green/20 text-accent-green';\n  };\n  \n  // Get all enabled use case IDs\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n\n  // Build comprehensive list: matched use cases PLUS enabled use cases without volume matches\n  const allOpportunities: MatchedUseCase[] = [];\n  \n  // First, add all matched use cases (these have impact data)\n  allOpportunities.push(...matchedUseCases);\n  \n  // Then, add enabled use cases that weren't matched (no volume data, but still possible)\n  const matchedIds = new Set(matchedUseCases.map(uc => uc.use_case_id));\n  \n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    if (enabledUseCaseIds.has(uc.id) && !matchedIds.has(uc.id)) {\n      // Create a pseudo-matched use case with estimated impact based on typical values\n      const estimatedVolume = Math.round((uc.typical_volume_pct || 0.05) * 1000); // Assume 1000 tickets baseline\n      const estimatedHours = estimatedVolume * (uc.typical_ttr_hours || 1) * (uc.automation_rate || 0.8);\n      \n      allOpportunities.push({\n        use_case_id: uc.id,\n        name: uc.name,\n        category: uc.category,\n        description: uc.description,\n        value_proposition: uc.value_proposition,\n        fit_score: 45, // Base score for enabled but unmatched\n        estimated_monthly_deflection: estimatedVolume,\n        estimated_hours_saved: estimatedHours,\n        confidence: uc.confidence * 0.7, // Lower confidence since no volume match\n        implementation_effort: uc.implementation_effort,\n        time_to_value_days: uc.time_to_value_days,\n        prerequisites: uc.prerequisites,\n        workflow_steps: uc.workflow_steps,\n        priority: uc.time_to_value_days <= 7 ? 'immediate' : \n                  uc.time_to_value_days <= 21 ? 'quick_win' : 'future',\n        required_tools: uc.required_tools\n      });\n    }\n  });\n\n  // Sort by fit score and limit to topN\n  const topUseCases = allOpportunities\n    .sort((a, b) => b.fit_score - a.fit_score)\n    .slice(0, topN);\n\n  if (topUseCases.length === 0) {\n    return null;\n  }\n\n  const getFitScoreColor = (score: number) => {\n    if (score >= 80) return 'text-accent-green';\n    if (score >= 60) return 'text-accent-blue';\n    if (score >= 40) return 'text-accent-orange';\n    return 'text-text-tertiary';\n  };\n\n  const getFitScoreLabel = (score: number) => {\n    if (score >= 80) return 'Excellent Fit';\n    if (score >= 60) return 'Good Fit';\n    if (score >= 40) return 'Moderate Fit';\n    return 'Basic Fit';\n  };\n\n  const getPriorityStatus = (priority: string): 'success' | 'active' | 'warning' => {\n    if (priority === 'immediate') return 'success';\n    if (priority === 'quick_win') return 'active';\n    return 'warning';\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    if (priority === 'immediate') return 'Deploy Week 1';\n    if (priority === 'quick_win') return 'Deploy Month 1-2';\n    return 'Deploy Month 3+';\n  };\n\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      {/* Call to Action Section */}\n      <section className=\"mb-12 bg-bg-card-alt/10 border border-bg-card-alt/20 rounded-card p-8 text-center\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">Validate Your Blueprint with Real Data</h2>\n        <p className=\"text-lg text-text-secondary mb-6 leading-relaxed\">\n          Your personalized AI Blueprint shows where automation can create value. The next step is to validate those opportunities with your live ticket data — so you know exactly what results to expect before deploying.\n        </p>\n        <a \n          href=\"https://www.ai.work/book-a-demo\" \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n          className=\"inline-flex items-center gap-3 bg-white text-black px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors\"\n        >\n          <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n          <span className=\"flex-1 text-center\">Run My Data Science Assessment</span>\n          <span>&gt;</span>\n        </a>\n        <p className=\"text-sm text-text-tertiary mt-4\">7-day validation using your real environment data</p>\n      </section>\n\n      {/* Section Divider */}\n      <div className=\"border-t border-bg-card-alt/20 mb-12\"></div>\n\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-2\">\n          How to Identify Valuable Use Cases\n        </h2>\n        <p className=\"text-text-secondary\">\n          Not all IT tasks are good candidates for AI automation. Here's what works best—and what doesn't.\n        </p>\n      </div>\n\n      {/* Good vs Poor Candidates Section */}\n      <div className=\"grid md:grid-cols-2 gap-8 mb-12\">\n        {/* Good Candidates Card */}\n        <Card className=\"border-l-4 border-accent-green\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <svg className=\"w-6 h-6 text-accent-green\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <h3 className=\"text-xl font-bold text-text-primary\">Good Candidates</h3>\n          </div>\n          <ul className=\"space-y-3\">\n            <li className=\"flex items-start gap-2\">\n              <svg className=\"w-5 h-5 text-accent-green mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              <div>\n                <div className=\"font-semibold text-text-primary\">High volume, repetitive tasks</div>\n                <div className=\"text-sm text-text-tertiary\">Tasks performed frequently with consistent patterns</div>\n              </div>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <svg className=\"w-5 h-5 text-accent-green mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              <div>\n                <div className=\"font-semibold text-text-primary\">Clear rules and policies</div>\n                <div className=\"text-sm text-text-tertiary\">Well-documented procedures with defined criteria</div>\n              </div>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <svg className=\"w-5 h-5 text-accent-green mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              <div>\n                <div className=\"font-semibold text-text-primary\">Structured data sources</div>\n                <div className=\"text-sm text-text-tertiary\">Information available through APIs and databases</div>\n              </div>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <svg className=\"w-5 h-5 text-accent-green mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              <div>\n                <div className=\"font-semibold text-text-primary\">Multi-system workflows</div>\n                <div className=\"text-sm text-text-tertiary\">Tasks requiring coordination across tools</div>\n              </div>\n            </li>\n          </ul>\n          <div className=\"mt-4 pt-4 border-t border-bg-card-alt/20\">\n            <div className=\"text-sm font-semibold text-text-primary mb-2\">Examples:</div>\n            <div className=\"text-sm text-text-secondary\">Password resets, app provisioning, user onboarding, access requests</div>\n          </div>\n        </Card>\n\n        {/* Poor Candidates Card */}\n        <Card className=\"border-l-4 border-accent-orange\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <svg className=\"w-6 h-6 text-accent-orange\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n            </svg>\n            <h3 className=\"text-xl font-bold text-text-primary\">Poor Candidates</h3>\n          </div>\n          <ul className=\"space-y-3\">\n            <li className=\"flex items-start gap-2\">\n              <svg className=\"w-5 h-5 text-accent-orange mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n              <div>\n                <div className=\"font-semibold text-text-primary\">Highly contextual decisions</div>\n                <div className=\"text-sm text-text-tertiary\">Requires deep understanding of unique situations</div>\n              </div>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <svg className=\"w-5 h-5 text-accent-orange mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n              <div>\n                <div className=\"font-semibold text-text-primary\">Unstructured or missing data</div>\n                <div className=\"text-sm text-text-tertiary\">Information trapped in emails, chats, or conversations</div>\n              </div>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <svg className=\"w-5 h-5 text-accent-orange mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n              <div>\n                <div className=\"font-semibold text-text-primary\">Frequent exceptions</div>\n                <div className=\"text-sm text-text-tertiary\">Each request requires special handling or judgment</div>\n              </div>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <svg className=\"w-5 h-5 text-accent-orange mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n              <div>\n                <div className=\"font-semibold text-text-primary\">Requires physical presence</div>\n                <div className=\"text-sm text-text-tertiary\">Hands-on work with hardware or on-site equipment</div>\n              </div>\n            </li>\n          </ul>\n          <div className=\"mt-4 pt-4 border-t border-bg-card-alt/20\">\n            <div className=\"text-sm font-semibold text-text-primary mb-2\">Examples:</div>\n            <div className=\"text-sm text-text-secondary\">Hardware repairs, vague user requests, complex troubleshooting</div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Introduction to Use Cases */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          What You Can Automate Right Now\n        </h2>\n        <p className=\"text-lg text-text-secondary leading-relaxed\">\n          Based on your stack, here are <span className=\"font-semibold text-text-primary\">examples of use cases where AI Workers can deliver immediate value</span>. We've identified the <span className=\"font-semibold text-text-primary\">easiest wins first</span>—high-confidence automations that can be deployed quickly using your existing tools and APIs.\n        </p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {topUseCases.map((useCase, index) => (\n          <Card key={useCase.use_case_id} hover>\n            {/* Rank Number */}\n            <div className=\"text-sm font-medium mb-1\" style={{ color: '#8a8784' }}>\n              {String(index + 1).padStart(2, '0')}\n            </div>\n\n            {/* Header with Priority */}\n            <div className=\"flex items-start justify-between mb-2\">\n              <div>\n                <h3 className=\"text-xl font-bold text-text-primary\">\n                  {useCase.name}\n                </h3>\n              </div>\n              \n              {/* Category Badge */}\n              <div className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap ${getCategoryColor(useCase.category)}`}>\n                {useCase.category}\n              </div>\n            </div>\n\n            {/* Description */}\n            <p className=\"text-text-secondary mb-6 leading-relaxed\">\n              {useCase.value_proposition}\n            </p>\n\n            {/* Impact Metrics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-bg-primary rounded-lg mb-6\">\n              <div>\n                <div className=\"text-2xl font-bold text-accent-green\">\n                  {useCase.estimated_monthly_deflection.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Tickets/Month</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-accent-blue\">\n                  {Math.round(useCase.estimated_hours_saved).toLocaleString()} hrs\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Time Saved/Month</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-text-primary\">\n                  {useCase.time_to_value_days} days\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Time to Value</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-accent-orange\">\n                  {Math.round(useCase.confidence * 100)}%\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Confidence</div>\n              </div>\n            </div>\n\n            {/* How It Works - Collapsible */}\n            <div className=\"mb-4\">\n              <button\n                onClick={() => setExpandedWorkflows(prev => ({\n                  ...prev,\n                  [useCase.use_case_id]: !prev[useCase.use_case_id]\n                }))}\n                className=\"flex items-center gap-2 text-sm font-semibold text-text-primary mb-2 hover:text-highlight transition-colors duration-200 w-full text-left\"\n              >\n                <span>How it works:</span>\n                {/* Tool Logos */}\n                {useCase.required_tools && useCase.required_tools.length > 0 && (\n                  <ConnectedAppLogos \n                    apps={useCase.required_tools.map(convertToolName)}\n                    maxVisible={5}\n                    size={32}\n                  />\n                )}\n                <svg\n                  className={`w-4 h-4 transition-transform duration-200 ml-auto ${expandedWorkflows[useCase.use_case_id] ? 'rotate-180' : ''}`}\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                </svg>\n              </button>\n              \n              {expandedWorkflows[useCase.use_case_id] && (\n                <ul className=\"space-y-1 mt-4\">\n                  {useCase.workflow_steps.map((step, i) => (\n                    <li key={i} className=\"text-sm text-text-secondary flex items-start gap-2\">\n                      <span className=\"text-accent-green mt-0.5 flex-shrink-0\">→</span>\n                      <span>{step}</span>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          </Card>\n        ))}\n      </div>\n\n    </div>\n  );\n}\n","size_bytes":20079},"archive/reports/pages/v3/[id]/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { AssessmentData, ReadinessScore } from \"@/types\";\nimport { calculateReadinessScore } from \"@/lib/scoringAlgorithm\";\nimport { FeasibilityEngine, FeasibilityResult } from \"@/lib/engines/feasibility-engine\";\nimport { UseCaseMatcher, MatchedUseCase } from \"@/lib/engines/use-case-matcher\";\nimport { ROICalculator, ROIResult } from \"@/lib/engines/roi-calculator\";\nimport ExecutiveSummary from \"@/components/assessment/report/ExecutiveSummary-v3\";\nimport StackAnalysis from \"@/components/assessment/report/v3/StackAnalysis\";\nimport GapAnalysis from \"@/components/assessment/report/v3/GapAnalysis\";\nimport OpportunityAnalysis from \"@/components/assessment/report/OpportunityAnalysis-v3\";\nimport BestFitUseCases from \"@/components/assessment/report/BestFitUseCases-v3\";\nimport ROIBreakdown from \"@/components/assessment/report/v3/ROIBreakdown\";\nimport GetStartedRoadmap from \"@/components/assessment/report/GetStartedRoadmap-v3\";\nimport ExpectedOutcomes from \"@/components/assessment/report/ExpectedOutcomes-v3\";\nimport CustomReportCTA from \"@/components/assessment/report/v3/CustomReportCTA\";\nimport UnlockReportModal from \"@/components/cta/UnlockReportModal\";\n\nexport default function ReportV3Page() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState<ReadinessScore | null>(null);\n  const [assessmentData, setAssessmentData] = useState<AssessmentData | null>(null);\n  const [showModal, setShowModal] = useState(false);\n  \n  // New engine results\n  const [feasibilityResults, setFeasibilityResults] = useState<FeasibilityResult[]>([]);\n  const [matchedUseCases, setMatchedUseCases] = useState<MatchedUseCase[]>([]);\n  const [roiResult, setRoiResult] = useState<ROIResult | null>(null);\n\n  useEffect(() => {\n    // Get data from sessionStorage\n    const dataStr = sessionStorage.getItem(\"assessmentData\");\n    if (!dataStr) {\n      router.push(\"/\");\n      return;\n    }\n\n    const data: AssessmentData = JSON.parse(dataStr);\n    setAssessmentData(data);\n\n    // Calculate score and run engines\n    setTimeout(() => {\n      const calcScore = calculateReadinessScore(data);\n      setScore(calcScore);\n      \n      // Initialize engines\n      const feasibilityEngine = new FeasibilityEngine();\n      const useCaseMatcher = new UseCaseMatcher();\n      const roiCalculator = new ROICalculator();\n      \n      // Convert tech stack to tools format\n      const tools = data.techStack?.map(toolName => ({\n        name: toolName,\n        license_tier: 'standard' // Default tier, could be enhanced later\n      })) || [];\n      \n      // Convert ticket distribution to activities format\n      const activities = [];\n      if (data.ticketDistribution && data.monthlyTickets) {\n        const categoryMapping: Record<string, {key: string, ttr: number}> = {\n          applications: {key: 'app_access', ttr: 1.7},\n          hardware: {key: 'hardware', ttr: 2.5},\n          onboarding: {key: 'onboarding', ttr: 4.0},\n          distributionLists: {key: 'distribution_lists', ttr: 0.75},\n          network: {key: 'network', ttr: 1.5},\n          security: {key: 'security', ttr: 3.0}\n        };\n        \n        for (const [key, percentage] of Object.entries(data.ticketDistribution)) {\n          const mapping = categoryMapping[key];\n          if (mapping && percentage > 0) {\n            activities.push({\n              category: mapping.key,\n              monthly_volume: Math.round((data.monthlyTickets * percentage) / 100),\n              avg_ttr_hours: mapping.ttr\n            });\n          }\n        }\n      }\n      \n      // Run analysis engines\n      const feasibility = feasibilityEngine.analyzeStack(tools);\n      const matches = useCaseMatcher.matchUseCases(activities, feasibility);\n      const roi = roiCalculator.calculateROI(data.monthlyTickets || 1000, matches);\n      \n      // Store results\n      setFeasibilityResults(feasibility);\n      setMatchedUseCases(matches);\n      setRoiResult(roi);\n      \n      setLoading(false);\n    }, 3000);\n\n    // Show modal after 45 seconds\n    const modalTimer = setTimeout(() => {\n      setShowModal(true);\n    }, 45000);\n\n    return () => clearTimeout(modalTimer);\n  }, [router]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-bg-primary flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-16 w-16 border-4 border-highlight border-t-transparent mb-8\" />\n          <h2 className=\"text-2xl font-bold text-text-primary mb-2\">\n            Analyzing your environment...\n          </h2>\n          <p className=\"text-text-tertiary\">\n            Running AI Worker readiness analysis\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!score || !assessmentData) return null;\n\n  return (\n    <div className=\"min-h-screen bg-bg-primary\">\n      {/* Header */}\n      <header className=\"border-b border-bg-card-alt/20\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <Link href=\"/\">\n            <Image \n              src=\"/images/aiwork-logo.png\" \n              alt=\"ai.work\" \n              width={120} \n              height={30}\n              className=\"h-7 w-auto\"\n            />\n          </Link>\n        </div>\n      </header>\n\n      <main className=\"py-12\">\n        <div className=\"container mx-auto px-4 max-w-7xl\">\n          {/* Report Header */}\n          <div className=\"mb-20\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h1 className=\"text-5xl font-normal text-text-primary mb-3\">\n                  AI Worker Readiness Blueprint\n                </h1>\n                <p className=\"text-xl text-text-tertiary\">\n                  Based on your {assessmentData.techStack?.length || 0} selected tools and {(assessmentData.monthlyTickets || 0).toLocaleString()} monthly tickets\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm text-text-tertiary\">Report Version</div>\n                <div className=\"text-2xl font-bold text-text-primary\">V3.0</div>\n              </div>\n            </div>\n          </div>\n\n        {/* Executive Summary */}\n        {roiResult && (\n          <ExecutiveSummary\n            roiResult={roiResult}\n            totalMonthlyTickets={assessmentData.monthlyTickets || 1000}\n            assessmentData={{\n              techStack: assessmentData.techStack || [],\n              additionalContext: assessmentData.additionalContext\n            }}\n            matchedUseCases={matchedUseCases}\n          />\n        )}\n\n        <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n        {/* Stack Analysis with real API data */}\n        {feasibilityResults.length > 0 && (\n          <>\n            <StackAnalysis \n              feasibilityResults={feasibilityResults}\n              matchedUseCases={matchedUseCases}\n            />\n            <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n          </>\n        )}\n\n        {/* New: Gap Analysis */}\n        <GapAnalysis feasibilityResults={feasibilityResults} />\n\n        <OpportunityAnalysis\n          matchedUseCases={matchedUseCases}\n          feasibilityResults={feasibilityResults}\n          topN={10}\n        />\n\n        <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n        <BestFitUseCases\n          matchedUseCases={matchedUseCases}\n          feasibilityResults={feasibilityResults}\n        />\n\n        <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n        {/* New: ROI Breakdown */}\n        {roiResult && (\n          <>\n            <ROIBreakdown \n              roiResult={roiResult}\n              feasibilityResults={feasibilityResults}\n            />\n            <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n          </>\n        )}\n\n        <GetStartedRoadmap\n          matchedUseCases={matchedUseCases}\n          feasibilityResults={feasibilityResults}\n        />\n\n        <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n        {roiResult && (\n          <ExpectedOutcomes\n            roiResult={roiResult}\n            totalMonthlyTickets={assessmentData.monthlyTickets || 1000}\n          />\n        )}\n\n        <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n        <CustomReportCTA onRequestDiscovery={() => setShowModal(true)} />\n        </div>\n      </main>\n\n      {/* Modal */}\n      {showModal && (\n        <UnlockReportModal\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":8760},"archive/reports/components/GetStartedRoadmap-v3.tsx":{"content":"import Card from '@/components/ui/Card';\nimport { MatchedUseCase } from '@/types/types-v3';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface GetStartedRoadmapProps {\n  matchedUseCases: MatchedUseCase[];\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport default function GetStartedRoadmap({ matchedUseCases, feasibilityResults }: GetStartedRoadmapProps) {\n  \n  // Group and prioritize\n  const immediateUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'immediate')\n    .sort((a, b) => b.fit_score - a.fit_score);\n  \n  const quickWinUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'quick_win')\n    .sort((a, b) => b.fit_score - a.fit_score);\n\n  // Find future/additional capabilities to expand into\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n  const matchedIds = new Set(matchedUseCases.map(uc => uc.use_case_id));\n  \n  const futureCapabilities: any[] = [];\n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    if (enabledUseCaseIds.has(uc.id) && !matchedIds.has(uc.id)) {\n      futureCapabilities.push(uc);\n    }\n  });\n  \n  // Sort by implementation effort and time to value\n  futureCapabilities.sort((a, b) => {\n    const effortOrder: Record<string, number> = { low: 0, medium: 1, high: 2 };\n    if (effortOrder[a.implementation_effort] !== effortOrder[b.implementation_effort]) {\n      return effortOrder[a.implementation_effort] - effortOrder[b.implementation_effort];\n    }\n    return a.time_to_value_days - b.time_to_value_days;\n  });\n\n  if (matchedUseCases.length === 0 && futureCapabilities.length === 0) {\n    return null;\n  }\n\n  const renderPhase = (\n    title: string,\n    timeframe: string,\n    useCases: MatchedUseCase[],\n    phaseColor: string,\n    icon: string\n  ) => {\n    if (useCases.length === 0) return null;\n\n    const totalTickets = useCases.reduce((sum, uc) => sum + uc.estimated_monthly_deflection, 0);\n    const totalHours = useCases.reduce((sum, uc) => sum + uc.estimated_hours_saved, 0);\n\n    return (\n      <div className=\"relative\">\n        <Card>\n          <div className=\"flex items-start gap-4 mb-6\">\n            <div className={`flex-shrink-0 w-12 h-12 ${phaseColor} rounded-full flex items-center justify-center relative z-10`}>\n              <svg className=\"w-6 h-6 text-current\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                {icon === '🚀' && <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />}\n                {icon === '⚡' && <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />}\n                {icon === '📈' && <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />}\n              </svg>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-xl font-bold text-text-primary mb-1\">{title}</h3>\n              <p className=\"text-sm text-text-tertiary\">{timeframe}</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-accent-blue\">{totalTickets.toLocaleString()} tickets/month</div>\n              <div className=\"text-sm font-semibold text-text-primary\">{Math.round(totalHours).toLocaleString()} hrs saved/month</div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            {useCases.map((useCase, index) => (\n              <div key={useCase.use_case_id} className=\"p-4 bg-bg-primary rounded-lg border border-brand-secondary/10\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"text-sm font-semibold text-accent-blue\">\n                        Step {index + 1}\n                      </span>\n                      <h4 className=\"text-base font-bold text-text-primary\">\n                        {useCase.name}\n                      </h4>\n                    </div>\n                    <p className=\"text-sm text-text-secondary line-clamp-1\">\n                      {useCase.description}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mt-3\">\n                  <div>\n                    <div className=\"text-sm font-bold text-accent-green\">\n                      {useCase.estimated_monthly_deflection.toLocaleString()}\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Tickets</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-bold text-accent-blue\">\n                      {Math.round(useCase.estimated_hours_saved).toLocaleString()}h\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Saved</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-bold text-text-primary\">\n                      {useCase.time_to_value_days}d\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Setup</div>\n                  </div>\n                  <div>\n                    <div className={`text-sm font-bold ${\n                      useCase.implementation_effort === 'low' ? 'text-accent-green' :\n                      useCase.implementation_effort === 'medium' ? 'text-accent-blue' :\n                      'text-accent-orange'\n                    }`}>\n                      {useCase.implementation_effort}\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Effort</div>\n                  </div>\n                </div>\n\n                {/* Prerequisites Preview */}\n                {useCase.prerequisites.length > 0 && (\n                  <div className=\"mt-3 pt-3 border-t border-brand-secondary/10\">\n                    <details className=\"group\">\n                      <summary className=\"text-xs text-accent-blue cursor-pointer hover:underline list-none flex items-center gap-1\">\n                        <svg className=\"w-3 h-3 transition-transform group-open:rotate-90\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                        </svg>\n                        View {useCase.prerequisites.length} prerequisite{useCase.prerequisites.length !== 1 ? 's' : ''}\n                      </summary>\n                      <ul className=\"mt-2 space-y-1 ml-4\">\n                        {useCase.prerequisites.map((prereq, i) => (\n                          <li key={i} className=\"text-xs text-text-secondary flex items-start gap-1\">\n                            <span className=\"text-accent-green mt-0.5\">✓</span>\n                            {prereq}\n                          </li>\n                        ))}\n                      </ul>\n                    </details>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  // Calculate cumulative impact\n  const allPriorityUseCases = [...immediateUseCases, ...quickWinUseCases];\n  const cumulativeTickets = allPriorityUseCases.reduce((sum, uc) => sum + uc.estimated_monthly_deflection, 0);\n  const cumulativeHours = allPriorityUseCases.reduce((sum, uc) => sum + uc.estimated_hours_saved, 0);\n  const cumulativeFTE = (cumulativeHours * 12) / 2000;\n  const cumulativeValue = cumulativeFTE * 100000; // $100K fully loaded cost\n\n  return (\n    <div className=\"max-w-4xl mx-auto mb-16\">\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          How to Get Started\n        </h2>\n        <p className=\"text-text-secondary max-w-2xl mx-auto\">\n          A phased deployment plan showing when to deploy each AI Worker, based on your current capabilities and business impact.\n        </p>\n      </div>\n\n      <div className=\"space-y-8\">\n        {renderPhase(\n          'Week 1: Quick Deploy',\n          'Deploy in first 7 days',\n          immediateUseCases,\n          'bg-accent-green/20',\n          '🚀'\n        )}\n\n        {renderPhase(\n          'Month 1-2: Build Momentum',\n          'Deploy over next 4-8 weeks',\n          quickWinUseCases,\n          'bg-accent-blue/20',\n          '⚡'\n        )}\n\n        {/* Phase 3: Scale & Expand */}\n        {futureCapabilities.length > 0 && (\n          <div className=\"relative\">\n            <Card>\n              <div className=\"flex items-start gap-4 mb-6\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-accent-orange/20 rounded-full flex items-center justify-center relative z-10\">\n                  <svg className=\"w-6 h-6 text-current\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n                  </svg>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-bold text-text-primary mb-1\">\n                    Month 3+: Scale & Expand\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Expand automation across more workflows\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-accent-orange\">{futureCapabilities.length}</div>\n                  <div className=\"text-xs text-text-tertiary\">more AI Workers</div>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {futureCapabilities.map((uc: any) => (\n                  <div key={uc.id} className=\"p-4 bg-bg-primary rounded-lg border border-brand-secondary/10\">\n                    <h4 className=\"text-sm font-bold text-text-primary mb-1\">\n                      {uc.name}\n                    </h4>\n                    <p className=\"text-xs text-text-secondary line-clamp-2 mb-3\">\n                      {uc.description}\n                    </p>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-text-tertiary\">{uc.category}</span>\n                      <span className={`font-medium ${\n                        uc.implementation_effort === 'low' ? 'text-accent-green' :\n                        uc.implementation_effort === 'medium' ? 'text-accent-blue' :\n                        'text-accent-orange'\n                      }`}>\n                        {uc.time_to_value_days}d • {uc.implementation_effort} effort\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          </div>\n        )}\n      </div>\n\n      {/* Cumulative Impact Card */}\n      {allPriorityUseCases.length > 0 && (\n        <div className=\"mt-12\" style={{ boxShadow: '0 0 20px rgba(130, 216, 149, 0.3)', borderRadius: '12px' }}>\n          <Card>\n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-xl font-bold text-text-primary mb-2\">\n                Cumulative Impact (First 2 Months)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                By deploying AI workers with these {allPriorityUseCases.length} skills\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-accent-green mb-1\">\n                  {cumulativeTickets.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Tickets Automated</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-accent-blue mb-1\">\n                  {Math.round(cumulativeHours).toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Hours Saved/Month</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-text-primary mb-1\">\n                  {cumulativeFTE.toFixed(1)}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">FTE Capacity Freed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-accent-orange mb-1\">\n                  ${Math.round(cumulativeValue / 1000).toLocaleString()}K\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Annual Value</div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Next Steps CTA */}\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-sm text-text-tertiary mb-4\">\n          Ready to start your deployment?\n        </p>\n        <a \n          href=\"https://www.ai.work/book-a-demo\" \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n          className=\"px-6 py-3 bg-white text-black rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-flex items-center gap-2\"\n        >\n          <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n          Schedule Implementation Planning Call\n        </a>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13646},"archive/fonts/README.md":{"content":"# Font Files Archive\n\n## Duplicate Fonts Removed\n\nThe fonts were duplicated in two locations:\n- `public/fonts/` (ACTIVE - canonical location)\n- `src/components/font/` (ARCHIVED - removed duplicate)\n\nThe `component-fonts-duplicate` folder contains the exact same NB International Pro font family files that were duplicated in the components directory.\n\n## Active Font Location\n\nAll fonts should be served from `public/fonts/` which includes:\n- NBInternationalPro-Bold.ttf\n- NBInternationalPro-BoldItalic.ttf\n- NBInternationalPro-Book.ttf\n- NBInternationalPro-BookItalic.ttf\n- NBInternationalPro-Italic.ttf\n- NBInternationalPro-Light.ttf\n- NBInternationalPro-LightItalic.ttf\n- NBInternationalPro-Medium.ttf\n- NBInternationalPro-MediumItalic.ttf\n- NBInternationalPro-Mono.ttf\n- NBInternationalPro-Regular.ttf\n\n## License\n\nThe font license files (NB-EndUserLicenseAgreement.txt and design info) are preserved in this archive.\n\n## Date Archived\nOctober 27, 2025\n","size_bytes":957},"archive/reports/components/ImpactMetrics.tsx":{"content":"import Card from '@/components/ui/Card';\nimport CountUp from 'react-countup';\nimport { ImpactProjection } from '@/types';\n\ninterface ImpactMetricsProps {\n  phase1: ImpactProjection;\n  phase2: ImpactProjection;\n}\n\nexport default function ImpactMetrics({ phase1, phase2 }: ImpactMetricsProps) {\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      <h2 className=\"text-3xl font-bold text-text-primary mb-8 text-center\">\n        Your Projected Impact\n      </h2>\n\n      <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n        {/* Phase 1 */}\n        <Card>\n          <h3 className=\"text-xl font-bold text-text-primary mb-6\">\n            {phase1.phase}\n          </h3>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"text-3xl font-bold text-accent-green\">\n                <CountUp end={phase1.ticketsHandled} duration={2} separator=\",\" />\n              </div>\n              <div className=\"text-sm text-text-tertiary\">Tickets Handled Autonomously/Month</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent-blue\">\n                <CountUp end={phase1.timeSaved} duration={2} separator=\",\" /> hrs\n              </div>\n              <div className=\"text-sm text-text-tertiary\">Time Saved/Month</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-text-primary\">\n                <CountUp end={phase1.ftesSaved} duration={2} decimals={1} /> FTEs\n              </div>\n              <div className=\"text-sm text-text-tertiary\">Team Capacity Freed</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent-orange\">\n                $<CountUp end={phase1.costSaved} duration={2} separator=\",\" />\n              </div>\n              <div className=\"text-sm text-text-tertiary\">Cost Savings/Month</div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Phase 2 */}\n        <Card>\n          <h3 className=\"text-xl font-bold text-text-primary mb-6\">\n            {phase2.phase}\n          </h3>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"text-3xl font-bold text-accent-green\">\n                <CountUp end={phase2.ticketsHandled} duration={2} separator=\",\" />\n              </div>\n              <div className=\"text-sm text-text-tertiary\">Tickets Handled (as AI learns)</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent-blue\">\n                <CountUp end={phase2.timeSaved} duration={2} separator=\",\" /> hrs\n              </div>\n              <div className=\"text-sm text-text-tertiary\">Time Saved/Month</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-text-primary\">\n                <CountUp end={phase2.ftesSaved} duration={2} decimals={1} /> FTEs\n              </div>\n              <div className=\"text-sm text-text-tertiary\">Team Capacity Freed</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent-orange\">\n                $<CountUp end={phase2.costSaved} duration={2} separator=\",\" />\n              </div>\n              <div className=\"text-sm text-text-tertiary\">Cost Savings/Month</div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Annual Impact */}\n      <Card>\n        <h3 className=\"text-lg font-bold text-text-primary mb-4\">📈 Annual Impact</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n          <div>\n            <div className=\"text-2xl font-bold text-accent-orange\">\n              $<CountUp end={phase2.costSaved * 12} duration={2} separator=\",\" />+\n            </div>\n            <div className=\"text-xs text-text-tertiary\">Labor Savings</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-text-primary\">\n              {phase2.ftesSaved}+ FTEs\n            </div>\n            <div className=\"text-xs text-text-tertiary\">To Strategic Work</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-accent-green\">\n              70%\n            </div>\n            <div className=\"text-xs text-text-tertiary\">Faster Resolution</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-accent-blue\">\n              ✨\n            </div>\n            <div className=\"text-xs text-text-tertiary\">Happier Employees</div>\n          </div>\n        </div>\n      </Card>\n\n      <p className=\"text-sm text-text-tertiary text-center mt-4\">\n        Note: Unlike traditional automation with static performance, AI Workers improve over time as they learn your environment's patterns and policies.\n      </p>\n    </div>\n  );\n}\n","size_bytes":4763},"archive/reports/components/v2/GuardrailsGovernance.tsx":{"content":"interface GuardrailsGovernanceProps {\n  hasApprovalWorkflows: boolean;\n}\n\nexport default function GuardrailsGovernance({ hasApprovalWorkflows }: GuardrailsGovernanceProps) {\n  return (\n    <div className=\"mb-16\">\n      <h2 className=\"text-4xl font-bold text-white mb-8\">Guardrails & Governance</h2>\n      <p className=\"text-lg text-gray-400 mb-8\">\n        AI Workers operate within enterprise-grade controls, ensuring compliance, security, and audit trails.\n      </p>\n\n      <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n        {/* Approval Workflows */}\n        <div className=\"bg-[#1a1a1a] border border-gray-800 rounded-lg p-6\">\n          <div className=\"flex items-start gap-3 mb-4\">\n            <div className=\"p-2 bg-blue-900/30 rounded-lg\">\n              <svg className=\"w-6 h-6 text-blue-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"font-bold text-white mb-2\">Approval Workflows</h3>\n              <p className=\"text-sm text-gray-400\">\n                AI Workers integrate with your existing approval processes. They can route requests through managers,\n                security teams, or compliance officers based on your policies.\n              </p>\n            </div>\n          </div>\n          <div className=\"space-y-2 mt-4\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <span className=\"text-green-500\">✓</span>\n              <span className=\"text-gray-300\">Multi-level approval chains</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm\">\n              <span className=\"text-green-500\">✓</span>\n              <span className=\"text-gray-300\">Conditional routing rules</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm\">\n              <span className=\"text-green-500\">✓</span>\n              <span className=\"text-gray-300\">Auto-escalation for timeouts</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Role-Based Policies */}\n        <div className=\"bg-[#1a1a1a] border border-gray-800 rounded-lg p-6\">\n          <div className=\"flex items-start gap-3 mb-4\">\n            <div className=\"p-2 bg-purple-900/30 rounded-lg\">\n              <svg className=\"w-6 h-6 text-purple-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"font-bold text-white mb-2\">Role-Based Access Control</h3>\n              <p className=\"text-sm text-gray-400\">\n                Define what AI Workers can and cannot do based on request type, user role, department, and resource sensitivity.\n              </p>\n            </div>\n          </div>\n          <div className=\"space-y-2 mt-4\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <span className=\"text-green-500\">✓</span>\n              <span className=\"text-gray-300\">Granular permission policies</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm\">\n              <span className=\"text-green-500\">✓</span>\n              <span className=\"text-gray-300\">Department-level restrictions</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm\">\n              <span className=\"text-green-500\">✓</span>\n              <span className=\"text-gray-300\">Resource sensitivity tagging</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Guardrails */}\n      <div className=\"bg-[#1a1a1a] border border-gray-800 rounded-lg p-6\">\n        <h3 className=\"font-bold text-white mb-6\">Additional Enterprise Guardrails</h3>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {/* Audit Logs */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n              </svg>\n              <h4 className=\"font-semibold text-white\">Immutable Audit Logs</h4>\n            </div>\n            <p className=\"text-sm text-gray-400\">\n              Every action logged with timestamp, user context, and outcome. SIEM-compatible exports.\n            </p>\n          </div>\n\n          {/* Rate Limiting */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <h4 className=\"font-semibold text-white\">Rate Limiting</h4>\n            </div>\n            <p className=\"text-sm text-gray-400\">\n              Configurable thresholds prevent runaway automation. Circuit breakers for anomaly detection.\n            </p>\n          </div>\n\n          {/* Data Residency */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <h4 className=\"font-semibold text-white\">Data Residency</h4>\n            </div>\n            <p className=\"text-sm text-gray-400\">\n              Choose deployment region. PII handling complies with GDPR, CCPA, and industry standards.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Current State Indicator */}\n      {hasApprovalWorkflows ? (\n        <div className=\"mt-6 bg-green-900/20 border border-green-800/30 rounded-lg p-6\">\n          <div className=\"flex items-start gap-3\">\n            <svg className=\"w-5 h-5 text-green-400 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n            </svg>\n            <div>\n              <h3 className=\"font-semibold text-white mb-2\">Your Organization is Ready</h3>\n              <p className=\"text-sm text-gray-300\">\n                You already have approval workflows in place. AI Workers will integrate seamlessly with your existing governance model.\n              </p>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mt-6 bg-yellow-900/20 border border-yellow-800/30 rounded-lg p-6\">\n          <div className=\"flex items-start gap-3\">\n            <svg className=\"w-5 h-5 text-yellow-400 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            <div>\n              <h3 className=\"font-semibold text-white mb-2\">Recommendation: Add Approval Workflows</h3>\n              <p className=\"text-sm text-gray-300\">\n                We recommend implementing basic approval routing before deploying AI Workers. This ensures proper governance\n                and gives stakeholders confidence in autonomous operations.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8223},"archive/reports/components/v3/ExecutiveSummary.tsx":{"content":"import { ReadinessScore, AssessmentData } from '@/types';\nimport ScoreCircle from '../ScoreCircle';\nimport CountUp from 'react-countup';\n\ninterface ExecutiveSummaryProps {\n  score: ReadinessScore;\n  assessmentData: AssessmentData;\n  estimatedDeflection: number;\n  hoursSaved: number;\n  fteImpact: number;\n}\n\nexport default function ExecutiveSummary({\n  score,\n  assessmentData,\n  estimatedDeflection,\n  hoursSaved,\n  fteImpact,\n}: ExecutiveSummaryProps) {\n  return (\n    <div className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-8\">Here's What We Found</h2>\n\n      {/* Centered Score */}\n      <div className=\"flex justify-center mb-12\">\n        <div className=\"text-center\">\n          <h3 className=\"text-xl font-bold text-text-primary mb-6\">AI Worker Readiness</h3>\n          <ScoreCircle score={score.total} rating={score.rating} />\n        </div>\n      </div>\n\n      {/* What This Score Means */}\n      <div className=\"max-w-4xl mx-auto mb-12 space-y-6\">\n        <p className=\"text-lg text-text-tertiary leading-relaxed\">\n          Our algorithm analyzed your tech stack ({assessmentData.techStack.length} tools), \n          team size ({assessmentData.teamSize} IT staff), and ticket volume ({assessmentData.ticketVolume} monthly). \n          Your readiness score of <span className=\"text-text-primary font-bold\">{score.total}/100</span> reflects \n          three factors: tech stack compatibility with AI Workers, process maturity, and volume of \n          repetitive work ready for autonomous handling.\n        </p>\n\n        <p className=\"text-lg text-text-tertiary leading-relaxed\">\n          <span className=\"text-text-primary font-semibold\">Bottom line:</span> AI Workers can handle{' '}\n          <span className=\"text-text-primary font-bold\">{estimatedDeflection}% of your ticket volume</span>, returning{' '}\n          <span className=\"text-text-primary font-bold\">{hoursSaved.toLocaleString()} hours annually</span> to \n          your team for strategic work. That's roughly{' '}\n          <span className=\"text-text-primary font-bold\">{fteImpact} FTE</span> worth of capacity.\n        </p>\n      </div>\n\n      {/* Impact Metrics */}\n      <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 transition-all duration-200\">\n        <h3 className=\"text-2xl font-bold text-text-primary mb-8 text-center\">Immediate Opportunity</h3>\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-highlight mb-2\">\n              <CountUp end={estimatedDeflection} duration={2} />%\n            </div>\n            <div className=\"text-sm text-text-tertiary uppercase tracking-wider\">Ticket Deflection</div>\n            <p className=\"text-xs text-text-tertiary mt-2\">Of total volume handled autonomously</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-highlight mb-2\">\n              <CountUp end={hoursSaved} duration={2} separator=\",\" />\n            </div>\n            <div className=\"text-sm text-text-tertiary uppercase tracking-wider\">Hours Saved (Annual)</div>\n            <p className=\"text-xs text-text-tertiary mt-2\">Returned to team for strategic work</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-highlight mb-2\">\n              ~<CountUp end={fteImpact} duration={2} decimals={1} />\n            </div>\n            <div className=\"text-sm text-text-tertiary uppercase tracking-wider\">FTE Impact</div>\n            <p className=\"text-xs text-text-tertiary mt-2\">Worth of capacity unlocked</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3730},"archive/reports/pages/v2-archive-original/v2/[id]/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { AssessmentData, ReadinessScore } from \"@/types\";\nimport { calculateReadinessScore } from \"@/lib/scoringAlgorithm\";\nimport { generateOpportunities, getTop5Opportunities, calculateTotalDeflection } from \"@/lib/opportunityEngine\";\nimport ExecutiveSummary from \"@/components/assessment/report/v2/ExecutiveSummary\";\nimport WhereAutomationsWin from \"@/components/assessment/report/v2/WhereAutomationsWin\";\nimport AIWorkerSwimlanes from \"@/components/assessment/report/v2/AIWorkerSwimlanes\";\nimport TechStackCoverage from \"@/components/assessment/report/v2/TechStackCoverage\";\nimport GuardrailsGovernance from \"@/components/assessment/report/v2/GuardrailsGovernance\";\nimport PilotProjection from \"@/components/assessment/report/v2/PilotProjection\";\nimport DiscoveryCTA from \"@/components/assessment/report/v2/DiscoveryCTA\";\nimport UnlockReportModal from \"@/components/cta/UnlockReportModal\";\n\nexport default function ReportV2Page() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState<ReadinessScore | null>(null);\n  const [assessmentData, setAssessmentData] = useState<AssessmentData | null>(null);\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    // Get data from sessionStorage\n    const dataStr = sessionStorage.getItem(\"assessmentData\");\n    if (!dataStr) {\n      router.push(\"/\");\n      return;\n    }\n\n    const data: AssessmentData = JSON.parse(dataStr);\n    setAssessmentData(data);\n\n    // Calculate score\n    setTimeout(() => {\n      const calcScore = calculateReadinessScore(data);\n      setScore(calcScore);\n      setLoading(false);\n    }, 3000);\n\n    // Show modal after 45 seconds (longer for V2)\n    const modalTimer = setTimeout(() => {\n      setShowModal(true);\n    }, 45000);\n\n    return () => clearTimeout(modalTimer);\n  }, [router]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-16 w-16 border-4 border-accent-blue border-t-transparent mb-8\" />\n          <h2 className=\"text-2xl font-bold text-text-primary mb-2\">\n            Analyzing your environment...\n          </h2>\n          <p className=\"text-text-secondary\">\n            Generating your comprehensive automation roadmap\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!score || !assessmentData) return null;\n\n  // Generate automation opportunities\n  const topOpportunities = getTop5Opportunities(assessmentData);\n  const allOpportunities = generateOpportunities(assessmentData);\n  const estimatedDeflection = calculateTotalDeflection(topOpportunities);\n\n  // Calculate impact metrics\n  const totalTickets = parseInt(assessmentData.ticketVolume.split(\"-\")[0]) || 1000;\n  const hoursSaved = Math.round((totalTickets * 12 * estimatedDeflection * 0.75) / 100);\n  const fteImpact = parseFloat((hoursSaved / 2080).toFixed(1));\n\n  // Check if they have approval workflows\n  const hasApprovalWorkflows =\n    assessmentData.approvalWorkflows === \"automated\" ||\n    assessmentData.approvalWorkflows === \"manual\";\n\n  return (\n    <main className=\"min-h-screen bg-black py-12\">\n      <div className=\"container mx-auto px-4 max-w-7xl\">\n        {/* Header */}\n        <div className=\"mb-12\">\n          <button\n            onClick={() => router.push(\"/report/new\")}\n            className=\"text-text-tertiary hover:text-text-primary mb-4 flex items-center gap-2\"\n          >\n            ← Back to Summary Report\n          </button>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <h1 className=\"text-5xl font-bold text-white mb-3\">\n                AI Automation Readiness Report\n              </h1>\n              <p className=\"text-xl text-gray-400\">\n                Your comprehensive roadmap to autonomous IT operations\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-gray-500\">Report Version</div>\n              <div className=\"text-2xl font-bold text-white\">V2.0</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Executive Summary */}\n        <ExecutiveSummary\n          score={score}\n          topOpportunities={topOpportunities}\n          estimatedDeflection={estimatedDeflection}\n          hoursSaved={hoursSaved}\n          fteImpact={fteImpact}\n        />\n\n        {/* Where Automations Win First */}\n        <WhereAutomationsWin />\n\n        {/* AI Worker Swimlanes */}\n        <AIWorkerSwimlanes opportunities={allOpportunities} />\n\n        {/* Tech Stack Coverage */}\n        <TechStackCoverage selectedTools={assessmentData.techStack} />\n\n        {/* Guardrails & Governance */}\n        <GuardrailsGovernance hasApprovalWorkflows={hasApprovalWorkflows} />\n\n        {/* Pilot Projection */}\n        <PilotProjection />\n\n        {/* Discovery CTA */}\n        <DiscoveryCTA onRequestDiscovery={() => setShowModal(true)} />\n\n        {/* Footer Note */}\n        <div className=\"text-center text-gray-500 text-sm\">\n          <p className=\"mb-2\">\n            This report is based on anonymized IT automation data and your self-reported inputs.\n          </p>\n          <p>\n            For 100% accurate results, request a custom discovery report with actual ticket analysis.\n          </p>\n        </div>\n      </div>\n\n      {/* Modal */}\n      {showModal && (\n        <UnlockReportModal\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n        />\n      )}\n    </main>\n  );\n}\n","size_bytes":5693},"archive/reports/components/v3/CustomReportCTA.tsx":{"content":"interface CustomReportCTAProps {\n  onRequestDiscovery?: () => void;\n}\n\nexport default function CustomReportCTA({ onRequestDiscovery }: CustomReportCTAProps) {\n  return (\n    <div className=\"mb-20\">\n      <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-xl py-8 px-6 transition-all duration-200\" style={{ boxShadow: '0 0 20px rgba(130, 216, 149, 0.3)' }}>\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-4xl font-bold text-text-primary mb-6\">Get 100% Accurate Results</h2>\n          <p className=\"text-xl text-text-tertiary mb-4 leading-relaxed\">\n            This assessment provides <span className=\"text-text-primary font-semibold\">~70% accuracy</span> based on self-reported data.\n          </p>\n          <p className=\"text-lg text-text-tertiary mb-10 leading-relaxed\">\n            For precise automation opportunities and ROI projections, we analyze your actual ticket data.\n          </p>\n\n          <div className=\"bg-bg-primary border border-bg-card-alt/20 rounded-lg py-8 px-6 mb-8 text-left\">\n            <h3 className=\"text-2xl font-bold text-text-primary mb-6 text-center\">7-Day Ticket Listening Process</h3>\n            \n            <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n              <div>\n                <div className=\"text-4xl font-bold text-highlight mb-2\">1</div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">Quick Call (15 min)</h4>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                  Enable read-only connectors to your ticket sources, collaboration tools, and identity systems\n                </p>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-highlight mb-2\">2</div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">Discovery Agent Runs</h4>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                  Analyzes ticket patterns, classifies into 3-level hierarchy, computes median TTR by category\n                </p>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-highlight mb-2\">3</div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">100% Accurate Report</h4>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                  Empirically grounded plan with exact categories to automate, precise ROI, and custom roadmap\n                </p>\n              </div>\n            </div>\n\n            <div className=\"border-t border-bg-card-alt/20 pt-6\">\n              <h4 className=\"font-semibold text-text-primary mb-4 text-center\">What You'll Get</h4>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Exact ticket categories to automate (down to subcategory level)\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Precise ROI projections for your specific team\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Segmentation: fully automatable vs. human-in-loop\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Custom 90-day roadmap with phased deployment\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Baseline metrics: volume by category, current median TTR\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Confidence intervals for deflection (typically 95%+)\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <a\n            href=\"https://www.ai.work/book-a-demo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"bg-white text-black px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-all duration-200 inline-flex items-center gap-2\"\n          >\n            <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n            Request Custom Discovery Report\n          </a>\n\n          <div className=\"mt-8 flex items-center justify-center gap-8 text-sm text-text-tertiary\">\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span>7-day analysis</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n              </svg>\n              <span>Read-only access</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n              </svg>\n              <span>15-min setup call</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer Note */}\n      <div className=\"text-center text-text-tertiary text-sm mt-8\">\n        <p className=\"leading-relaxed\">\n          This assessment is based on anonymized IT automation data. Confidence: ~70% accuracy with self-reported inputs.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7061},"archive/reports/components/v4/DeploymentTimeline.tsx":{"content":"'use client';\n\nexport default function DeploymentTimeline() {\n  const timeline = [\n    {\n      phaseNumber: \"Phase One\",\n      phaseName: \"Integration Setup\",\n      activity: \"Connect systems and validate API access\",\n      participants: \"IT Admin, Security Lead, Implementation Engineer, CIO\"\n    },\n    {\n      phaseNumber: \"Phase Two\",\n      phaseName: \"Rule & Policy Configuration\",\n      activity: \"Input approval workflows, exception rules, escalation paths\",\n      participants: \"Process Owner, Legal, End User Rep\"\n    },\n    {\n      phaseNumber: \"Phase Three\",\n      phaseName: \"AI Worker Training\",\n      activity: \"Fine-tune AI Worker on historical tickets and validate accuracy\",\n      participants: \"Implementation Engineer, IT Admin, End User Rep\"\n    },\n    {\n      phaseNumber: \"Phase Four\",\n      phaseName: \"User Acceptance Testing (UAT)\",\n      activity: \"Test AI Worker with real scenarios; gather feedback\",\n      participants: \"End User Rep, Department Head, Security Lead\"\n    },\n    {\n      phaseNumber: \"Phase Five\",\n      phaseName: \"Security & Compliance Review\",\n      activity: \"Final audit of data access, logging, and governance controls\",\n      participants: \"Security Lead, Legal, CIO/CISO\"\n    },\n    {\n      phaseNumber: \"Phase Six\",\n      phaseName: \"Production Pilot Launch\",\n      activity: \"Deploy AI Worker to production with limited scope; monitor performance\",\n      participants: \"All Stakeholders (monitoring & support)\"\n    }\n  ];\n\n  return (\n    <section className=\"mb-16\">\n      <h3 className=\"text-2xl font-bold text-text-primary mb-4\">\n        Timeline to Deploy\n      </h3>\n      <p className=\"text-lg text-text-secondary mb-8\">\n        A realistic view of what to expect from kickoff to production, typically completed within <strong className=\"text-text-primary\">4–6 weeks</strong>.\n      </p>\n      \n      <div className=\"bg-bg-card border border-brand-secondary/10 rounded-card p-6 mb-6 overflow-x-auto\">\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"border-b border-bg-card-alt/20\">\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/4\">Phase</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/2\">Activity</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/4\">Key Participants</th>\n            </tr>\n          </thead>\n          <tbody>\n            {timeline.map((row, index) => (\n              <tr key={index} className=\"border-b border-bg-card-alt/10 hover:bg-bg-card-alt/5 transition-colors duration-200\">\n                <td className=\"py-4 px-4 text-sm text-text-primary\">\n                  <div>{row.phaseNumber}</div>\n                  <div className=\"font-bold\">{row.phaseName}</div>\n                </td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary\">{row.activity}</td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary\">{row.participants}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3148},"archive/documentation/development-artifacts/Improved-Report-Page_1760561398361.md":{"content":"<document title=\"replit-instructions-enhance-report.md\" type=\"text/markdown\">\n# Replit Instructions: Enhance Existing Report Output\n\n## Context\nI have a working IT readiness assessment app. Users complete the assessment and get a report. I want to **dramatically improve the report** by:\n\n1. **Analyzing their actual tech stack** against real APIs\n2. **Matching to specific AI Workers** from our use case library\n3. **Calculating precise ROI** based on their ticket volume\n4. **Identifying gaps** and missing capabilities\n5. **Providing actionable roadmap** with specific next steps\n\n## What Already Exists\n- Assessment flow (tech stack selection, activities, volume, governance)\n- Basic report page showing readiness score\n- Assessment data is captured and available\n\n## What I've Added\nThree data files in `/src/lib/data/`:\n- `tool-apis.json` - Complete API capabilities for all supported tools\n- `use-case-mappings.json` - 50+ AI Worker definitions with requirements\n- `benchmarks.json` - Industry benchmarks for calculations\n\n## What You Need to Build\n\n### PHASE 1: Core Analysis Engines\n\nCreate these three analysis engines in `/src/lib/engines/`:\n\n#### 1. `feasibility-engine.ts`\n**Purpose:** Analyzes which APIs are available for user's selected tools\n\n**What it does:**\n- Takes user's selected tools (e.g., [\"Okta\", \"ServiceNow\", \"Slack\"])\n- Looks up each tool in `tool-apis.json`\n- Determines which APIs are available based on license tier\n- Returns which AI Workers can be deployed with current stack\n- Identifies missing APIs and license gaps\n\n**Key function:**\n```typescript\nanalyzeStack(tools: {name: string, license_tier?: string}[]): FeasibilityResult[]\n\n// Returns for each tool:\n// - available_apis: string[]\n// - enabled_use_cases: string[] (IDs from use-case-mappings.json)\n// - missing_apis: string[]\n// - license_gaps: string[]\n// - confidence: number\n```\n\n**Critical rule:** Only return APIs that exist in `tool-apis.json` - no invented capabilities.\n\n**Full implementation:**\n```typescript\n// /src/lib/engines/feasibility-engine.ts\n\nimport toolApis from '../data/tool-apis.json';\nimport useCaseMappings from '../data/use-case-mappings.json';\n\ninterface Tool {\n  name: string;\n  license_tier?: string;\n}\n\ninterface FeasibilityResult {\n  tool: string;\n  available_apis: string[];\n  available_capabilities: string[];\n  enabled_use_cases: string[];\n  missing_apis: string[];\n  license_gaps: string[];\n  prerequisites: string[];\n  confidence: number;\n}\n\nexport class FeasibilityEngine {\n  \n  /**\n   * Analyzes which APIs and capabilities are available for a given tool\n   */\n  analyzeToolFeasibility(tool: Tool): FeasibilityResult {\n    const toolName = tool.name.toLowerCase().replace(/\\s+/g, '_');\n    const toolConfig = (toolApis as any).tools[toolName];\n    \n    if (!toolConfig) {\n      return {\n        tool: tool.name,\n        available_apis: [],\n        available_capabilities: [],\n        enabled_use_cases: [],\n        missing_apis: [],\n        license_gaps: [],\n        prerequisites: ['Tool configuration not found'],\n        confidence: 0\n      };\n    }\n\n    // Determine which APIs are available based on license tier\n    const licenseTier = tool.license_tier || 'standard';\n    const availableApiKeys = toolConfig.license_tiers[licenseTier] || [];\n    \n    const availableApis: string[] = [];\n    const availableCapabilities: string[] = [];\n    const prerequisites: string[] = [];\n\n    // Collect available APIs and capabilities\n    for (const apiKey of availableApiKeys) {\n      const apiConfig = toolConfig.apis[apiKey];\n      if (apiConfig) {\n        availableApis.push(apiConfig.name);\n        availableCapabilities.push(...apiConfig.capabilities);\n        prerequisites.push(`${apiConfig.name}: ${toolConfig.prerequisites}`);\n      }\n    }\n\n    // Find which use cases this tool enables\n    const enabledUseCases = (useCaseMappings as any).use_cases\n      .filter((useCase: any) => {\n        // Check if tool is required\n        if (!useCase.required_tools.includes(toolName)) {\n          return false;\n        }\n        \n        // Check if required APIs are available\n        const requiredApis = useCase.required_apis[toolName] || [];\n        const hasAllRequiredApis = requiredApis.every((api: string) => \n          availableApiKeys.includes(api)\n        );\n        \n        return hasAllRequiredApis;\n      })\n      .map((useCase: any) => useCase.id);\n\n    // Identify missing APIs for potential use cases\n    const potentialUseCases = (useCaseMappings as any).use_cases\n      .filter((useCase: any) => \n        useCase.required_tools.includes(toolName) && \n        !enabledUseCases.includes(useCase.id)\n      );\n    \n    const missingApis = Array.from(new Set(\n      potentialUseCases.flatMap((useCase: any) => \n        (useCase.required_apis[toolName] || [])\n          .filter((api: string) => !availableApiKeys.includes(api))\n      )\n    ));\n\n    // Check for license gaps\n    const licenseGaps: string[] = [];\n    const allApiKeys = Object.keys(toolConfig.apis);\n    const unavailableApis = allApiKeys.filter(key => !availableApiKeys.includes(key));\n    \n    if (unavailableApis.length > 0) {\n      // Find which tier would enable these\n      for (const [tier, apis] of Object.entries(toolConfig.license_tiers)) {\n        if (tier !== licenseTier && (apis as string[]).some(api => unavailableApis.includes(api))) {\n          licenseGaps.push(`Upgrade to ${tier} to unlock ${unavailableApis.join(', ')}`);\n        }\n      }\n    }\n\n    return {\n      tool: tool.name,\n      available_apis: availableApis,\n      available_capabilities: availableCapabilities,\n      enabled_use_cases: enabledUseCases,\n      missing_apis: missingApis,\n      license_gaps: Array.from(new Set(licenseGaps)),\n      prerequisites,\n      confidence: enabledUseCases.length > 0 ? 0.90 : 0.50\n    };\n  }\n\n  /**\n   * Analyzes the entire stack\n   */\n  analyzeStack(tools: Tool[]): FeasibilityResult[] {\n    return tools.map(tool => this.analyzeToolFeasibility(tool));\n  }\n\n  /**\n   * Gets detailed API information for a specific tool and API category\n   */\n  getApiDetails(toolName: string, apiCategory: string) {\n    const tool = (toolApis as any).tools[toolName.toLowerCase().replace(/\\s+/g, '_')];\n    if (!tool || !tool.apis[apiCategory]) {\n      return null;\n    }\n\n    const api = tool.apis[apiCategory];\n    return {\n      name: api.name,\n      base_url: api.base_url,\n      endpoints: api.endpoints,\n      capabilities: api.capabilities,\n      scopes_required: api.scopes_required,\n      documentation: api.documentation\n    };\n  }\n}\n```\n\n---\n\n#### 2. `use-case-matcher.ts`\n**Purpose:** Matches user's activities to available AI Workers\n\n**What it does:**\n- Takes user's stated activities (e.g., \"200 app access requests/month, 1.7 hrs each\")\n- Takes feasibility results (which use cases are enabled)\n- Matches activities to use cases from `use-case-mappings.json`\n- Calculates fit score (0-100) based on volume + TTR + effort\n- Estimates specific deflection and hours saved per use case\n- Prioritizes into: immediate wins, quick wins, future state\n\n**Key function:**\n```typescript\nmatchUseCases(\n  activities: {category: string, monthly_volume: number, avg_ttr_hours: number}[],\n  feasibilityResults: FeasibilityResult[]\n): MatchedUseCase[]\n\n// Returns sorted list with:\n// - name, description\n// - fit_score (0-100)\n// - estimated_monthly_deflection (tickets)\n// - estimated_hours_saved\n// - priority: 'immediate' | 'quick_win' | 'future'\n// - prerequisites, workflow_steps\n```\n\n**Fit score formula:**\n- 40 points: Stack supports this use case\n- 30 points: Volume score (50+ tickets/mo = max)\n- 20 points: TTR score (2+ hours = max)\n- 10 points: Low effort = 10, Medium = 6, High = 3\n\n**Full implementation:**\n```typescript\n// /src/lib/engines/use-case-matcher.ts\n\nimport useCaseMappings from '../data/use-case-mappings.json';\nimport { FeasibilityResult } from './feasibility-engine';\n\ninterface UserActivity {\n  category: string;\n  monthly_volume: number;\n  avg_ttr_hours: number;\n  requires_approval?: boolean;\n}\n\ninterface MatchedUseCase {\n  use_case_id: string;\n  name: string;\n  category: string;\n  description: string;\n  value_proposition: string;\n  fit_score: number;\n  estimated_monthly_deflection: number;\n  estimated_hours_saved: number;\n  confidence: number;\n  implementation_effort: 'low' | 'medium' | 'high';\n  time_to_value_days: number;\n  prerequisites: string[];\n  workflow_steps: string[];\n  priority: 'immediate' | 'quick_win' | 'future';\n  required_tools: string[];\n}\n\nexport class UseCaseMatcher {\n  \n  /**\n   * Matches user activities to available AI Workers\n   */\n  matchUseCases(\n    activities: UserActivity[],\n    feasibilityResults: FeasibilityResult[]\n  ): MatchedUseCase[] {\n    \n    // Get all enabled use case IDs from feasibility analysis\n    const enabledUseCaseIds = new Set(\n      feasibilityResults.flatMap(result => result.enabled_use_cases)\n    );\n\n    const matches: MatchedUseCase[] = [];\n\n    for (const useCase of (useCaseMappings as any).use_cases) {\n      // Skip if not enabled by current stack\n      if (!enabledUseCaseIds.has(useCase.id)) {\n        continue;\n      }\n\n      // Find matching activities\n      const matchingActivities = activities.filter(activity =>\n        useCase.ticket_categories.some((category: string) => \n          activity.category.toLowerCase().includes(category.toLowerCase()) ||\n          category.toLowerCase().includes(activity.category.toLowerCase())\n        )\n      );\n\n      if (matchingActivities.length === 0) {\n        continue;\n      }\n\n      // Calculate fit score (0-100)\n      let fitScore = 0;\n      \n      // Base score: stack support (40 points)\n      fitScore += 40;\n      \n      // Volume score (30 points): higher volume = better fit\n      const totalVolume = matchingActivities.reduce((sum, a) => sum + a.monthly_volume, 0);\n      const volumeScore = Math.min(30, (totalVolume / 50) * 30); // 50+ tickets = max score\n      fitScore += volumeScore;\n      \n      // TTR score (20 points): higher TTR = more savings\n      const avgTtr = matchingActivities.reduce((sum, a) => sum + a.avg_ttr_hours, 0) / matchingActivities.length;\n      const ttrScore = Math.min(20, (avgTtr / 2) * 20); // 2+ hours = max score\n      fitScore += ttrScore;\n      \n      // Implementation effort score (10 points): lower effort = higher score\n      const effortScore = useCase.implementation_effort === 'low' ? 10 : \n                         useCase.implementation_effort === 'medium' ? 6 : 3;\n      fitScore += effortScore;\n\n      // Calculate estimated impact\n      const estimatedDeflection = totalVolume * useCase.automation_rate;\n      const estimatedHoursSaved = estimatedDeflection * avgTtr;\n\n      // Determine priority\n      let priority: 'immediate' | 'quick_win' | 'future';\n      if (useCase.implementation_effort === 'low' && useCase.time_to_value_days <= 7) {\n        priority = 'immediate';\n      } else if (useCase.time_to_value_days <= 21) {\n        priority = 'quick_win';\n      } else {\n        priority = 'future';\n      }\n\n      matches.push({\n        use_case_id: useCase.id,\n        name: useCase.name,\n        category: useCase.category,\n        description: useCase.description,\n        value_proposition: useCase.value_proposition,\n        fit_score: Math.round(fitScore),\n        estimated_monthly_deflection: Math.round(estimatedDeflection),\n        estimated_hours_saved: Math.round(estimatedHoursSaved * 10) / 10,\n        confidence: useCase.confidence,\n        implementation_effort: useCase.implementation_effort,\n        time_to_value_days: useCase.time_to_value_days,\n        prerequisites: useCase.prerequisites,\n        workflow_steps: useCase.workflow_steps,\n        priority,\n        required_tools: useCase.required_tools\n      });\n    }\n\n    // Sort by fit score (descending)\n    return matches.sort((a, b) => b.fit_score - a.fit_score);\n  }\n\n  /**\n   * Groups matched use cases by priority\n   */\n  groupByPriority(matches: MatchedUseCase[]) {\n    return {\n      immediate: matches.filter(m => m.priority === 'immediate'),\n      quick_wins: matches.filter(m => m.priority === 'quick_win'),\n      future: matches.filter(m => m.priority === 'future')\n    };\n  }\n\n  /**\n   * Gets top N use cases\n   */\n  getTopUseCases(matches: MatchedUseCase[], n: number = 5): MatchedUseCase[] {\n    return matches.slice(0, n);\n  }\n}\n```\n\n---\n\n#### 3. `roi-calculator.ts`\n**Purpose:** Calculates specific ROI from user's data\n\n**What it does:**\n- Sums ticket deflection across all matched use cases\n- Calculates total hours saved (deflection × TTR)\n- Converts to FTE equivalent: (hours × 12) / 2000\n- Calculates annual value: FTE × $100K (default cost)\n- Breaks down by category with confidence scores\n\n**Key function:**\n```typescript\ncalculateROI(\n  totalMonthlyTickets: number,\n  matchedUseCases: MatchedUseCase[]\n): ROIResult\n\n// Returns:\n// - automatable_tickets, automatable_pct\n// - total_hours_saved, fte_equivalent\n// - annual_value_usd\n// - confidence (weighted average)\n// - breakdown_by_category[]\n```\n\n**Full implementation:**\n```typescript\n// /src/lib/engines/roi-calculator.ts\n\nimport benchmarks from '../data/benchmarks.json';\nimport { MatchedUseCase } from './use-case-matcher';\n\ninterface ROIResult {\n  total_monthly_tickets: number;\n  automatable_tickets: number;\n  automatable_pct: number;\n  total_hours_saved: number;\n  fte_equivalent: number;\n  annual_value_usd: number;\n  confidence: number;\n  breakdown_by_category: {\n    category: string;\n    tickets: number;\n    hours_saved: number;\n    confidence: number;\n  }[];\n}\n\nexport class ROICalculator {\n  private readonly HOURS_PER_FTE = 2000;\n  private readonly DEFAULT_FULLY_LOADED_COST = 100000;\n\n  /**\n   * Calculates comprehensive ROI from matched use cases\n   */\n  calculateROI(\n    totalMonthlyTickets: number,\n    matchedUseCases: MatchedUseCase[],\n    fullyLoadedCost: number = this.DEFAULT_FULLY_LOADED_COST\n  ): ROIResult {\n    \n    // Calculate totals\n    const automatableTickets = matchedUseCases.reduce(\n      (sum, uc) => sum + uc.estimated_monthly_deflection, \n      0\n    );\n    \n    const totalHoursSaved = matchedUseCases.reduce(\n      (sum, uc) => sum + uc.estimated_hours_saved,\n      0\n    );\n\n    const automatablePct = totalMonthlyTickets > 0 \n      ? (automatableTickets / totalMonthlyTickets) * 100\n      : 0;\n\n    const fteEquivalent = (totalHoursSaved * 12) / this.HOURS_PER_FTE;\n    \n    const annualValueUsd = fteEquivalent * fullyLoadedCost;\n\n    // Calculate weighted confidence\n    const weightedConfidence = matchedUseCases.length > 0\n      ? matchedUseCases.reduce((sum, uc) => \n          sum + (uc.confidence * uc.estimated_hours_saved), 0\n        ) / totalHoursSaved\n      : 0.70;\n\n    // Break down by category\n    const categoryMap = new Map<string, {tickets: number, hours: number, confidences: number[]}>();\n    \n    for (const useCase of matchedUseCases) {\n      const existing = categoryMap.get(useCase.category) || {tickets: 0, hours: 0, confidences: []};\n      existing.tickets += useCase.estimated_monthly_deflection;\n      existing.hours += useCase.estimated_hours_saved;\n      existing.confidences.push(useCase.confidence);\n      categoryMap.set(useCase.category, existing);\n    }\n\n    const breakdownByCategory = Array.from(categoryMap.entries()).map(([category, data]) => ({\n      category,\n      tickets: Math.round(data.tickets),\n      hours_saved: Math.round(data.hours * 10) / 10,\n      confidence: data.confidences.reduce((sum, c) => sum + c, 0) / data.confidences.length\n    }));\n\n    return {\n      total_monthly_tickets: totalMonthlyTickets,\n      automatable_tickets: Math.round(automatableTickets),\n      automatable_pct: Math.round(automatablePct * 10) / 10,\n      total_hours_saved: Math.round(totalHoursSaved),\n      fte_equivalent: Math.round(fteEquivalent * 10) / 10,\n      annual_value_usd: Math.round(annualValueUsd),\n      confidence: Math.round(weightedConfidence * 100),\n      breakdown_by_category: breakdownByCategory.sort((a, b) => b.hours_saved - a.hours_saved)\n    };\n  }\n\n  /**\n   * Estimates impact for a specific category based on benchmarks\n   */\n  estimateCategoryImpact(\n    category: string,\n    monthlyVolume: number,\n    customTtr?: number\n  ) {\n    const categoryData = (benchmarks as any).ticket_categories[category];\n    if (!categoryData) {\n      return null;\n    }\n\n    const ttr = customTtr || categoryData.median_ttr_hours;\n    const automationPotential = categoryData.automation_potential;\n    \n    const deflectableTickets = monthlyVolume * automationPotential;\n    const hoursSaved = deflectableTickets * ttr;\n\n    return {\n      category,\n      monthly_volume: monthlyVolume,\n      deflectable_tickets: Math.round(deflectableTickets),\n      hours_saved: Math.round(hoursSaved * 10) / 10,\n      automation_potential: automationPotential,\n      confidence: 0.70\n    };\n  }\n}\n```\n\n---\n\n### PHASE 2: Update Report Page\n\nEnhance your existing report page/component to use these engines.\n\n#### How to integrate into your existing report generation:\n\n**Find your current report generation logic** (probably in a results page component or API route).\n\n**Before** (current approach):\n```typescript\n// Probably something like:\nconst score = calculateScore(answers);\nreturn <Report score={score} />\n```\n\n**After** (enhanced approach):\n```typescript\nimport { FeasibilityEngine } from '@/lib/engines/feasibility-engine';\nimport { UseCaseMatcher } from '@/lib/engines/use-case-matcher';\nimport { ROICalculator } from '@/lib/engines/roi-calculator';\n\n// Initialize engines\nconst feasibilityEngine = new FeasibilityEngine();\nconst useCaseMatcher = new UseCaseMatcher();\nconst roiCalculator = new ROICalculator();\n\n// Run analysis\nconst feasibilityResults = feasibilityEngine.analyzeStack(answers.tools);\nconst matchedUseCases = useCaseMatcher.matchUseCases(answers.activities, feasibilityResults);\nconst roiResult = roiCalculator.calculateROI(answers.total_monthly_tickets, matchedUseCases);\nconst groupedOpportunities = useCaseMatcher.groupByPriority(matchedUseCases);\n\n// Pass to enhanced report\nreturn <Report \n  score={calculateScore(answers)}\n  feasibility={feasibilityResults}\n  opportunities={groupedOpportunities}\n  roi={roiResult}\n/>\n```\n\n#### Add New Report Sections:\n\n**1. Stack Analysis Section** (add after Executive Summary)\n\nFor each tool the user selected, show:\n```\n[Tool Name] (e.g., Okta)\n\n✅ APIs Available:\n• User Lifecycle Management (/api/v1/users)\n• Group Management (/api/v1/groups)\n• Application Assignments (/api/v1/apps)\n\n✅ AI Workers Ready to Deploy:\n• Add User to Okta (addresses 16% of tickets)\n• Grant Software Access via Okta (addresses 12% of tickets)\n• Bulk Add Users to Okta Group\n\n🎯 Your Opportunity:\nYour 200 app access requests/month currently take 1.7 hours each (340 hours total).\nWith Okta's Grant User Access API, these become real-time (approval latency only).\nEstimated impact: 340 hours/month → ~2 FTE saved\n\n⚠️ Prerequisites:\n• API token with okta.users.manage and okta.apps.manage scopes\n• ServiceNow integration for approval tracking\n\nConfidence: 90%\n```\n\n**Example React component:**\n```typescript\ninterface StackAnalysisProps {\n  feasibilityResults: FeasibilityResult[];\n  matchedUseCases: MatchedUseCase[];\n}\n\nexport function StackAnalysis({ feasibilityResults, matchedUseCases }: StackAnalysisProps) {\n  return (\n    <div className=\"stack-analysis\">\n      <h2>Your Stack Analysis</h2>\n      <p className=\"section-intro\">\n        Here's what you can automate with your current tools and APIs:\n      </p>\n\n      {feasibilityResults.map((result, idx) => {\n        // Find use cases for this tool\n        const toolUseCases = matchedUseCases.filter(uc => \n          uc.required_tools.includes(result.tool.toLowerCase().replace(/\\s+/g, '_'))\n        );\n\n        return (\n          <div key={idx} className=\"tool-card\">\n            <div className=\"tool-header\">\n              <h3>{result.tool}</h3>\n              <span className=\"confidence-badge\">\n                {Math.round(result.confidence * 100)}% Confidence\n              </span>\n            </div>\n\n            <div className=\"apis-section\">\n              <h4>✅ APIs Available:</h4>\n              <ul>\n                {result.available_apis.map((api, i) => (\n                  <li key={i}>{api}</li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"use-cases-section\">\n              <h4>✅ AI Workers Ready to Deploy:</h4>\n              <ul>\n                {toolUseCases.slice(0, 5).map((uc, i) => (\n                  <li key={i}>\n                    {uc.name} (addresses {uc.estimated_monthly_deflection} tickets/month)\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"opportunity-section\">\n              <h4>🎯 Your Opportunity:</h4>\n              <p>\n                {toolUseCases.length > 0 && toolUseCases[0].description}\n              </p>\n              <p className=\"impact\">\n                Estimated impact: {toolUseCases.reduce((sum, uc) => sum + uc.estimated_hours_saved, 0)} hours/month\n              </p>\n            </div>\n\n            <div className=\"prerequisites-section\">\n              <h4>⚠️ Prerequisites:</h4>\n              <ul>\n                {result.prerequisites.map((prereq, i) => (\n                  <li key={i}>{prereq}</li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n```\n\n**2. Enhanced Opportunity Map** (replace current opportunities section)\n\nShow three priority tiers with detailed cards:\n\n```typescript\ninterface OpportunityMapProps {\n  opportunities: {\n    immediate: MatchedUseCase[];\n    quick_wins: MatchedUseCase[];\n    future: MatchedUseCase[];\n  };\n}\n\nexport function OpportunityMap({ opportunities }: OpportunityMapProps) {\n  return (\n    <div className=\"opportunity-map\">\n      <h2>Opportunity Map</h2>\n\n      {/* Immediate Wins */}\n      <section className=\"immediate-wins\">\n        <h3>⚡ Immediate Wins (Week 1-4)</h3>\n        <p>Deploy these AI Workers immediately with your current stack</p>\n        \n        {opportunities.immediate.map((uc, idx) => (\n          <div key={idx} className=\"use-case-card detailed\">\n            <div className=\"card-header\">\n              <h4>{uc.name}</h4>\n              <span className=\"fit-score\">Fit Score: {uc.fit_score}/100</span>\n            </div>\n            \n            <p className=\"description\">{uc.description}</p>\n            \n            <div className=\"impact-metrics\">\n              <div className=\"metric\">\n                <span className=\"label\">Addresses:</span>\n                <span className=\"value\">{uc.estimated_monthly_deflection} tickets/month</span>\n              </div>\n              <div className=\"metric\">\n                <span className=\"label\">Hours saved:</span>\n                <span className=\"value\">{uc.estimated_hours_saved}/month</span>\n              </div>\n              <div className=\"metric\">\n                <span className=\"label\">Confidence:</span>\n                <span className=\"value\">{Math.round(uc.confidence * 100)}%</span>\n              </div>\n            </div>\n\n            <div className=\"workflow\">\n              <h5>How it works:</h5>\n              <ol>\n                {uc.workflow_steps.map((step, i) => (\n                  <li key={i}>{step}</li>\n                ))}\n              </ol>\n            </div>\n\n            <div className=\"prerequisites\">\n              <h5>Prerequisites:</h5>\n              <ul>\n                {uc.prerequisites.map((prereq, i) => (\n                  <li key={i}>\n                    <span className=\"icon\">\n                      {prereq.toLowerCase().includes('you have') ? '✅' : '⚠️'}\n                    </span>\n                    {prereq}\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"implementation-info\">\n              <span className=\"effort\">{uc.implementation_effort} effort</span>\n              <span className=\"timeline\">{uc.time_to_value_days} days to value</span>\n            </div>\n          </div>\n        ))}\n      </section>\n\n      {/* Quick Wins */}\n      <section className=\"quick-wins\">\n        <h3>🎯 Quick Wins (Month 2-3)</h3>\n        <p>High ROI with minor setup required</p>\n        \n        {opportunities.quick_wins.slice(0, 5).map((uc, idx) => (\n          <div key={idx} className=\"use-case-card compact\">\n            <h4>{uc.name}</h4>\n            <div className=\"quick-stats\">\n              <span>{uc.estimated_monthly_deflection} tickets/mo</span>\n              <span>{uc.estimated_hours_saved} hrs saved</span>\n              <span className=\"effort\">{uc.implementation_effort} effort</span>\n            </div>\n          </div>\n        ))}\n      </section>\n\n      {/* Future State */}\n      {opportunities.future.length > 0 && (\n        <section className=\"future-state\">\n          <h3>🔮 Future State (Month 4+)</h3>\n          <p>Additional integrations or process maturity needed</p>\n          \n          <div className=\"future-grid\">\n            {opportunities.future.slice(0, 6).map((uc, idx) => (\n              <div key={idx} className=\"future-card\">\n                <h5>{uc.name}</h5>\n                <p>{uc.estimated_monthly_deflection} tickets/mo</p>\n              </div>\n            ))}\n          </div>\n        </section>\n      )}\n    </div>\n  );\n}\n```\n\n**3. Gap Analysis Section** (NEW)\n\nShow what they're missing:\n\n```typescript\ninterface GapAnalysisProps {\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport function GapAnalysis({ feasibilityResults }: GapAnalysisProps) {\n  const gaps = feasibilityResults.filter(\n    result => result.missing_apis.length > 0 || result.license_gaps.length > 0\n  );\n\n  if (gaps.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"gap-analysis\">\n      <h2>🔶 What You're Missing</h2>\n      <p>Additional capabilities available with setup or upgrades:</p>\n\n      {gaps.map((gap, idx) => (\n        <div key={idx} className=\"gap-card\">\n          <h3>{gap.tool}</h3>\n          \n          {gap.missing_apis.length > 0 && (\n            <div className=\"missing-apis\">\n              <h4>Missing APIs:</h4>\n              <ul>\n                {gap.missing_apis.map((api, i) => (\n                  <li key={i}>{api}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {gap.license_gaps.length > 0 && (\n            <div className=\"license-gaps\">\n              <h4>License Requirements:</h4>\n              <ul>\n                {gap.license_gaps.map((gap, i) => (\n                  <li key={i}>{gap}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          <div className=\"gap-impact\">\n            <p>\n              <strong>Potential Impact:</strong> Additional automation possible if addressed.\n              Could unlock {gap.missing_apis.length} more API capabilities.\n            </p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n**4. By-the-Numbers ROI** (enhance existing ROI section)\n\n```typescript\ninterface ROIBreakdownProps {\n  roi: ROIResult;\n  activities: UserActivity[];\n}\n\nexport function ROIBreakdown({ roi, activities }: ROIBreakdownProps) {\n  return (\n    <div className=\"roi-breakdown\">\n      <h2>By-the-Numbers ROI</h2>\n\n      <div className=\"current-state\">\n        <h3>📊 Your Current State:</h3>\n        <ul>\n          <li>Total monthly tickets: <strong>{roi.total_monthly_tickets}</strong></li>\n          {activities.map((activity, idx) => (\n            <li key={idx}>\n              {activity.category}: {activity.monthly_volume} tickets × {activity.avg_ttr_hours} hrs = {Math.round(activity.monthly_volume * activity.avg_ttr_hours)} hrs\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"with-ai-workers\">\n        <h3>📈 With AI Workers:</h3>\n        <ul>\n          <li>Automatable tickets: <strong>{roi.automatable_tickets}</strong> ({roi.automatable_pct}%)</li>\n          <li>Monthly hours saved: <strong>{roi.total_hours_saved} hours</strong></li>\n          <li>FTE equivalent: <strong>{roi.fte_equivalent} FTE</strong></li>\n          <li>Annual value: <strong>${roi.annual_value_usd.toLocaleString()}</strong></li>\n        </ul>\n      </div>\n\n      <div className=\"category-breakdown\">\n        <h3>Breakdown by Category:</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>Category</th>\n              <th>Tickets</th>\n              <th>Hours Saved</th>\n              <th>Confidence</th>\n            </tr>\n          </thead>\n          <tbody>\n            {roi.breakdown_by_category.map((cat, idx) => (\n              <tr key={idx}>\n                <td>{cat.category}</td>\n                <td>{cat.tickets}</td>\n                <td>{cat.hours_saved}</td>\n                <td>{Math.round(cat.confidence * 100)}%</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"confidence-note\">\n        <p>\n          <strong>Confidence:</strong> {roi.confidence}% (based on self-reported data)\n        </p>\n        <p>\n          → Upgrade to 95% confidence with 7-day ticket listening\n        </p>\n      </div>\n    </div>\n  );\n}\n```\n\n**5. Implementation Roadmap** (enhance existing roadmap)\n\n```typescript\ninterface RoadmapProps {\n  opportunities: {\n    immediate: MatchedUseCase[];\n    quick_wins: MatchedUseCase[];\n  };\n}\n\nexport function ImplementationRoadmap({ opportunities }: RoadmapProps) {\n  const immediateHours = opportunities.immediate.reduce((sum, uc) => sum + uc.estimated_hours_saved, 0);\n  const immediateTickets = opportunities.immediate.reduce((sum, uc) => sum + uc.estimated_monthly_deflection, 0);\n\n  return (\n    <div className=\"implementation-roadmap\">\n      <h2>Implementation Roadmap</h2>\n\n      <div className=\"phase phase-1\">\n        <div className=\"phase-header\">\n          <h3>Phase 1: Foundation</h3>\n          <span className=\"timeline\">Weeks 1-2</span>\n        </div>\n        \n        <div className=\"phase-content\">\n          <h4>Tasks:</h4>\n          <ul>\n            <li>Generate API tokens for selected tools</li>\n            <li>Configure read-only connections</li>\n            <li>Set up 7-day ticket listening</li>\n            <li>Map approval workflows</li>\n          </ul>\n          \n          <h4>Deliverables:</h4>\n          <ul>\n            <li>45-min setup call</li>\n            <li>Baseline ticket analysis report</li>\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"phase phase-2\">\n        <div className=\"phase-header\">\n          <h3>Phase 2: Quick Wins</h3>\n          <span className=\"timeline\">Weeks 3-6</span>\n        </div>\n        \n        <div className=\"phase-content\">\n          <h4>AI Workers to Deploy:</h4>\n          <ul>\n            {opportunities.immediate.slice(0, 3).map((uc, idx) => (\n              <li key={idx}>{uc.name}</li>\n            ))}\n          </ul>\n          \n          <h4>Expected Impact:</h4>\n          <p>\n            {immediateTickets} tickets/month automated<br/>\n            {Math.round(immediateHours)} hours/month saved (~{Math.round((immediateHours * 12 / 2000) * 10) / 10} FTE)\n          </p>\n        </div>\n      </div>\n\n      <div className=\"phase phase-3\">\n        <div className=\"phase-header\">\n          <h3>Phase 3: Scale</h3>\n          <span className=\"timeline\">Months 2-3</span>\n        </div>\n        \n        <div className=\"phase-content\">\n          <h4>Additional AI Workers:</h4>\n          <ul>\n            {opportunities.quick_wins.slice(0, 5).map((uc, idx) => (\n              <li key={idx}>{uc.name}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n---\n\n## Testing\n\n### Test with this sample input:\n\n```typescript\nconst testInput = {\n  tools: [\n    { name: \"Okta\", license_tier: \"enterprise\" },\n    { name: \"ServiceNow\", license_tier: \"professional\" },\n    { name: \"Slack\", license_tier: \"business_plus\" },\n    { name: \"Google Workspace\", license_tier: \"business_standard\" }\n  ],\n  activities: [\n    {\n      category: \"app_access\",\n      monthly_volume: 200,\n      avg_ttr_hours: 1.7,\n      requires_approval: true\n    },\n    {\n      category: \"distribution_lists\",\n      monthly_volume: 50,\n      avg_ttr_hours: 0.75,\n      requires_approval: false\n    },\n    {\n      category: \"onboarding\",\n      monthly_volume: 30,\n      avg_ttr_hours: 4.0,\n      requires_approval: true\n    }\n  ],\n  total_monthly_tickets: 1000,\n  governance: {\n    identity_source: \"okta\",\n    approval_required: true,\n    kb_available: true\n  }\n};\n\n// Test the engines\nconst feasibilityEngine = new FeasibilityEngine();\nconst useCaseMatcher = new UseCaseMatcher();\nconst roiCalculator = new ROICalculator();\n\nconst feasibility = feasibilityEngine.analyzeStack(testInput.tools);\nconsole.log(\"Feasibility:\", feasibility);\n\nconst matches = useCaseMatcher.matchUseCases(testInput.activities, feasibility);\nconsole.log(\"Matched Use Cases:\", matches);\n\nconst roi = roiCalculator.calculateROI(testInput.total_monthly_tickets, matches);\nconsole.log(\"ROI:\", roi);\n```\n\n### Expected Results:\n\n- **Feasibility**: Should show Okta with 4 APIs, ServiceNow with Table API, Slack with Web + SCIM, Google Workspace with Directory + License APIs\n- **Matched Use Cases**: Should include \"Grant Software Access via Okta\", \"Group Management in Google Workspace\", \"Offboarding Employee\" with high fit scores\n- **ROI**: Should show ~250-300 automatable tickets, ~350-450 hours saved, ~2-2.5 FTE\n- **No Hallucinations**: All APIs mentioned should exist in tool-apis.json\n\n---\n\n## Build Order\n\n1. ✅ **Create `/src/lib/engines/` directory**\n2. ✅ **Build `feasibility-engine.ts`** - Test it first\n3. ✅ **Build `use-case-matcher.ts`** - Test it\n4. ✅ **Build `roi-calculator.ts`** - Test it\n5. ✅ **Update report generation logic** to use the engines\n6. ✅ **Add new report components** one at a time:\n   - StackAnalysis\n   - OpportunityMap (enhanced)\n   - GapAnalysis\n   - ROIBreakdown (enhanced)\n   - ImplementationRoadmap (enhanced)\n7. ✅ **Test with sample data**\n8. ✅ **Verify no API hallucinations**\n\n---\n\n## Critical Rules\n\n1. **No API hallucinations** - Only show APIs that exist in tool-apis.json\n2. **Use actual data** - Calculate ROI from user's real ticket volumes, not generic estimates\n3. **Be specific** - Show actual endpoint paths (e.g., `/api/v1/users`, not \"user API\")\n4. **Show prerequisites** - List what's needed (API tokens, scopes, licenses)\n5. **Prioritize correctly** - Immediate wins = low effort + ≤7 days to value\n6. **Validate everything** - Check that matched use cases actually have required APIs available\n\n---\n\n## Questions to Ask Me\n\nIf you need clarification:\n- \"Where is your current report page component located?\"\n- \"How is assessment data currently passed to the report?\"\n- \"Should I create TypeScript types file for shared interfaces?\"\n- \"Do you want me to preserve existing report sections or replace them?\"\n\n---\n\n## Start Building\n\nPlease start by:\n1. Confirming you can see the three data files in `/src/lib/data/`\n2. Creating `/src/lib/engines/` directory\n3. Building `feasibility-engine.ts` first\n4. Testing it with the sample input above\n5. Showing me the console output before proceeding to the next engine\n\nThen we'll build the other engines and update the report components.\n</document>\n\nPerfect! Now you can:\n1. Download this artifact (click the download button)\n2. Upload it to your Replit project\n3. Open the Replit Agent and say: \"Please read the file `replit-instructions-enhance-report.md` and follow the instructions to build the enhanced report system. Start with Step 1 (feasibility-engine.ts) and show me the results before proceeding.\"\n\nThis gives you a complete, downloadable instruction file! 🚀","size_bytes":35817},"archive/documentation/development-artifacts/ai_worker_roi_readme_in_app_explainer_1761168169384.md":{"content":"# How We Calculate Your ROI\n\nThis guide explains—in plain English—how the app turns your ticket data into **hours saved**, **FTE impact**, and **dollar value**. No engineering needed to follow along.\n\n---\n\n## 1) The Short Version\n1) You tell us your **ticket volumes** and the **average hands‑on time** it takes a person to handle them.\n2) Based on your **tech stack**, we identify **AI Workers** (use cases) that can either fully handle or greatly speed up those tickets.\n3) We **avoid double‑counting** by only using the remaining tickets in each category as we add use cases.\n4) We translate time saved into two views:\n   - **Capacity FTE** (operational headroom)\n   - **Budget FTE** (realistic financial impact)\n5) We apply **confidence** and show **Expected / P70 / P90** ranges so you can choose how conservative you want to be.\n\n---\n\n## 2) What We Need From You\n- **Total monthly tickets** (e.g., 1,000)\n- **Ticket categories** with volumes and average hands‑on time per ticket (in hours). Examples:\n  - App access changes\n  - Within‑app actions\n  - Distribution list updates\n  - Hardware requests\n  - Onboarding/offboarding\n\n> Tip: Use **hands‑on time** (how long a person actually works on it), not wall‑clock time from “opened” to “closed.”\n\n---\n\n## 3) What We Add\n- A library of **AI Workers** (prebuilt automations) mapped to common IT tasks\n- For each worker:\n  - **Automation rate** (what share of tickets it can handle or accelerate)\n  - **Confidence** (how likely the results match real life)\n  - Optional **micro‑touch time** (if humans still do a quick check/approval)\n\n---\n\n## 4) How Savings Are Calculated\nFor each matching worker:\n- We determine how many tickets it can handle from the **remaining pool** in that category.\n- We estimate **time saved per ticket**:\n  - If the task is fully automated: the **full hands‑on time** is saved.\n  - If it still needs a quick review/approval: we save the **difference** between the original time and the short micro‑touch (typically ~5 minutes).\n- If a small share of tickets still require a person (approvals/exceptions), we reduce the savings for those.\n\nWe add up the hours across all workers to get **total hours saved per month**. If totals ever exceed your overall ticket count, we automatically **cap and scale** the result so it stays realistic.\n\n---\n\n## 5) Confidence & Ranges\nNot every organization sees the same outcomes. Each worker has a **confidence score**. We weight savings by confidence and present:\n- **Expected** (our best estimate)\n- **P70** (conservative)\n- **P90** (more conservative)\n\nThis gives you a range to share with stakeholders depending on your risk tolerance.\n\n---\n\n## 6) From Hours → FTE → Dollars\n- **Capacity FTE** shows operational headroom (hours saved converted to an annualized FTE using 2,000 hours/FTE). It’s useful for planning workload and SLAs.\n- **Budget FTE** reflects what typically turns into budget‑relevant capacity. We apply:\n  - a **capture rate** (how much saved time becomes truly usable—default 50%), and\n  - **effective hours per FTE** (realistic annual working hours—default 1,800).\n\nWe then multiply **Budget FTE** by your **fully loaded cost per FTE** (default $100,000) to estimate **annual dollar value**.\n\n---\n\n## 7) Example (Illustrative)\n- 1,000 tickets/month\n- Categories include app access, within‑app actions, and distribution lists\n- AI Workers for password resets, in‑app actions, and DL changes\n- Each worker draws from its category without double‑counting, and saves either full hands‑on time or the time minus a brief review.\n- Result: monthly hours saved → **Capacity FTE** (operational) → **Budget FTE** (financial) → **annual $ value**\n\nExact numbers depend on your inputs and how conservative you set the sliders (confidence, micro‑touch time, capture rate).\n\n---\n\n## 8) Guardrails That Keep Results Honest\n- **No double‑counting** within a category\n- **Caps** to prevent saving more tickets than you have\n- **Confidence‑weighted** outcomes\n- **Conservative defaults** for micro‑touch and capture rate\n\n---\n\n## 9) FAQs\n**Why two FTE numbers?**  \nCapacity FTE describes operational headroom. Budget FTE is what usually translates into budget or hiring decisions.\n\n**Why not just divide by 2,000 and be done?**  \nBecause saved minutes rarely convert 1:1 into money. Capture rate and effective hours reflect how teams actually work.\n\n**Our tickets still need approvals—does that inflate savings?**  \nNo. If a worker still needs a quick human touch, we subtract that micro‑touch from the saved time.\n\n**Where do the worker confidence scores come from?**  \nFrom real‑world maturity of the automation and how well it fits your stack. We weight savings by those scores.\n\n**Can we make it more conservative?**  \nYes. Increase the micro‑touch time, raise the share needing approval, lower the capture rate, or use the P70/P90 ranges in reporting.\n\n---\n\n*Last updated: {{TODAY}}*","size_bytes":4980},"archive/reports/components/v2/TechStackCoverage.tsx":{"content":"interface TechStackCoverageProps {\n  selectedTools: string[];\n}\n\nexport default function TechStackCoverage({ selectedTools }: TechStackCoverageProps) {\n  const categories = [\n    {\n      name: 'Identity & Access Management',\n      tools: ['Okta', 'Microsoft Entra', 'JumpCloud', 'Google Workspace']\n    },\n    {\n      name: 'ITSM Platforms',\n      tools: ['ServiceNow', 'Jira Service Management', 'Freshservice', 'Ivanti']\n    },\n    {\n      name: 'Communication',\n      tools: ['Slack', 'Microsoft Teams', 'Zoom', 'Google Chat']\n    },\n    {\n      name: 'Productivity Suites',\n      tools: ['Google Workspace', 'Microsoft 365', 'Notion', 'Atlassian']\n    },\n    {\n      name: 'HR Systems',\n      tools: ['BambooHR', 'Workday', 'SuccessFactors', 'HiBob']\n    },\n    {\n      name: 'CRM & Sales',\n      tools: ['Salesforce', 'HubSpot', 'Zendesk', 'Intercom']\n    }\n  ];\n\n  return (\n    <div className=\"mb-16\">\n      <h2 className=\"text-4xl font-bold text-white mb-8\">Tech Stack Coverage</h2>\n      <p className=\"text-lg text-gray-400 mb-8\">\n        AI Workers integrate with your existing tools through secure, enterprise-grade connectors.\n      </p>\n\n      <div className=\"bg-[#1a1a1a] border border-gray-800 rounded-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-gray-800\">\n                <th className=\"text-left px-6 py-4 text-sm font-semibold text-gray-300\">Category</th>\n                <th className=\"text-left px-6 py-4 text-sm font-semibold text-gray-300\">Tool</th>\n                <th className=\"text-center px-6 py-4 text-sm font-semibold text-gray-300\">Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {categories.map((category, catIndex) => (\n                category.tools.map((tool, toolIndex) => (\n                  <tr\n                    key={`${catIndex}-${toolIndex}`}\n                    className=\"border-b border-gray-800/50 hover:bg-black/30 transition-colors\"\n                  >\n                    {toolIndex === 0 && (\n                      <td\n                        rowSpan={category.tools.length}\n                        className=\"px-6 py-4 font-medium text-white border-r border-gray-800/50\"\n                      >\n                        {category.name}\n                      </td>\n                    )}\n                    <td className=\"px-6 py-4 text-gray-300\">{tool}</td>\n                    <td className=\"px-6 py-4 text-center\">\n                      {selectedTools.includes(tool) ? (\n                        <div className=\"inline-flex items-center gap-2 px-3 py-1 bg-green-900/30 border border-green-800/50 rounded-full\">\n                          <svg className=\"w-4 h-4 text-green-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                          </svg>\n                          <span className=\"text-sm font-semibold text-green-400\">Connected</span>\n                        </div>\n                      ) : (\n                        <div className=\"inline-flex items-center gap-2 px-3 py-1 bg-gray-800/30 border border-gray-700/50 rounded-full\">\n                          <span className=\"text-sm text-gray-500\">Available</span>\n                        </div>\n                      )}\n                    </td>\n                  </tr>\n                ))\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3662},"archive/documentation/README.md":{"content":"# Documentation Archive\n\n## Development Artifacts\n\nThe `development-artifacts` folder contains historical development materials:\n\n- **Screenshots**: 150+ UI screenshots from development (October 2025)\n- **Planning Documents**: Pasted instructions, design specifications, and requirements\n- **Design Assets**: Brand guidelines, tone of voice documents, and style guides\n- **Targeted Elements**: UI element screenshots for reference\n\n### File Types\n- `.png` - Screenshots and UI captures\n- `.md` - Markdown planning documents\n- `.txt` - Pasted instructions and specifications\n\n### Contents Summary\nAll files are timestamped, showing the development progression from October 13-22, 2025. These include:\n- Brand system integration instructions\n- AI Worker ROI explainers\n- Report page iterations and designs\n- UI/UX refinement discussions\n- Technical implementation plans\n\n### Purpose\nThese files document the development journey and design decisions. They are preserved for historical reference but are not used by the running application.\n\n## Date Archived\nOctober 27, 2025\n","size_bytes":1072},"archive/reports/components/v4/InternalAlignment.tsx":{"content":"'use client';\n\nimport ResponsiveTable from '@/components/ui/ResponsiveTable';\n\nexport default function InternalAlignment() {\n  const stakeholders = [\n    {\n      role: \"IT Admin / System Owner\",\n      whyInvolved: \"Provides admin API tokens and validates integrations\",\n      includeOnCalls: true,\n      approvalNeeded: \"Super Admin, Privacy & Security approval\"\n    },\n    {\n      role: \"Security Lead\",\n      whyInvolved: \"Approves OAuth scopes, validates data access controls\",\n      includeOnCalls: true,\n      approvalNeeded: \"Data access & encryption protocols\"\n    },\n    {\n      role: \"Legal / Compliance Officer\",\n      whyInvolved: \"Ensures AI Worker aligns with regulatory obligations\",\n      includeOnCalls: true,\n      approvalNeeded: \"AI governance & data residency approvals\"\n    },\n    {\n      role: \"Finance / Procurement\",\n      whyInvolved: \"Manages contract, budget allocation, and ROI tracking\",\n      includeOnCalls: false,\n      approvalNeeded: \"Contract & payment approvals\"\n    },\n    {\n      role: \"End User Representative\",\n      whyInvolved: \"Validates workflow accuracy and user experience\",\n      includeOnCalls: true,\n      approvalNeeded: \"Process sign-off\"\n    },\n    {\n      role: \"Department Head (IT, HR, Procurement)\",\n      whyInvolved: \"Champions adoption and ensures team readiness\",\n      includeOnCalls: false,\n      approvalNeeded: \"Change management approval\"\n    },\n    {\n      role: \"CIO / CISO\",\n      whyInvolved: \"Executive sponsor ensuring strategic alignment\",\n      includeOnCalls: true,\n      approvalNeeded: \"Strategic & security approval\"\n    }\n  ];\n\n  const columns = [\n    {\n      key: 'role',\n      label: 'Role',\n      className: 'font-semibold text-text-primary w-1/5'\n    },\n    {\n      key: 'whyInvolved',\n      label: 'Why They\\'re Involved',\n      className: 'w-2/5'\n    },\n    {\n      key: 'includeOnCalls',\n      label: 'Include on Calendar Invites',\n      className: 'text-center w-1/6',\n      render: (value: boolean) => (\n        <div className=\"flex justify-center\">\n          {value ? (\n            <svg className=\"w-5 h-5 text-accent-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n            </svg>\n          ) : (\n            <span className=\"text-text-tertiary\">—</span>\n          )}\n        </div>\n      )\n    },\n    {\n      key: 'approvalNeeded',\n      label: 'Approval Needed',\n      className: 'w-1/5'\n    }\n  ];\n\n  return (\n    <section className=\"mb-16\">\n      <h3 className=\"text-2xl font-bold text-text-primary mb-4\">\n        Secure Internal Alignment\n      </h3>\n      <p className=\"text-lg text-text-secondary mb-2\">\n        AI Workers cross multiple systems — and therefore multiple teams.\n      </p>\n      <p className=\"text-lg text-text-secondary mb-8\">\n        To deploy effectively, you'll need participation and approval from these roles:\n      </p>\n      \n      <div className=\"bg-bg-card border border-brand-secondary/10 rounded-card p-6 overflow-x-auto\">\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"border-b border-bg-card-alt/20\">\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/5\">Role</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-2/5\">Why They're Involved</th>\n              <th className=\"text-center py-4 px-4 text-sm font-semibold text-text-primary w-1/6\">Include on Calendar Invites</th>\n              <th className=\"text-left py-4 px-4 text-sm font-semibold text-text-primary w-1/5\">Approval Needed</th>\n            </tr>\n          </thead>\n          <tbody>\n            {stakeholders.map((stakeholder, index) => (\n              <tr key={index} className=\"border-b border-bg-card-alt/10 hover:bg-bg-card-alt/5 transition-colors duration-200\">\n                <td className=\"py-4 px-4 text-sm font-semibold text-text-primary\">{stakeholder.role}</td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary\">{stakeholder.whyInvolved}</td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary text-center\">\n                  <div className=\"flex justify-center\">\n                    {stakeholder.includeOnCalls ? (\n                      <svg className=\"w-5 h-5 text-accent-green\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                      </svg>\n                    ) : (\n                      <span className=\"text-text-tertiary\">—</span>\n                    )}\n                  </div>\n                </td>\n                <td className=\"py-4 px-4 text-sm text-text-secondary\">{stakeholder.approvalNeeded}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5116},"archive/reports/components/v2/ExecutiveSummary.tsx":{"content":"import { ReadinessScore, AutomationOpportunity } from '@/types';\nimport ScoreCircle from '../ScoreCircle';\nimport CountUp from 'react-countup';\n\ninterface ExecutiveSummaryProps {\n  score: ReadinessScore;\n  topOpportunities: AutomationOpportunity[];\n  estimatedDeflection: number;\n  hoursSaved: number;\n  fteImpact: number;\n}\n\nexport default function ExecutiveSummary({\n  score,\n  topOpportunities,\n  estimatedDeflection,\n  hoursSaved,\n  fteImpact,\n}: ExecutiveSummaryProps) {\n  return (\n    <div className=\"mb-16\">\n      <h2 className=\"text-4xl font-bold text-white mb-12\">Executive Summary</h2>\n\n      {/* Centered Score */}\n      <div className=\"flex justify-center mb-12\">\n        <div className=\"text-center\">\n          <h3 className=\"text-xl font-bold text-white mb-6\">Overall Readiness</h3>\n          <ScoreCircle score={score.total} rating={score.rating} />\n        </div>\n      </div>\n\n      {/* Narrative Section */}\n      <div className=\"max-w-4xl mx-auto mb-12 space-y-6\">\n        <p className=\"text-lg text-gray-300 leading-relaxed\">\n          Your IT team faces a familiar challenge: tickets pile up faster than you can handle them, \n          your skilled engineers spend hours on repetitive tasks, and leadership asks for \"more efficiency \n          with fewer resources.\" The question isn't whether AI can help—it's <span className=\"text-white font-semibold\">how to start</span>.\n        </p>\n\n        <p className=\"text-lg text-gray-300 leading-relaxed\">\n          Your readiness score of <span className=\"text-white font-bold\">{score.total}/100</span> reflects \n          three critical factors: your tech stack's compatibility with autonomous teammates, your team's \n          current process maturity, and the volume of repetitive work ready for intelligent handling. This \n          isn't just a number—it's a <span className=\"text-white font-semibold\">validated pathway from reactive \n          firefighting to autonomous, intelligent service delivery</span>.\n        </p>\n\n        <p className=\"text-lg text-gray-300 leading-relaxed\">\n          Organizations at your readiness level typically deploy their first autonomous teammate within \n          30-60 days, starting with high-volume, low-complexity workflows. The impact metrics below aren't \n          projections—they're <span className=\"text-white font-semibold\">conservative estimates based on teams \n          with similar tech stacks who've already made the transition</span>.\n        </p>\n      </div>\n\n      {/* Full Width Impact Metrics */}\n      <div className=\"bg-gradient-to-br from-blue-900/20 to-green-900/20 border border-blue-800/30 rounded-lg p-8 mb-12\">\n        <h3 className=\"text-2xl font-bold text-white mb-8 text-center\">Estimated Impact</h3>\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-white mb-2\">\n              <CountUp end={estimatedDeflection} duration={2} />%\n            </div>\n            <div className=\"text-sm text-gray-400 uppercase tracking-wider\">Ticket Deflection</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-white mb-2\">\n              <CountUp end={hoursSaved} duration={2} separator=\",\" />\n            </div>\n            <div className=\"text-sm text-gray-400 uppercase tracking-wider\">Hours Saved (Annual)</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-white mb-2\">\n              ~<CountUp end={fteImpact} duration={2} decimals={1} />\n            </div>\n            <div className=\"text-sm text-gray-400 uppercase tracking-wider\">FTE Impact</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Top 5 Automations */}\n      <div className=\"bg-[#1a1a1a] border border-gray-800 rounded-lg p-8\">\n        <h3 className=\"text-xl font-bold text-white mb-6\">Top 5 Automation Opportunities</h3>\n        <div className=\"space-y-4\">\n          {topOpportunities.map((opp, index) => (\n            <div\n              key={index}\n              className=\"flex items-start gap-4 p-4 bg-black/50 rounded-lg border border-gray-800/50\"\n            >\n              <div className=\"flex-shrink-0 w-8 h-8 bg-gradient-to-br from-gray-600 to-gray-700 rounded-full flex items-center justify-center text-white font-bold\">\n                {index + 1}\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-white mb-1\">{opp.processName}</h4>\n                    <p className=\"text-sm text-gray-400 mb-2\">{opp.tool} · {opp.category}</p>\n                    <p className=\"text-sm text-gray-300\">{opp.description}</p>\n                  </div>\n                  <div className=\"flex-shrink-0 text-right\">\n                    <div className=\"text-2xl font-bold text-white\">{opp.projectedDeflection}%</div>\n                    <div className=\"text-xs text-gray-400\">deflection</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Confidence Note */}\n      <p className=\"text-sm text-gray-500 mt-6 text-center\">\n        Based on anonymized IT automation data. Confidence: ~70% accuracy with self-reported inputs.\n      </p>\n    </div>\n  );\n}\n","size_bytes":5427},"archive/reports/VERSION_HISTORY.md":{"content":"# Report Version History\n\n## Version 5 (Current - Active)\n**Location**: `src/app/report/v5/[id]/page.tsx`\n\nStreamlined, data-focused version without LLM-generated insights. Features:\n- Clean metrics display with readiness percentage\n- Budget FTE (conservative) prominently displayed\n- Single-column full-width use case cards\n- Comprehensive deployment plan\n- Expected outcomes and ROI breakdown\n\n## Version 4 (Archived - October 2025)\n**Location**: `archive/reports/pages/v4/`\n\nPrevious version with AI-generated strategic insights in Executive Summary. Almost identical to V5 but with LLM content.\n\n## Version 3 (Archived - October 2025)\n**Location**: `archive/reports/pages/v3/`\n\nEarlier version with different component structure and layout approach.\n\n## Version 2 (Archived - October 2025)\n**Location**: `archive/reports/pages/v2/` and `archive/reports/pages/v2-archive-original/`\n\nInitial report version with different design patterns and metrics display.\n\n## Version 1 (Archived - October 2025)\n**Location**: `archive/reports/pages/v1/`\n\nOriginal report version with score circles, condensed AI worker cards, and basic impact metrics. Used older scoring algorithm and worker matcher.\n\n## Archived Components\n\nThe following standalone components have been archived as they're no longer used in v5:\n- `AIWorkerCard.tsx` / `AIWorkerCardCondensed.tsx`\n- `BeforeAfterTimeline.tsx`\n- `ComparisonTable.tsx`\n- `ExecutiveSummary-original.tsx`\n- `ImpactMetrics.tsx`\n- `ScoreBreakdown.tsx`\n- `ScoreCircle.tsx`\n- `StatsImpactBanner.tsx`\n- All `-v3` suffix components\n\n**Note**: `ROICalculationModal.tsx` was initially archived but restored to the active codebase because it's still used by v5's ExecutiveSummary component.\n\nThese are preserved for reference or potential future use.\n","size_bytes":1777},"archive/reports/components/ScoreBreakdown.tsx":{"content":"import Card from \"@/components/ui/Card\";\nimport { ReadinessScore } from \"@/types\";\n\ninterface ScoreBreakdownProps {\n  scores: ReadinessScore;\n  techStackCount: number;\n  hasApprovalWorkflows: boolean;\n  repetitivePercentage: string;\n}\n\ninterface CategoryScore {\n  name: string;\n  score: number;\n  maxScore: number;\n  description: string;\n}\n\nexport default function ScoreBreakdown({\n  scores,\n  techStackCount,\n  hasApprovalWorkflows,\n  repetitivePercentage,\n}: ScoreBreakdownProps) {\n  // Map existing scores to 5 new categories\n  const calculateCategoryScores = (): CategoryScore[] => {\n    // Data & APIs - based on tech stack integrations (out of 100)\n    const dataAPIsScore = Math.min(100, (techStackCount / 8) * 100);\n\n    // Process Clarity - based on workflows and repetition (out of 100)\n    const processScore = Math.min(100, (scores.workflowScore / 35) * 100);\n\n    // Volume & Variability - based on workflow score and volume (out of 100)\n    const volumeScore = Math.min(\n      100,\n      ((scores.workflowScore + scores.operationalScore) / 60) * 100,\n    );\n\n    // Governance & Guardrails - based on operational readiness (out of 100)\n    const governanceScore = hasApprovalWorkflows ? 100 : 50;\n\n    // Stack Fit - based on tech stack score (out of 100)\n    const stackFitScore = Math.min(100, (scores.techStackScore / 40) * 100);\n\n    return [\n      {\n        name: \"Data & APIs\",\n        score: Math.round(dataAPIsScore),\n        maxScore: 100,\n        description: \"Baseline APIs and data access enabled\",\n      },\n      {\n        name: \"Process Clarity\",\n        score: Math.round(processScore),\n        maxScore: 100,\n        description: \"Well-defined documented workflows\",\n      },\n      {\n        name: \"Volume & Variability\",\n        score: Math.round(volumeScore),\n        maxScore: 100,\n        description: \"Consistent volume with quality information\",\n      },\n      {\n        name: \"Governance & Guardrails\",\n        score: Math.round(governanceScore),\n        maxScore: 100,\n        description: \"Clear approval policies and audit requirements\",\n      },\n      {\n        name: \"Stack Fit\",\n        score: Math.round(stackFitScore),\n        maxScore: 100,\n        description: \"Integrated tools for autonomous worker actions\",\n      },\n    ];\n  };\n\n  const categories = calculateCategoryScores();\n\n  return (\n    <Card className=\"h-full\">\n      <h3 className=\"text-xl font-bold text-text-primary mb-6\">\n        Score Breakdown\n      </h3>\n\n      <div className=\"space-y-6\">\n        {categories.map((category) => {\n          const percentage = (category.score / category.maxScore) * 100;\n\n          return (\n            <div key={category.name}>\n              <div className=\"flex items-center justify-between mb-2\">\n                <div>\n                  <div className=\"text-sm font-semibold text-text-primary\">\n                    {category.name}\n                  </div>\n                  <div className=\"text-xs text-text-tertiary\">\n                    {category.description}\n                  </div>\n                </div>\n                <div className=\"text-lg font-bold text-text-primary ml-4\">\n                  {category.score}{\" \"}\n                  <span className=\"text-text-tertiary text-sm\">\n                    / {category.maxScore}\n                  </span>\n                </div>\n              </div>\n\n              {/* Progress bar with gradient */}\n              <div className=\"relative h-2 bg-bg-primary rounded-full overflow-hidden\">\n                <div\n                  className=\"absolute inset-y-0 left-0 rounded-full transition-all duration-1000 ease-out\"\n                  style={{\n                    width: `${percentage}%`,\n                    background:\n                      \"linear-gradient(90deg, #6B7280 0%, #3B82F6 50%, #F97316 100%)\",\n                  }}\n                />\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3945},"archive/reports/components/v4/GetStartedRoadmap.tsx":{"content":"import Card from '@/components/ui/Card';\nimport { MatchedUseCase } from '@/types/types-v3';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface GetStartedRoadmapProps {\n  matchedUseCases: MatchedUseCase[];\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport default function GetStartedRoadmap({ matchedUseCases, feasibilityResults }: GetStartedRoadmapProps) {\n  \n  // Group and prioritize\n  const immediateUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'immediate')\n    .sort((a, b) => b.fit_score - a.fit_score);\n  \n  const quickWinUseCases = matchedUseCases\n    .filter(uc => uc.priority === 'quick_win')\n    .sort((a, b) => b.fit_score - a.fit_score);\n\n  // Find future/additional capabilities to expand into\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n  const matchedIds = new Set(matchedUseCases.map(uc => uc.use_case_id));\n  \n  const futureCapabilities: any[] = [];\n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    if (enabledUseCaseIds.has(uc.id) && !matchedIds.has(uc.id)) {\n      futureCapabilities.push(uc);\n    }\n  });\n  \n  // Sort by implementation effort and time to value\n  futureCapabilities.sort((a, b) => {\n    const effortOrder: Record<string, number> = { low: 0, medium: 1, high: 2 };\n    if (effortOrder[a.implementation_effort] !== effortOrder[b.implementation_effort]) {\n      return effortOrder[a.implementation_effort] - effortOrder[b.implementation_effort];\n    }\n    return a.time_to_value_days - b.time_to_value_days;\n  });\n\n  if (matchedUseCases.length === 0 && futureCapabilities.length === 0) {\n    return null;\n  }\n\n  const renderPhase = (\n    title: string,\n    timeframe: string,\n    useCases: MatchedUseCase[],\n    phaseColor: string,\n    icon: string\n  ) => {\n    if (useCases.length === 0) return null;\n\n    const totalTickets = useCases.reduce((sum, uc) => sum + uc.estimated_monthly_deflection, 0);\n    const totalHours = useCases.reduce((sum, uc) => sum + uc.estimated_hours_saved, 0);\n\n    return (\n      <div className=\"relative\">\n        <Card>\n          <div className=\"flex items-start gap-4 mb-6\">\n            <div className={`flex-shrink-0 w-12 h-12 ${phaseColor} rounded-full flex items-center justify-center relative z-10`}>\n              <svg className=\"w-6 h-6 text-current\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                {icon === '🚀' && <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />}\n                {icon === '⚡' && <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />}\n                {icon === '📈' && <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />}\n              </svg>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-xl font-bold text-text-primary mb-1\">{title}</h3>\n              <p className=\"text-sm text-text-tertiary\">{timeframe}</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-accent-blue\">{totalTickets.toLocaleString()} tickets/month</div>\n              <div className=\"text-sm font-semibold text-text-primary\">{Math.round(totalHours).toLocaleString()} hrs saved/month</div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            {useCases.map((useCase, index) => (\n              <div key={useCase.use_case_id} className=\"p-4 bg-bg-primary rounded-lg border border-brand-secondary/10\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"text-sm font-semibold text-accent-blue\">\n                        Step {index + 1}\n                      </span>\n                      <h4 className=\"text-base font-bold text-text-primary\">\n                        {useCase.name}\n                      </h4>\n                    </div>\n                    <p className=\"text-sm text-text-secondary line-clamp-1\">\n                      {useCase.description}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mt-3\">\n                  <div>\n                    <div className=\"text-sm font-bold text-accent-green\">\n                      {useCase.estimated_monthly_deflection.toLocaleString()}\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Tickets</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-bold text-accent-blue\">\n                      {Math.round(useCase.estimated_hours_saved).toLocaleString()}h\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Saved</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-bold text-text-primary\">\n                      {useCase.time_to_value_days}d\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Setup</div>\n                  </div>\n                  <div>\n                    <div className={`text-sm font-bold ${\n                      useCase.implementation_effort === 'low' ? 'text-accent-green' :\n                      useCase.implementation_effort === 'medium' ? 'text-accent-blue' :\n                      'text-accent-orange'\n                    }`}>\n                      {useCase.implementation_effort}\n                    </div>\n                    <div className=\"text-xs text-text-tertiary\">Effort</div>\n                  </div>\n                </div>\n\n                {/* Prerequisites Preview */}\n                {useCase.prerequisites.length > 0 && (\n                  <div className=\"mt-3 pt-3 border-t border-brand-secondary/10\">\n                    <details className=\"group\">\n                      <summary className=\"text-xs text-accent-blue cursor-pointer hover:underline list-none flex items-center gap-1\">\n                        <svg className=\"w-3 h-3 transition-transform group-open:rotate-90\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                        </svg>\n                        View {useCase.prerequisites.length} prerequisite{useCase.prerequisites.length !== 1 ? 's' : ''}\n                      </summary>\n                      <ul className=\"mt-2 space-y-1 ml-4\">\n                        {useCase.prerequisites.map((prereq, i) => (\n                          <li key={i} className=\"text-xs text-text-secondary flex items-start gap-1\">\n                            <span className=\"text-accent-green mt-0.5\">✓</span>\n                            {prereq}\n                          </li>\n                        ))}\n                      </ul>\n                    </details>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  // Calculate cumulative impact\n  const allPriorityUseCases = [...immediateUseCases, ...quickWinUseCases];\n  const cumulativeTickets = allPriorityUseCases.reduce((sum, uc) => sum + uc.estimated_monthly_deflection, 0);\n  const cumulativeHours = allPriorityUseCases.reduce((sum, uc) => sum + uc.estimated_hours_saved, 0);\n  const cumulativeFTE = (cumulativeHours * 12) / 2000;\n  const cumulativeValue = cumulativeFTE * 100000; // $100K fully loaded cost\n\n  return (\n    <div className=\"max-w-4xl mx-auto mb-16\">\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          How to Get Started\n        </h2>\n        <p className=\"text-text-secondary max-w-2xl mx-auto\">\n          A phased deployment plan showing when to deploy each AI Worker, based on your current capabilities and business impact.\n        </p>\n      </div>\n\n      <div className=\"space-y-8\">\n        {renderPhase(\n          'Week 1: Quick Deploy',\n          'Deploy in first 7 days',\n          immediateUseCases,\n          'bg-accent-green/20',\n          '🚀'\n        )}\n\n        {renderPhase(\n          'Month 1-2: Build Momentum',\n          'Deploy over next 4-8 weeks',\n          quickWinUseCases,\n          'bg-accent-blue/20',\n          '⚡'\n        )}\n\n        {/* Phase 3: Scale & Expand */}\n        {futureCapabilities.length > 0 && (\n          <div className=\"relative\">\n            <Card>\n              <div className=\"flex items-start gap-4 mb-6\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-accent-orange/20 rounded-full flex items-center justify-center relative z-10\">\n                  <svg className=\"w-6 h-6 text-current\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n                  </svg>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-bold text-text-primary mb-1\">\n                    Month 3+: Scale & Expand\n                  </h3>\n                  <p className=\"text-sm text-text-tertiary\">\n                    Expand automation across more workflows\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-accent-orange\">{futureCapabilities.length}</div>\n                  <div className=\"text-xs text-text-tertiary\">more AI Workers</div>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {futureCapabilities.map((uc: any) => (\n                  <div key={uc.id} className=\"p-4 bg-bg-primary rounded-lg border border-brand-secondary/10\">\n                    <h4 className=\"text-sm font-bold text-text-primary mb-1\">\n                      {uc.name}\n                    </h4>\n                    <p className=\"text-xs text-text-secondary line-clamp-2 mb-3\">\n                      {uc.description}\n                    </p>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-text-tertiary\">{uc.category}</span>\n                      <span className={`font-medium ${\n                        uc.implementation_effort === 'low' ? 'text-accent-green' :\n                        uc.implementation_effort === 'medium' ? 'text-accent-blue' :\n                        'text-accent-orange'\n                      }`}>\n                        {uc.time_to_value_days}d • {uc.implementation_effort} effort\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          </div>\n        )}\n      </div>\n\n      {/* Cumulative Impact Card */}\n      {allPriorityUseCases.length > 0 && (\n        <div className=\"mt-12\" style={{ boxShadow: '0 0 20px rgba(130, 216, 149, 0.3)', borderRadius: '12px' }}>\n          <Card>\n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-xl font-bold text-text-primary mb-2\">\n                Cumulative Impact (First 2 Months)\n              </h3>\n              <p className=\"text-sm text-text-secondary\">\n                By deploying AI workers with these {allPriorityUseCases.length} skills\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-accent-green mb-1\">\n                  {cumulativeTickets.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Tickets Automated</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-accent-blue mb-1\">\n                  {Math.round(cumulativeHours).toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Hours Saved/Month</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-text-primary mb-1\">\n                  {cumulativeFTE.toFixed(1)}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">FTE Capacity Freed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-accent-orange mb-1\">\n                  ${Math.round(cumulativeValue / 1000).toLocaleString()}K\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Annual Value</div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Next Steps CTA */}\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-sm text-text-tertiary mb-4\">\n          Ready to start your deployment?\n        </p>\n        <a \n          href=\"https://www.ai.work/book-a-demo\" \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n          className=\"px-6 py-3 bg-white text-black rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-flex items-center gap-2\"\n        >\n          <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n          Schedule Implementation Planning Call\n        </a>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13646},"archive/reports/components/v3/ROIBreakdown.tsx":{"content":"'use client';\n\nimport { ROIResult } from '@/lib/engines/roi-calculator';\nimport { FeasibilityResult } from '@/lib/engines/feasibility-engine';\nimport Card from '@/components/ui/Card';\nimport useCaseMappings from '@/data/use-case-mappings.json';\n\ninterface ROIBreakdownProps {\n  roiResult: ROIResult;\n  feasibilityResults: FeasibilityResult[];\n}\n\nexport default function ROIBreakdown({ roiResult, feasibilityResults }: ROIBreakdownProps) {\n  // Get all enabled use case IDs\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap(result => result.enabled_use_cases)\n  );\n\n  // Get categories from matched use cases (actual impact)\n  const matchedCategories = new Set(\n    roiResult.breakdown_by_category.map(cat => cat.category)\n  );\n\n  // Find additional categories with enabled use cases\n  const additionalCategories: Record<string, {\n    category: string;\n    useCases: any[];\n    estimatedTickets: number;\n    estimatedHours: number;\n  }> = {};\n\n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    // Filter out Meetings & Collaboration Licenses category\n    if (uc.category === 'Meetings & Collaboration Licenses') {\n      return;\n    }\n    \n    if (enabledUseCaseIds.has(uc.id) && !matchedCategories.has(uc.category)) {\n      if (!additionalCategories[uc.category]) {\n        additionalCategories[uc.category] = {\n          category: uc.category,\n          useCases: [],\n          estimatedTickets: 0,\n          estimatedHours: 0\n        };\n      }\n      additionalCategories[uc.category].useCases.push(uc);\n      // Estimate based on typical values (assuming 1000 ticket baseline)\n      const estTickets = Math.round((uc.typical_volume_pct || 0.05) * 1000 * (uc.automation_rate || 0.8));\n      const estHours = estTickets * (uc.typical_ttr_hours || 1.5);\n      additionalCategories[uc.category].estimatedTickets += estTickets;\n      additionalCategories[uc.category].estimatedHours += estHours;\n    }\n  });\n  return (\n    <section className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-4\">\n        ROI Breakdown\n      </h2>\n      <p className=\"text-xl text-text-tertiary mb-12\">\n        Detailed impact analysis by category\n      </p>\n\n      {/* Summary Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">Automatable Tickets</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {roiResult.automatable_tickets.toLocaleString()}\n            <span className=\"text-lg text-text-tertiary ml-2\">\n              ({roiResult.automatable_pct.toFixed(1)}%)\n            </span>\n          </div>\n        </Card>\n\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">Hours Saved/Month</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {Math.round(roiResult.total_hours_saved).toLocaleString()}\n          </div>\n        </Card>\n\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">FTE Equivalent</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            {roiResult.fte_equivalent.toFixed(1)}\n          </div>\n        </Card>\n\n        <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n          <div className=\"text-sm text-text-tertiary mb-2\">Annual Value</div>\n          <div className=\"text-3xl font-bold text-highlight\">\n            ${Math.round(roiResult.annual_value_usd / 1000).toLocaleString()}K\n          </div>\n        </Card>\n      </div>\n\n      {/* Category Breakdown */}\n      <Card className=\"!bg-bg-card !border !border-bg-card-alt/20\">\n        <h3 className=\"text-2xl font-bold text-text-primary mb-6\">\n          Impact by Category\n        </h3>\n\n        {/* Matched Categories with Actual Impact */}\n        <div className=\"space-y-6 mb-8\">\n          {roiResult.breakdown_by_category\n            .filter(cat => cat.category !== 'Meetings & Collaboration Licenses')\n            .map((category, idx) => (\n            <div key={idx} className=\"border-b border-bg-card-alt/20 pb-6\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div>\n                  <h4 className=\"text-lg font-semibold text-text-primary\">\n                    {category.category}\n                  </h4>\n                  <p className=\"text-sm text-text-tertiary\">\n                    {category.tickets.toLocaleString()} tickets/month automated\n                  </p>\n                </div>\n                <span className=\"px-3 py-1 rounded-full bg-highlight/20 text-highlight text-sm font-medium\">\n                  {Math.round(category.confidence * 100)}% confidence\n                </span>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"text-2xl font-bold text-highlight\">\n                    {Math.round(category.hours_saved).toLocaleString()} hours/month\n                  </div>\n                  <div className=\"text-sm text-text-tertiary\">\n                    ~{((category.hours_saved * 12) / 2000).toFixed(1)} FTE saved annually\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Additional Categories with Estimated Potential */}\n        {Object.keys(additionalCategories).length > 0 && (\n          <>\n            <div className=\"border-t border-bg-card-alt/20 pt-8 mb-6\">\n              <h4 className=\"text-lg font-semibold text-text-primary mb-2\">\n                Additional Automation Potential\n              </h4>\n              <p className=\"text-sm text-text-tertiary\">\n                More categories you can automate with your current capabilities\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {Object.values(additionalCategories).map((cat, idx) => (\n                <div key={idx} className=\"border-b border-bg-card-alt/20 last:border-0 pb-6 last:pb-0\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <h5 className=\"text-lg font-semibold text-text-primary\">\n                        {cat.category}\n                      </h5>\n                      <p className=\"text-sm text-text-tertiary\">\n                        {cat.useCases.length} AI Worker{cat.useCases.length !== 1 ? 's' : ''} available\n                      </p>\n                    </div>\n                    <span className=\"px-3 py-1 rounded-full bg-accent-blue/20 text-accent-blue text-sm font-medium\">\n                      Estimated\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"text-2xl font-bold text-accent-blue\">\n                        ~{Math.round(cat.estimatedHours)} hours/month\n                      </div>\n                      <div className=\"text-sm text-text-tertiary\">\n                        Potential savings based on typical use patterns\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </>\n        )}\n\n        <div className=\"mt-8 p-4 bg-bg-card-alt/30 rounded-lg\">\n          <p className=\"text-sm text-text-tertiary\">\n            <span className=\"font-semibold text-text-primary\">Overall Confidence: {roiResult.confidence}%</span>\n            {' '}— Based on weighted average of use case confidence scores and your ticket volumes\n          </p>\n        </div>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":7831},"archive/reports/components/AIWorkerCardCondensed.tsx":{"content":"import Card from \"@/components/ui/Card\";\nimport { MatchedWorker } from \"@/types\";\n\ninterface AIWorkerCardCondensedProps {\n  worker: MatchedWorker;\n  rank?: number;\n}\n\nexport default function AIWorkerCardCondensed({\n  worker,\n  rank,\n}: AIWorkerCardCondensedProps) {\n  const getPhaseLabel = () => {\n    switch (worker.deploymentPhase) {\n      case \"week-1\":\n        return \"Week 1\";\n      case \"month-2\":\n        return \"Month 2-3\";\n      case \"month-4\":\n        return \"Month 4-6\";\n      case \"month-6\":\n        return \"Month 6+\";\n    }\n  };\n\n  const getPhaseColor = () => {\n    switch (worker.deploymentPhase) {\n      case \"week-1\":\n        return \"text-accent-green\";\n      case \"month-2\":\n        return \"text-accent-blue\";\n      default:\n        return \"text-accent-orange\";\n    }\n  };\n\n  return (\n    <Card hover className=\"h-full flex flex-col\">\n      {/* Header with phase badge */}\n      <div className=\"flex items-center gap-2 mb-4\">\n        <span\n          className={`w-2 h-2 rounded-full ${getPhaseColor().replace(\"text-\", \"bg-\")}`}\n        />\n        <span className=\"text-sm text-text-tertiary\">{getPhaseLabel()}</span>\n      </div>\n\n      {/* Title with rank */}\n      <div className=\"flex items-start gap-3 mb-3\">\n        {rank && (\n          <span className=\"flex-shrink-0 w-8 h-8 bg-accent-blue rounded-full flex items-center justify-center text-bg-primary font-bold text-sm\">\n            {rank}\n          </span>\n        )}\n        <h3 className=\"text-lg font-bold text-text-primary leading-tight\">\n          {worker.name}\n        </h3>\n      </div>\n\n      {/* Description */}\n      <p className=\"text-sm text-text-secondary mb-4 line-clamp-2\">\n        {worker.description}\n      </p>\n\n      {/* Metrics */}\n      <div className=\"grid grid-cols-3 gap-2 mb-4\">\n        <div className=\"bg-accent-green/10 border border-accent-green/20 rounded p-3\">\n          <div className=\"text-xl font-bold text-accent-green\">\n            {worker.estimatedTickets}\n          </div>\n          <div className=\"text-xs text-text-tertiary\">Tickets/Mo</div>\n        </div>\n        <div className=\"bg-accent-blue/10 border border-accent-blue/20 rounded p-3\">\n          <div className=\"text-xl font-bold text-accent-blue\">\n            {worker.timeSaved}\n          </div>\n          <div className=\"text-xs text-text-tertiary\">Hrs Saved</div>\n        </div>\n        <div className=\"bg-bg-primary border border-brand-secondary/20 rounded p-3\">\n          <div className=\"text-xl font-bold text-text-primary\">\n            ${Math.round(worker.costSaved / 100) * 100}\n          </div>\n          <div className=\"text-xs text-text-tertiary\">Cost/Mo</div>\n        </div>\n      </div>\n\n      {/* Before/After */}\n      <div className=\"space-y-2 mb-4 flex-grow\">\n        <div className=\"bg-accent-orange/10 border border-accent-orange/20 rounded p-3\">\n          <div className=\"text-xs font-semibold text-text-tertiary mb-1\">\n            BEFORE\n          </div>\n          <p className=\"text-xs text-text-secondary line-clamp-2\">\n            {worker.beforeAfter.before}\n          </p>\n        </div>\n        <div className=\"bg-accent-green/10 border border-accent-green/20 rounded p-3\">\n          <div className=\"text-xs font-semibold text-text-tertiary mb-1\">\n            AFTER\n          </div>\n          <p className=\"text-xs text-text-secondary line-clamp-2\">\n            {worker.beforeAfter.after}\n          </p>\n        </div>\n      </div>\n\n      {/* Why this matters */}\n      <div className=\"border-t border-brand-secondary/10 pt-4 mt-auto\">\n        <p className=\"text-xs text-text-secondary line-clamp-3\">\n          <span className=\"font-semibold text-text-primary\">\n            Why this matters:\n          </span>{\" \"}\n          {worker.valueRationale}\n        </p>\n      </div>\n\n      {/* Footer badges */}\n      <div className=\"flex items-center gap-3 mt-4 pt-4 border-t border-brand-secondary/10\">\n        <div className=\"flex items-center gap-1 text-xs text-text-tertiary\">\n          <span>⏱️</span>\n          <span>{worker.setupTime}</span>\n        </div>\n        <div className=\"flex items-center gap-1 text-xs text-text-tertiary\">\n          <span>📊</span>\n          <span>{worker.learningPeriod}</span>\n        </div>\n        <div className=\"flex items-center gap-1 text-xs text-text-tertiary\">\n          <span\n            className={`w-2 h-2 rounded-full ${\n              worker.configComplexity === \"low\"\n                ? \"bg-accent-green\"\n                : worker.configComplexity === \"medium\"\n                  ? \"bg-accent-blue\"\n                  : \"bg-accent-orange\"\n            }`}\n          />\n          <span className=\"capitalize\">{worker.configComplexity}</span>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4728},"archive/reports/components/ScoreCircle.tsx":{"content":"import { useEffect, useState } from 'react';\nimport CountUp from 'react-countup';\n\ninterface ScoreCircleProps {\n  score: number;\n  rating: string;\n}\n\nexport default function ScoreCircle({ score, rating }: ScoreCircleProps) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const radius = 120;\n  const strokeWidth = 20;\n  const normalizedRadius = radius - strokeWidth / 2;\n  const circumference = normalizedRadius * 2 * Math.PI;\n  const strokeDashoffset = circumference - (score / 100) * circumference;\n\n  const getRatingColor = (ratingText: string) => {\n    if (ratingText.includes('Not Ready') || ratingText.includes('Low')) return 'text-gray-400';\n    if (ratingText.includes('Partially') || ratingText.includes('Medium')) return 'text-blue-400';\n    return 'text-accent-green';\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-8\">\n      <div className=\"relative w-64 h-64\">\n        <svg className=\"transform -rotate-90 w-64 h-64\">\n          <defs>\n            <linearGradient id=\"scoreGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n              <stop offset=\"0%\" stopColor=\"#6B7280\" />\n              <stop offset=\"50%\" stopColor=\"#3B82F6\" />\n              <stop offset=\"100%\" stopColor=\"#F97316\" />\n            </linearGradient>\n          </defs>\n          \n          <circle\n            stroke=\"#2F2F2F\"\n            fill=\"transparent\"\n            strokeWidth={strokeWidth}\n            r={normalizedRadius}\n            cx={radius}\n            cy={radius}\n          />\n          \n          <circle\n            stroke=\"url(#scoreGradient)\"\n            fill=\"transparent\"\n            strokeWidth={strokeWidth}\n            strokeDasharray={circumference + ' ' + circumference}\n            style={{\n              strokeDashoffset: isVisible ? strokeDashoffset : circumference,\n              transition: 'stroke-dashoffset 1.5s ease-in-out',\n            }}\n            strokeLinecap=\"round\"\n            r={normalizedRadius}\n            cx={radius}\n            cy={radius}\n          />\n        </svg>\n\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n          <div className=\"text-6xl font-bold text-text-primary\">\n            {isVisible ? <CountUp end={score} duration={1.5} /> : 0}\n          </div>\n          <div className=\"text-text-tertiary text-sm mt-1\">/ 100</div>\n        </div>\n      </div>\n\n      <div className={`mt-6 text-2xl font-semibold ${getRatingColor(rating)}`}>\n        {rating}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2557},"archive/reports/components/v4/CustomReportCTA.tsx":{"content":"interface CustomReportCTAProps {\n  onRequestDiscovery?: () => void;\n}\n\nexport default function CustomReportCTA({ onRequestDiscovery }: CustomReportCTAProps) {\n  return (\n    <div className=\"mb-20\">\n      <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-xl py-8 px-6 transition-all duration-200\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-4xl font-bold text-text-primary mb-6\">Move from Blueprint to Proof.</h2>\n          <p className=\"text-xl text-text-tertiary mb-10 leading-relaxed\">\n            This Blueprint gives you direction — now it's time to prove it. The Data Science Assessment validates each recommendation against your real ticket data to deliver a verified automation roadmap.\n          </p>\n\n          <div className=\"bg-bg-primary border border-bg-card-alt/20 rounded-lg py-8 px-6 mb-8 text-left\">\n            <h3 className=\"text-2xl font-bold text-text-primary mb-6 text-center\">7-Day Ticket Listening Process</h3>\n            \n            <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n              <div>\n                <div className=\"text-4xl font-bold text-highlight mb-2\">1</div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">Quick Call (15 min)</h4>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                  Enable read-only connectors to your ticket sources, collaboration tools, and identity systems\n                </p>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-highlight mb-2\">2</div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">Discovery Agent Runs</h4>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                  Analyzes ticket patterns, classifies into 3-level hierarchy, computes median TTR by category\n                </p>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-highlight mb-2\">3</div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">100% Accurate Report</h4>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                  Empirically grounded plan with exact categories to automate, precise ROI, and custom roadmap\n                </p>\n              </div>\n            </div>\n\n            <div className=\"border-t border-bg-card-alt/20 pt-6\">\n              <h4 className=\"font-semibold text-text-primary mb-4 text-center\">What You'll Get</h4>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"flex items-start gap-2\">\n                  <svg className=\"w-5 h-5 text-highlight mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Exact ticket categories to automate (down to subcategory level)\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <svg className=\"w-5 h-5 text-highlight mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Precise ROI projections for your specific team\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <svg className=\"w-5 h-5 text-highlight mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Segmentation: fully automatable vs. human-in-loop\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <svg className=\"w-5 h-5 text-highlight mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Custom 90-day roadmap with phased deployment\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <svg className=\"w-5 h-5 text-highlight mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Baseline metrics: volume by category, current median TTR\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <svg className=\"w-5 h-5 text-highlight mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span className=\"text-sm text-text-tertiary leading-relaxed\">\n                    Confidence intervals for deflection (typically 95%+)\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <a \n              href=\"https://www.ai.work/book-a-demo\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"inline-flex items-center gap-3 bg-white text-black px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors\"\n            >\n              <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n              <span className=\"flex-1 text-center\">Run Your Data Science Assessment</span>\n              <span>&gt;</span>\n            </a>\n            <p className=\"text-sm text-text-tertiary mt-4\">Validate impact, refine scope, and model ROI using your real data</p>\n          </div>\n\n          <div className=\"mt-8 flex items-center justify-center gap-8 text-sm text-text-tertiary\">\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span>7-day analysis</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n              </svg>\n              <span>Read-only access</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n              </svg>\n              <span>15-min setup call</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer Note */}\n      <div className=\"text-center text-text-tertiary text-sm mt-8\">\n        <p className=\"leading-relaxed\">\n          This assessment is based on anonymized IT automation data. Confidence: ~70% accuracy with self-reported inputs.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8854},"archive/README.md":{"content":"# Archive Directory\n\nThis directory contains deprecated code, assets, and documentation that are no longer actively used but preserved for reference.\n\n## Structure\n\n### `/reports`\nContains previous versions of the assessment report system (v2, v3, v4). The active version is v5 in the main codebase.\n\n- **pages/**: Old report page components\n- **components/**: Old report UI components\n\nEach version is preserved with its full implementation for reference or potential restoration.\n\n### `/fonts`\nContains duplicate font files that were moved from `src/components/font`. The canonical font location is `public/fonts`.\n\n### `/documentation`\nContains design artifacts, screenshots, and planning documents from development. Organized by date for historical reference.\n\n## Restoration\n\nIf you need to restore any archived version:\n\n1. Copy the desired files from the archive\n2. Update import paths in your application\n3. Test thoroughly before deploying\n\n## Last Updated\nOctober 27, 2025\n","size_bytes":983},"archive/reports/pages/v2/[id]/page.tsx":{"content":"\"use client\";\n\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\nexport default function RedirectToArchive() {\n  const router = useRouter();\n\n  useEffect(() => {\n    router.replace(\"/report/archive/v2/new\");\n  }, [router]);\n\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"inline-block animate-spin rounded-full h-16 w-16 border-4 border-accent-blue border-t-transparent mb-8\" />\n        <p className=\"text-text-secondary\">Redirecting...</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":604},"archive/reports/components/StatsImpactBanner.tsx":{"content":"import CountUp from \"react-countup\";\n\ninterface StatsImpactBannerProps {\n  ticketDeflection: number;\n  hoursSaved: number;\n  costSavings: number;\n  fteEquivalent: number;\n  confidence?: string;\n}\n\nexport default function StatsImpactBanner({\n  ticketDeflection,\n  hoursSaved,\n  costSavings,\n  fteEquivalent,\n  confidence = \"Low (~40%)\",\n}: StatsImpactBannerProps) {\n  return (\n    <div className=\"mb-16\">\n      <h2 className=\"text-3xl font-bold text-text-primary mb-8 text-center\">\n        Estimated Impact\n      </h2>\n\n      {/* Stats Banner */}\n      <div className=\"grid grid-cols-4 gap-0 bg-black\">\n        {/* Ticket Deflection */}\n        <div className=\"border-r border-gray-800 px-8 py-10\">\n          <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-6 leading-tight\">\n            Automate Service<br />Resolutions By\n          </div>\n          <div className=\"text-6xl font-bold text-white\">\n            <CountUp end={ticketDeflection} duration={2} />%\n          </div>\n        </div>\n\n        {/* Hours Saved */}\n        <div className=\"border-r border-gray-800 px-8 py-10\">\n          <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-6\">\n            Hours Saved\n          </div>\n          <div className=\"text-6xl font-bold text-white\">\n            <CountUp end={hoursSaved} duration={2} separator=\",\" />\n          </div>\n          <div className=\"text-sm text-gray-500 mt-2\">Per year</div>\n        </div>\n\n        {/* Cost Savings */}\n        <div className=\"border-r border-gray-800 px-8 py-10\">\n          <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-6 leading-tight\">\n            Reduce Operational<br />Cost By\n          </div>\n          <div className=\"text-6xl font-bold text-white\">\n            <CountUp\n              end={Math.round((costSavings / (costSavings + 10000)) * 100)}\n              duration={2}\n            />\n            %\n          </div>\n        </div>\n\n        {/* FTE Equivalent */}\n        <div className=\"px-8 py-10\">\n          <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-6\">\n            FTE Equivalent\n          </div>\n          <div className=\"text-6xl font-bold text-white\">\n            <CountUp end={fteEquivalent} duration={2} decimals={1} />\n          </div>\n          <div className=\"text-sm text-gray-500 mt-2\">\n            Full-time employees\n          </div>\n        </div>\n      </div>\n\n      {/* Confidence Note */}\n      <p className=\"text-sm text-text-tertiary text-center mt-4\">\n        Confidence: {confidence} - Based on your self-reported data\n      </p>\n    </div>\n  );\n}\n","size_bytes":2598},"archive/reports/components/v2/WhereAutomationsWin.tsx":{"content":"export default function WhereAutomationsWin() {\n  return (\n    <div className=\"mb-16\">\n      <h2 className=\"text-4xl font-bold text-white mb-8\">Where Automations Win First</h2>\n\n      <div className=\"bg-[#1a1a1a] border border-gray-800 rounded-lg p-8 mb-8\">\n        <p className=\"text-lg text-gray-300 mb-6\">\n          Based on anonymized discovery data across IT organizations, three categories consistently show\n          the highest automation potential with the fastest time-to-value:\n        </p>\n\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {/* App Access */}\n          <div className=\"bg-black/50 border border-gray-800/50 rounded-lg p-6\">\n            <div className=\"text-3xl font-bold text-white mb-2\">23%</div>\n            <h3 className=\"font-bold text-white mb-3\">App Access</h3>\n            <p className=\"text-sm text-gray-400 mb-4\">\n              Of total ticket volume. Median TTR: 1.5–1.7 hours.\n            </p>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-green-500\">✓</span>\n                <span className=\"text-gray-300\">Group-based provisioning</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-green-500\">✓</span>\n                <span className=\"text-gray-300\">Pre-approved app catalog</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-green-500\">✓</span>\n                <span className=\"text-gray-300\">Near real-time execution</span>\n              </div>\n            </div>\n          </div>\n\n          {/* DL Changes */}\n          <div className=\"bg-black/50 border border-gray-800/50 rounded-lg p-6\">\n            <div className=\"text-3xl font-bold text-white mb-2\">13%</div>\n            <h3 className=\"font-bold text-white mb-3\">DL Changes</h3>\n            <p className=\"text-sm text-gray-400 mb-4\">\n              Of total ticket volume. Median TTR: 1–1.5 hours.\n            </p>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-green-500\">✓</span>\n                <span className=\"text-gray-300\">Email group management</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-green-500\">✓</span>\n                <span className=\"text-gray-300\">Shared drive access</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-green-500\">✓</span>\n                <span className=\"text-gray-300\">Rules-based automation</span>\n              </div>\n            </div>\n          </div>\n\n          {/* In-App Actions */}\n          <div className=\"bg-black/50 border border-gray-800/50 rounded-lg p-6\">\n            <div className=\"text-3xl font-bold text-white mb-2\">18%</div>\n            <h3 className=\"font-bold text-white mb-3\">In-App Actions</h3>\n            <p className=\"text-sm text-gray-400 mb-4\">\n              Of total ticket volume. Median TTR: 45 min–2 hours.\n            </p>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-green-500\">✓</span>\n                <span className=\"text-gray-300\">License tier changes</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-green-500\">✓</span>\n                <span className=\"text-gray-300\">Channel/workspace setup</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-green-500\">✓</span>\n                <span className=\"text-gray-300\">User attribute updates</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Why This Matters */}\n      <div className=\"bg-gradient-to-br from-blue-900/20 to-green-900/20 border border-blue-800/30 rounded-lg p-8\">\n        <h3 className=\"text-xl font-bold text-white mb-4\">Why We're Confident Suggesting These First</h3>\n        <p className=\"text-gray-300 mb-4\">\n          In anonymized analyses across IT organizations, these three categories consistently deliver:\n        </p>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-semibold text-white mb-2\">Phase 1 Results (Weeks 1-4)</h4>\n            <ul className=\"space-y-2 text-sm text-gray-300\">\n              <li>• ~21.5% ticket deflection with the right connections</li>\n              <li>• ~3 FTE worth of time returned to team</li>\n              <li>• \"Instant\" TTR when approvals are pre-routed</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-white mb-2\">High-Confidence Criteria</h4>\n            <ul className=\"space-y-2 text-sm text-gray-300\">\n              <li>• Clear approval workflows already exist</li>\n              <li>• Repeatable patterns in ticket data</li>\n              <li>• Structured data available via APIs</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5327},"archive/reports/components/ExecutiveSummary-original.tsx":{"content":"import Card from '@/components/ui/Card';\nimport { ReadinessScore } from '@/types';\n\ninterface ExecutiveSummaryProps {\n  scores: ReadinessScore;\n  ticketVolume: number;\n  teamSize: string;\n}\n\nexport default function ExecutiveSummary({ scores, ticketVolume, teamSize }: ExecutiveSummaryProps) {\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      <h2 className=\"text-3xl font-bold text-text-primary mb-8 text-center\">\n        Your Readiness Breakdown\n      </h2>\n\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <Card>\n          <div className=\"text-4xl mb-3\">📊</div>\n          <h3 className=\"text-lg font-semibold text-text-primary mb-2\">\n            Tech Stack Compatibility\n          </h3>\n          <div className=\"text-3xl font-bold text-accent-blue mb-3\">\n            {scores.techStackScore}/40\n          </div>\n          <ul className=\"space-y-1 text-sm text-text-secondary\">\n            <li>• Strong foundation for deployment</li>\n            <li>• Rich integration data enables learning</li>\n          </ul>\n        </Card>\n\n        <Card>\n          <div className=\"text-4xl mb-3\">⚡</div>\n          <h3 className=\"text-lg font-semibold text-text-primary mb-2\">\n            Workflow Automation Potential\n          </h3>\n          <div className=\"text-3xl font-bold text-accent-green mb-3\">\n            {scores.workflowScore}/35\n          </div>\n          <ul className=\"space-y-1 text-sm text-text-secondary\">\n            <li>• High-value activities are automatable</li>\n            <li>• Expected autonomous handling: 25-50%</li>\n          </ul>\n        </Card>\n\n        <Card>\n          <div className=\"text-4xl mb-3\">🎯</div>\n          <h3 className=\"text-lg font-semibold text-text-primary mb-2\">\n            Scale & Impact\n          </h3>\n          <div className=\"text-3xl font-bold text-accent-orange mb-3\">\n            {scores.operationalScore}/25\n          </div>\n          <ul className=\"space-y-1 text-sm text-text-secondary\">\n            <li>• With {ticketVolume} monthly tickets</li>\n            <li>• High volume accelerates learning</li>\n          </ul>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2162},"attached_assets/README.md":{"content":"# Attached Assets\n\nThis directory is for project assets like images, documents, and other files that are actively used in the application.\n\n**Note**: Development artifacts, screenshots, and planning documents from previous work have been archived to `archive/documentation/development-artifacts/`.\n\nKeep this folder clean and organized by:\n1. Using descriptive filenames\n2. Removing temporary or unused files regularly\n3. Considering if files should be in the archive instead\n","size_bytes":476},"archive/reports/components/ROICalculationModal.tsx":{"content":"'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { X, Info } from 'lucide-react';\n\ninterface ROICalculationModalProps {\n  trigger?: React.ReactNode;\n  className?: string;\n}\n\nexport default function ROICalculationModal({ trigger, className = '' }: ROICalculationModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const modalRef = useRef<HTMLDivElement>(null);\n  const triggerRef = useRef<HTMLElement | null>(null);\n  const closeButtonRef = useRef<HTMLButtonElement>(null);\n\n  const handleOpen = (e: React.MouseEvent | React.KeyboardEvent) => {\n    triggerRef.current = e.currentTarget as HTMLElement;\n    setIsOpen(true);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n    // Restore focus to trigger element\n    setTimeout(() => {\n      triggerRef.current?.focus();\n    }, 0);\n  };\n\n  // Handle Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen]);\n\n  // Focus management and trap\n  useEffect(() => {\n    if (!isOpen || !modalRef.current) return;\n\n    // Move focus to close button or modal container\n    const initialFocus = closeButtonRef.current || modalRef.current;\n    initialFocus?.focus();\n\n    // Focus trap\n    const handleTab = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || !modalRef.current) return;\n\n      const focusableElements = modalRef.current.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n\n      // Guard against empty or single-element lists\n      if (focusableElements.length === 0) {\n        e.preventDefault();\n        return;\n      }\n\n      const firstFocusable = focusableElements[0] as HTMLElement;\n      const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n      // Single focusable element - prevent tabbing away\n      if (focusableElements.length === 1) {\n        e.preventDefault();\n        firstFocusable?.focus();\n        return;\n      }\n\n      // Handle backward tab\n      if (e.shiftKey) {\n        if (document.activeElement === firstFocusable) {\n          e.preventDefault();\n          lastFocusable?.focus();\n        }\n      } else {\n        // Handle forward tab\n        if (document.activeElement === lastFocusable) {\n          e.preventDefault();\n          firstFocusable?.focus();\n        }\n      }\n    };\n\n    // Use document listener to catch all tabs\n    document.addEventListener('keydown', handleTab);\n    return () => document.removeEventListener('keydown', handleTab);\n  }, [isOpen]);\n\n  const defaultTrigger = (\n    <button\n      onClick={handleOpen}\n      className=\"inline-flex items-center gap-1 text-accent-green hover:text-accent-green/80 transition-colors\"\n      aria-label=\"How is this calculated?\"\n    >\n      <Info className=\"w-4 h-4\" />\n    </button>\n  );\n\n  if (!isOpen) {\n    return (\n      <span className={className}>\n        {trigger ? (\n          <span onClick={handleOpen} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && handleOpen(e)}>\n            {trigger}\n          </span>\n        ) : (\n          defaultTrigger\n        )}\n      </span>\n    );\n  }\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black/60 z-50 backdrop-blur-sm\"\n        onClick={handleClose}\n        aria-hidden=\"true\"\n        role=\"presentation\"\n      />\n\n      {/* Modal */}\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-title\">\n        <div className=\"flex min-h-full items-center justify-center p-4\">\n          <div\n            ref={modalRef}\n            tabIndex={-1}\n            className=\"relative bg-[#1a1a1a] border border-brand-secondary/20 rounded-lg shadow-xl max-w-3xl w-full max-h-[85vh] overflow-y-auto focus:outline-none\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className=\"sticky top-0 bg-[#1a1a1a] border-b border-brand-secondary/20 px-6 py-4 flex items-center justify-between\">\n              <h2 id=\"modal-title\" className=\"text-2xl font-bold text-text-primary\">How We Calculate Your ROI</h2>\n              <button\n                ref={closeButtonRef}\n                onClick={handleClose}\n                className=\"text-text-secondary hover:text-text-primary transition-colors\"\n                aria-label=\"Close modal\"\n              >\n                <X className=\"w-6 h-6\" />\n              </button>\n            </div>\n\n            {/* Content */}\n            <div className=\"px-6 py-6 space-y-8 text-text-secondary\">\n              {/* The Short Version */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">The Short Version</h3>\n                <ol className=\"list-decimal list-inside space-y-2 text-lg\">\n                  <li>You tell us your <strong className=\"text-text-primary\">ticket volumes</strong> and the <strong className=\"text-text-primary\">average hands-on time</strong> it takes a person to handle them.</li>\n                  <li>Based on your <strong className=\"text-text-primary\">tech stack</strong>, we identify <strong className=\"text-text-primary\">AI Workers</strong> (use cases) that can either fully handle or greatly speed up those tickets.</li>\n                  <li>We <strong className=\"text-text-primary\">avoid double-counting</strong> by only using the remaining tickets in each category as we add use cases.</li>\n                  <li>We translate time saved into two views:\n                    <ul className=\"list-disc list-inside ml-6 mt-2 space-y-1\">\n                      <li><strong className=\"text-text-primary\">Capacity FTE</strong> (operational headroom)</li>\n                      <li><strong className=\"text-text-primary\">Budget FTE</strong> (realistic financial impact)</li>\n                    </ul>\n                  </li>\n                  <li>We apply <strong className=\"text-text-primary\">confidence</strong> and show <strong className=\"text-text-primary\">Expected / P70 / P90</strong> ranges so you can choose how conservative you want to be.</li>\n                </ol>\n              </section>\n\n              {/* Key Concepts */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">Key Concepts</h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-accent-green/10 border border-accent-green/30 rounded-lg\">\n                    <h4 className=\"font-semibold text-accent-green mb-2\">Capacity FTE vs Budget FTE</h4>\n                    <p className=\"text-lg\"><strong className=\"text-text-primary\">Capacity FTE</strong> shows operational headroom (hours saved converted to an annualized FTE using 2,000 hours/FTE). It's useful for planning workload and SLAs.</p>\n                    <p className=\"text-lg mt-2\"><strong className=\"text-text-primary\">Budget FTE</strong> reflects what typically turns into budget-relevant capacity. We apply a <strong className=\"text-text-primary\">capture rate</strong> (how much saved time becomes truly usable—default 50%) and <strong className=\"text-text-primary\">effective hours per FTE</strong> (realistic annual working hours—default 1,800).</p>\n                  </div>\n\n                  <div className=\"p-4 bg-accent-blue/10 border border-accent-blue/30 rounded-lg\">\n                    <h4 className=\"font-semibold text-accent-blue mb-2\">Confidence Bands</h4>\n                    <p className=\"text-lg\">Not every organization sees the same outcomes. Each worker has a confidence score. We weight savings by confidence and present:</p>\n                    <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1 text-lg\">\n                      <li><strong className=\"text-text-primary\">Expected</strong> (our best estimate)</li>\n                      <li><strong className=\"text-text-primary\">P70</strong> (conservative)</li>\n                      <li><strong className=\"text-text-primary\">P90</strong> (more conservative)</li>\n                    </ul>\n                    <p className=\"text-lg mt-2\">This gives you a range to share with stakeholders depending on your risk tolerance.</p>\n                  </div>\n                </div>\n              </section>\n\n              {/* How Savings Are Calculated */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">How Savings Are Calculated</h3>\n                <div className=\"space-y-3 text-lg\">\n                  <p>For each matching AI Worker:</p>\n                  <ul className=\"list-disc list-inside ml-4 space-y-2\">\n                    <li>We determine how many tickets it can handle from the <strong className=\"text-text-primary\">remaining pool</strong> in that category.</li>\n                    <li>We estimate <strong className=\"text-text-primary\">time saved per ticket</strong>:\n                      <ul className=\"list-disc list-inside ml-6 mt-1 space-y-1\">\n                        <li>If the task is fully automated: the <strong className=\"text-text-primary\">full hands-on time</strong> is saved.</li>\n                        <li>If it still needs a quick review/approval: we save the <strong className=\"text-text-primary\">difference</strong> between the original time and the short micro-touch (typically ~5 minutes).</li>\n                      </ul>\n                    </li>\n                    <li>If a small share of tickets still require a person (approvals/exceptions), we reduce the savings for those.</li>\n                  </ul>\n                  <p className=\"mt-3\">We add up the hours across all workers to get <strong className=\"text-text-primary\">total hours saved per month</strong>. If totals ever exceed your overall ticket count, we automatically <strong className=\"text-text-primary\">cap and scale</strong> the result so it stays realistic.</p>\n                </div>\n              </section>\n\n              {/* Guardrails */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">Guardrails That Keep Results Honest</h3>\n                <div className=\"grid md:grid-cols-2 gap-3\">\n                  <div className=\"p-3 bg-bg-primary/50 rounded border border-brand-secondary/10\">\n                    <span className=\"text-accent-green font-medium\">✓</span> No double-counting within a category\n                  </div>\n                  <div className=\"p-3 bg-bg-primary/50 rounded border border-brand-secondary/10\">\n                    <span className=\"text-accent-green font-medium\">✓</span> Caps to prevent saving more tickets than you have\n                  </div>\n                  <div className=\"p-3 bg-bg-primary/50 rounded border border-brand-secondary/10\">\n                    <span className=\"text-accent-green font-medium\">✓</span> Confidence-weighted outcomes\n                  </div>\n                  <div className=\"p-3 bg-bg-primary/50 rounded border border-brand-secondary/10\">\n                    <span className=\"text-accent-green font-medium\">✓</span> Conservative defaults for micro-touch and capture rate\n                  </div>\n                </div>\n              </section>\n\n              {/* FAQs */}\n              <section>\n                <h3 className=\"text-xl font-semibold text-text-primary mb-3\">Frequently Asked Questions</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-text-primary mb-1\">Why two FTE numbers?</h4>\n                    <p className=\"text-lg\">Capacity FTE describes operational headroom. Budget FTE is what usually translates into budget or hiring decisions.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-text-primary mb-1\">Why not just divide by 2,000 and be done?</h4>\n                    <p className=\"text-lg\">Because saved minutes rarely convert 1:1 into money. Capture rate and effective hours reflect how teams actually work.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-text-primary mb-1\">Our tickets still need approvals—does that inflate savings?</h4>\n                    <p className=\"text-lg\">No. If a worker still needs a quick human touch, we subtract that micro-touch from the saved time.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-text-primary mb-1\">Where do the worker confidence scores come from?</h4>\n                    <p className=\"text-lg\">From real-world maturity of the automation and how well it fits your stack. We weight savings by those scores.</p>\n                  </div>\n                </div>\n              </section>\n            </div>\n\n            {/* Footer */}\n            <div className=\"sticky bottom-0 bg-[#1a1a1a] border-t border-brand-secondary/20 px-6 py-4\">\n              <button\n                onClick={handleClose}\n                className=\"w-full bg-accent-green text-black font-medium py-3 px-6 rounded-lg hover:bg-accent-green/90 transition-colors\"\n              >\n                Got it\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":13459},"archive/reports/components/v3/GetStartedRoadmap.tsx":{"content":"import { AutomationOpportunity } from '@/types';\n\ninterface GetStartedRoadmapProps {\n  topOpportunities: AutomationOpportunity[];\n  hasApprovalWorkflows: boolean;\n  techStack: string[];\n}\n\nexport default function GetStartedRoadmap({\n  topOpportunities,\n  hasApprovalWorkflows,\n  techStack,\n}: GetStartedRoadmapProps) {\n  // Get the top opportunity for each phase\n  const crawlWorkflow = topOpportunities[0];\n  const walkWorkflows = topOpportunities.slice(0, 2);\n  const runWorkflows = topOpportunities.slice(0, 5);\n\n  return (\n    <div className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-8\">How to Get Started: Crawl → Walk → Run</h2>\n      \n      <p className=\"text-lg text-text-tertiary mb-8 max-w-4xl leading-relaxed\">\n        Most teams deploy their first AI Worker within 2 weeks and see measurable impact within 30 days. \n        Here's your phased roadmap with recommended use cases for each stage.\n      </p>\n\n      <div className=\"space-y-6\">\n        {/* Crawl Phase */}\n        <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 transition-all duration-200\">\n          <div className=\"flex items-start gap-4 mb-6\">\n            <div className=\"flex-shrink-0 w-16 h-16 bg-gradient-to-br from-blue-600 to-blue-700 rounded-lg flex items-center justify-center\">\n              <span className=\"text-2xl font-bold text-text-primary\">1</span>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary mb-2\">Crawl (Week 1-2)</h3>\n              <p className=\"text-text-tertiary\">Shadow mode, single connector, low-risk workflow</p>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n            <div>\n              <h4 className=\"font-semibold text-text-primary mb-3\">Recommended First Workflow</h4>\n              <div className=\"bg-bg-primary border border-bg-card-alt/20 rounded-lg p-4\">\n                <div className=\"font-semibold text-text-primary mb-1\">{crawlWorkflow?.processName || 'App Access Requests'}</div>\n                <p className=\"text-sm text-text-tertiary mb-2\">{crawlWorkflow?.tool || 'Okta'} integration</p>\n                <p className=\"text-sm text-text-tertiary leading-relaxed\">{crawlWorkflow?.description}</p>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold text-text-primary mb-3\">Week 1-2 Activities</h4>\n              <div className=\"space-y-2 text-sm text-text-tertiary\">\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Enable 1 read-only connector (15 min setup)</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>AI Worker observes in shadow mode</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Review recommendations, no live actions</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Validate accuracy before going live</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-bg-card-alt/20 border border-bg-card-alt/20 rounded p-4\">\n            <p className=\"text-sm text-text-tertiary leading-relaxed\">\n              <span className=\"font-semibold text-text-primary\">Goal:</span> Validate AI Worker understands your workflow patterns without risk. \n              Team gains confidence before enabling live actions.\n            </p>\n          </div>\n        </div>\n\n        {/* Walk Phase */}\n        <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 transition-all duration-200\">\n          <div className=\"flex items-start gap-4 mb-6\">\n            <div className=\"flex-shrink-0 w-16 h-16 bg-gradient-to-br from-green-600 to-green-700 rounded-lg flex items-center justify-center\">\n              <span className=\"text-2xl font-bold text-text-primary\">2</span>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary mb-2\">Walk (Week 3-4)</h3>\n              <p className=\"text-text-tertiary\">Live actions with approvals, expand to 2-3 workflows</p>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n            <div>\n              <h4 className=\"font-semibold text-text-primary mb-3\">Add Workflows</h4>\n              <div className=\"space-y-3\">\n                {walkWorkflows.map((opp, idx) => (\n                  <div key={idx} className=\"bg-bg-primary border border-bg-card-alt/20 rounded-lg p-3\">\n                    <div className=\"font-semibold text-text-primary text-sm mb-1\">{opp.processName}</div>\n                    <p className=\"text-xs text-text-tertiary\">{opp.projectedDeflection}% deflection · {opp.tool}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold text-text-primary mb-3\">Week 3-4 Activities</h4>\n              <div className=\"space-y-2 text-sm text-text-tertiary\">\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Enable live actions with approval workflows</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Expand to 2-3 connectors in your stack</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Configure RBAC policies and guardrails</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Monitor metrics: deflection rate, TTR reduction</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-bg-card-alt/20 border border-bg-card-alt/20 rounded p-4\">\n            <p className=\"text-sm text-text-tertiary leading-relaxed\">\n              <span className=\"font-semibold text-text-primary\">Goal:</span> Handle real requests with proper approvals in place. \n              Measure impact and build operational confidence.\n            </p>\n          </div>\n        </div>\n\n        {/* Run Phase */}\n        <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 transition-all duration-200\">\n          <div className=\"flex items-start gap-4 mb-6\">\n            <div className=\"flex-shrink-0 w-16 h-16 bg-gradient-to-br from-purple-600 to-purple-700 rounded-lg flex items-center justify-center\">\n              <span className=\"text-2xl font-bold text-text-primary\">3</span>\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-text-primary mb-2\">Run (Month 2-3)</h3>\n              <p className=\"text-text-tertiary\">Full deployment, 5+ workflows, autonomous operations</p>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n            <div>\n              <h4 className=\"font-semibold text-text-primary mb-3\">Full Workflow Coverage</h4>\n              <div className=\"bg-bg-primary border border-bg-card-alt/20 rounded-lg p-4\">\n                <div className=\"text-3xl font-bold text-highlight mb-2\">{runWorkflows.length}</div>\n                <p className=\"text-sm text-text-tertiary mb-3\">Active AI Workers</p>\n                <div className=\"space-y-1\">\n                  {runWorkflows.map((opp, idx) => (\n                    <div key={idx} className=\"text-xs text-text-tertiary\">\n                      • {opp.processName} ({opp.projectedDeflection}%)\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold text-text-primary mb-3\">Month 2-3 Activities</h4>\n              <div className=\"space-y-2 text-sm text-text-tertiary\">\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Deploy all 5 recommended AI Workers</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Connect {techStack.length} tools in your stack</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Track ROI: deflection %, hours saved, FTE impact</span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-highlight mt-1\">✓</span>\n                  <span>Optimize based on usage patterns and feedback</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-bg-card-alt/20 border border-bg-card-alt/20 rounded p-4\">\n            <p className=\"text-sm text-text-tertiary leading-relaxed\">\n              <span className=\"font-semibold text-text-primary\">Goal:</span> Autonomous IT operations at scale. \n              Team capacity freed for strategic initiatives, measurable ROI delivered.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Approval Workflows Note */}\n      {!hasApprovalWorkflows && (\n        <div className=\"mt-6 bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 transition-all duration-200\">\n          <div className=\"flex items-start gap-3\">\n            <svg className=\"w-6 h-6 text-highlight mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            <div>\n              <h4 className=\"font-semibold text-text-primary mb-2\">Set Up Approval Workflows First</h4>\n              <p className=\"text-sm text-text-tertiary leading-relaxed\">\n                AI Workers operate most effectively with approval workflows in place. Week 1 should include \n                mapping your existing approval processes before enabling live actions.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10904},"archive/reports/pages/v4/[id]/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { AssessmentData, ReadinessScore } from \"@/types\";\nimport { calculateReadinessScore } from \"@/lib/scoringAlgorithm\";\nimport { FeasibilityEngine, FeasibilityResult } from \"@/lib/engines/feasibility-engine\";\nimport { UseCaseMatcher, MatchedUseCase } from \"@/lib/engines/use-case-matcher\";\nimport { ROICalculator, ROIResult } from \"@/lib/engines/roi-calculator\";\nimport ExecutiveSummary from \"@/components/assessment/report/v4/ExecutiveSummary\";\nimport OpportunityAnalysis from \"@/components/assessment/report/v4/OpportunityAnalysis\";\nimport BestFitUseCases from \"@/components/assessment/report/v4/BestFitUseCases\";\nimport ROIBreakdown from \"@/components/assessment/report/v4/ROIBreakdown\";\nimport GetStartedPlan from \"@/components/assessment/report/v4/GetStartedPlan\";\nimport ExpectedOutcomes from \"@/components/assessment/report/v4/ExpectedOutcomes\";\nimport CustomReportCTA from \"@/components/assessment/report/v4/CustomReportCTA\";\nimport UnlockReportModal from \"@/components/cta/UnlockReportModal\";\n\nexport default function ReportV4Page() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState<ReadinessScore | null>(null);\n  const [assessmentData, setAssessmentData] = useState<AssessmentData | null>(null);\n  const [showModal, setShowModal] = useState(false);\n  \n  // New engine results\n  const [feasibilityResults, setFeasibilityResults] = useState<FeasibilityResult[]>([]);\n  const [matchedUseCases, setMatchedUseCases] = useState<MatchedUseCase[]>([]);\n  const [roiResult, setRoiResult] = useState<ROIResult | null>(null);\n\n  useEffect(() => {\n    // Get data from sessionStorage\n    const dataStr = sessionStorage.getItem(\"assessmentData\");\n    if (!dataStr) {\n      router.push(\"/\");\n      return;\n    }\n\n    const data: AssessmentData = JSON.parse(dataStr);\n    setAssessmentData(data);\n\n    // Calculate score and run engines\n    setTimeout(() => {\n      const calcScore = calculateReadinessScore(data);\n      setScore(calcScore);\n      \n      // Initialize engines\n      const feasibilityEngine = new FeasibilityEngine();\n      const useCaseMatcher = new UseCaseMatcher();\n      const roiCalculator = new ROICalculator();\n      \n      // Convert tech stack to tools format\n      const tools = data.techStack?.map(toolName => ({\n        name: toolName,\n        license_tier: 'standard' // Default tier, could be enhanced later\n      })) || [];\n      \n      // Convert ticket distribution to activities format\n      const activities = [];\n      if (data.ticketDistribution && data.monthlyTickets) {\n        const categoryMapping: Record<string, {key: string, ttr: number}> = {\n          applications: {key: 'app_access', ttr: 1.7},\n          hardware: {key: 'hardware', ttr: 2.5},\n          onboarding: {key: 'onboarding', ttr: 4.0},\n          distributionLists: {key: 'distribution_lists', ttr: 0.75},\n          network: {key: 'network', ttr: 1.5},\n          security: {key: 'security', ttr: 3.0}\n        };\n        \n        for (const [key, percentage] of Object.entries(data.ticketDistribution)) {\n          const mapping = categoryMapping[key];\n          if (mapping && percentage > 0) {\n            activities.push({\n              category: mapping.key,\n              monthly_volume: Math.round((data.monthlyTickets * percentage) / 100),\n              avg_ttr_hours: mapping.ttr\n            });\n          }\n        }\n      }\n      \n      // Run analysis engines\n      const feasibility = feasibilityEngine.analyzeStack(tools);\n      const matches = useCaseMatcher.matchUseCases(activities, feasibility);\n      const roi = roiCalculator.calculateROI(data.monthlyTickets || 1000, matches);\n      \n      // Store results\n      setFeasibilityResults(feasibility);\n      setMatchedUseCases(matches);\n      setRoiResult(roi);\n      \n      setLoading(false);\n    }, 3000);\n\n    // Show modal after 45 seconds\n    const modalTimer = setTimeout(() => {\n      setShowModal(true);\n    }, 45000);\n\n    return () => clearTimeout(modalTimer);\n  }, [router]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-bg-primary flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-16 w-16 border-4 border-highlight border-t-transparent mb-8\" />\n          <h2 className=\"text-2xl font-bold text-text-primary mb-2\">\n            Analyzing your environment...\n          </h2>\n          <p className=\"text-text-tertiary\">\n            Running AI Worker readiness analysis\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!score || !assessmentData) return null;\n\n  return (\n    <div className=\"min-h-screen bg-bg-primary\">\n      {/* Header */}\n      <header className=\"border-b border-bg-card-alt/20\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4 flex items-center justify-between\">\n          <Link href=\"/\">\n            <Image \n              src=\"/images/aiwork-logo.png\" \n              alt=\"ai.work\" \n              width={120} \n              height={30}\n              className=\"h-7 w-auto\"\n            />\n          </Link>\n          <div className=\"text-right\">\n            <div className=\"text-xs text-text-tertiary\">Report Version</div>\n            <div className=\"text-lg font-bold text-text-primary\">V4.0</div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"py-12\">\n        <div className=\"container mx-auto px-4 max-w-7xl\">\n          {/* Report Header */}\n          <div className=\"mb-20\">\n            <h1 className=\"text-5xl font-normal text-text-primary mb-3\">\n              AI Worker Readiness Blueprint\n            </h1>\n            <p className=\"text-xl text-text-tertiary\">\n              Derived from your {assessmentData.techStack?.length || 0} connected tools and {(assessmentData.monthlyTickets || 0).toLocaleString()} monthly tickets, this blueprint maps automation opportunities, readiness insights, and next steps for deploying AI Workers across your enterprise stack.\n            </p>\n          </div>\n\n        {/* Executive Summary - Hero Section */}\n        {roiResult && (\n          <ExecutiveSummary\n            roiResult={roiResult}\n            totalMonthlyTickets={assessmentData.monthlyTickets || 1000}\n            assessmentData={{\n              techStack: assessmentData.techStack || [],\n              additionalContext: assessmentData.additionalContext\n            }}\n            matchedUseCases={matchedUseCases}\n          />\n        )}\n\n        {/* What You Can Automate Right Now */}\n        <OpportunityAnalysis\n          matchedUseCases={matchedUseCases}\n          feasibilityResults={feasibilityResults}\n          topN={10}\n        />\n\n        <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n        {/* How to Get Started */}\n        <GetStartedPlan\n          matchedUseCases={matchedUseCases}\n        />\n\n        <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n        {/* What To Expect */}\n        {roiResult && (\n          <ExpectedOutcomes\n            roiResult={roiResult}\n            totalMonthlyTickets={assessmentData.monthlyTickets || 1000}\n          />\n        )}\n\n        <div className=\"border-t border-bg-card-alt/20 mb-20\"></div>\n\n        {/* Call to Action Section */}\n        <CustomReportCTA onRequestDiscovery={() => setShowModal(true)} />\n        </div>\n      </main>\n\n      {/* Modal */}\n      {showModal && (\n        <UnlockReportModal\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":7707},"archive/reports/components/ComparisonTable.tsx":{"content":"import Card from \"@/components/ui/Card\";\n\ninterface ComparisonTableProps {\n  userScore: number;\n  techStackScore: number;\n  deflectionPotential: number;\n}\n\nexport default function ComparisonTable({\n  userScore,\n  techStackScore,\n  deflectionPotential,\n}: ComparisonTableProps) {\n  // Calculate user's manual processing percentage (inverse of automation)\n  const manualProcessing = 100 - deflectionPotential;\n\n  // Industry benchmarks per spec\n  const benchmarks = {\n    industryAvg: {\n      readiness: 55,\n      techStack: 60,\n      deflection: 30,\n      manual: 75,\n    },\n    topPerformers: {\n      readiness: 85,\n      techStack: 95,\n      deflection: 70,\n      manual: 25,\n    },\n  };\n\n  // Helper function to get color based on comparison\n  const getScoreColor = (userVal: number, avgVal: number, topVal: number) => {\n    if (userVal >= topVal - 5) return \"text-accent-green font-bold\";\n    if (userVal >= avgVal) return \"text-accent-blue font-semibold\";\n    if (userVal >= avgVal - 10) return \"text-yellow-600\";\n    return \"text-accent-orange\";\n  };\n\n  return (\n    <Card>\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"border-b-2 border-brand-secondary/20\">\n              <th className=\"text-left py-3 px-4 font-bold text-text-primary\">\n                Metric\n              </th>\n              <th className=\"text-center py-3 px-4 font-bold text-accent-blue\">\n                You\n              </th>\n              <th className=\"text-center py-3 px-4 font-bold text-text-tertiary\">\n                Industry Avg\n              </th>\n              <th className=\"text-center py-3 px-4 font-bold text-accent-green\">\n                Top Performers\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr className=\"border-b border-brand-secondary/10 hover:bg-bg-elevated transition-colors\">\n              <td className=\"py-4 px-4 text-text-secondary\">\n                Automation Readiness\n              </td>\n              <td\n                className={`text-center py-4 px-4 text-lg ${getScoreColor(userScore, benchmarks.industryAvg.readiness, benchmarks.topPerformers.readiness)}`}\n              >\n                {userScore}/100\n              </td>\n              <td className=\"text-center py-4 px-4 text-text-tertiary\">\n                {benchmarks.industryAvg.readiness}/100\n              </td>\n              <td className=\"text-center py-4 px-4 text-accent-green font-semibold\">\n                {benchmarks.topPerformers.readiness}/100\n              </td>\n            </tr>\n\n            <tr className=\"border-b border-brand-secondary/10 hover:bg-bg-elevated transition-colors\">\n              <td className=\"py-4 px-4 text-text-secondary\">\n                Tech Stack Compatibility\n              </td>\n              <td\n                className={`text-center py-4 px-4 text-lg ${getScoreColor(techStackScore, benchmarks.industryAvg.techStack, benchmarks.topPerformers.techStack)}`}\n              >\n                {techStackScore}%\n              </td>\n              <td className=\"text-center py-4 px-4 text-text-tertiary\">\n                {benchmarks.industryAvg.techStack}%\n              </td>\n              <td className=\"text-center py-4 px-4 text-accent-green font-semibold\">\n                {benchmarks.topPerformers.techStack}%\n              </td>\n            </tr>\n\n            <tr className=\"border-b border-brand-secondary/10 hover:bg-bg-elevated transition-colors\">\n              <td className=\"py-4 px-4 text-text-secondary\">\n                Ticket Deflection Potential\n              </td>\n              <td\n                className={`text-center py-4 px-4 text-lg ${getScoreColor(deflectionPotential, benchmarks.industryAvg.deflection, benchmarks.topPerformers.deflection)}`}\n              >\n                {deflectionPotential}%\n              </td>\n              <td className=\"text-center py-4 px-4 text-text-tertiary\">\n                {benchmarks.industryAvg.deflection}%\n              </td>\n              <td className=\"text-center py-4 px-4 text-accent-green font-semibold\">\n                {benchmarks.topPerformers.deflection}%\n              </td>\n            </tr>\n\n            <tr className=\"border-b border-brand-secondary/10 hover:bg-bg-elevated transition-colors\">\n              <td className=\"py-4 px-4 text-text-secondary\">\n                Manual Ticket Processing\n              </td>\n              <td\n                className={`text-center py-4 px-4 text-lg ${\n                  manualProcessing <= benchmarks.topPerformers.manual + 5\n                    ? \"text-accent-green font-bold\"\n                    : manualProcessing <= benchmarks.industryAvg.manual\n                      ? \"text-accent-blue font-semibold\"\n                      : manualProcessing <= benchmarks.industryAvg.manual + 10\n                        ? \"text-yellow-600\"\n                        : \"text-accent-orange\"\n                }`}\n              >\n                {manualProcessing}%\n              </td>\n              <td className=\"text-center py-4 px-4 text-text-tertiary\">\n                {benchmarks.industryAvg.manual}%\n              </td>\n              <td className=\"text-center py-4 px-4 text-accent-green font-semibold\">\n                {benchmarks.topPerformers.manual}%\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      {/* Legend */}\n      <div className=\"mt-4 flex items-center gap-4 text-xs text-text-tertiary justify-end\">\n        <div className=\"flex items-center gap-1\">\n          <div className=\"w-3 h-3 bg-accent-green/20 rounded\"></div>\n          <span>Top tier</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <div className=\"w-3 h-3 bg-accent-blue/20 rounded\"></div>\n          <span>Above average</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <div className=\"w-3 h-3 bg-yellow-600/20 rounded\"></div>\n          <span>Average</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <div className=\"w-3 h-3 bg-accent-orange/20 rounded\"></div>\n          <span>Below average</span>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":6206},"archive/reports/components/v3/ExpectedOutcomes.tsx":{"content":"interface ExpectedOutcomesProps {\n  estimatedDeflection: number;\n  hoursSaved: number;\n  fteImpact: number;\n}\n\nexport default function ExpectedOutcomes({\n  estimatedDeflection,\n  hoursSaved,\n  fteImpact,\n}: ExpectedOutcomesProps) {\n  return (\n    <div className=\"mb-20\">\n      <h2 className=\"text-4xl font-bold text-text-primary mb-8\">What to Expect</h2>\n      \n      <p className=\"text-lg text-text-tertiary mb-8 max-w-4xl leading-relaxed\">\n        Here's the timeline and measurable outcomes based on teams with similar tech stacks \n        who've deployed AI Workers. These are conservative estimates grounded in operational reality.\n      </p>\n\n      {/* Timeline */}\n      <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 mb-8 transition-all duration-200\">\n        <h3 className=\"text-2xl font-bold text-text-primary mb-6\">30-Day Pilot Results</h3>\n        \n        <div className=\"grid md:grid-cols-3 gap-8 mb-8\">\n          <div>\n            <div className=\"text-4xl font-bold text-highlight mb-2\">{estimatedDeflection}%</div>\n            <div className=\"text-sm text-text-tertiary uppercase tracking-wider mb-2\">Ticket Deflection</div>\n            <p className=\"text-sm text-text-tertiary leading-relaxed\">\n              Of total volume handled autonomously with approvals in place\n            </p>\n          </div>\n          <div>\n            <div className=\"text-4xl font-bold text-highlight mb-2\">Real-time</div>\n            <div className=\"text-sm text-text-tertiary uppercase tracking-wider mb-2\">TTR for Approved Actions</div>\n            <p className=\"text-sm text-text-tertiary leading-relaxed\">\n              App access, group changes, license updates when policies exist\n            </p>\n          </div>\n          <div>\n            <div className=\"text-4xl font-bold text-highlight mb-2\">~{fteImpact}</div>\n            <div className=\"text-sm text-text-tertiary uppercase tracking-wider mb-2\">FTE Capacity</div>\n            <p className=\"text-sm text-text-tertiary leading-relaxed\">\n              Worth of time returned to team for strategic work\n            </p>\n          </div>\n        </div>\n\n        <div className=\"border-t border-bg-card-alt/20 pt-6\">\n          <h4 className=\"font-semibold text-text-primary mb-4\">4-Week Timeline</h4>\n          <div className=\"space-y-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-20 text-sm font-semibold text-highlight\">Week 1</div>\n              <div className=\"text-sm text-text-tertiary leading-relaxed\">\n                Shadow mode validation. AI Worker observes, no live actions. Team reviews accuracy.\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-20 text-sm font-semibold text-highlight\">Week 2</div>\n              <div className=\"text-sm text-text-tertiary leading-relaxed\">\n                Enable first live workflow with approvals. Typically app access or group management.\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-20 text-sm font-semibold text-highlight\">Week 3</div>\n              <div className=\"text-sm text-text-tertiary leading-relaxed\">\n                Expand to 2-3 workflows. Configure guardrails and RBAC policies. Monitor deflection metrics.\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-20 text-sm font-semibold text-highlight\">Week 4</div>\n              <div className=\"text-sm text-text-tertiary leading-relaxed\">\n                Full pilot deployment. 3-5 AI Workers active. Measure ROI and prepare for scale.\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Before/After Comparison */}\n      <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n        <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 transition-all duration-200\">\n          <h3 className=\"text-xl font-bold text-text-primary mb-4\">Before AI Workers</h3>\n          <div className=\"space-y-3 text-sm text-text-tertiary\">\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-red-500\">✗</span>\n              <span>Team handles {estimatedDeflection}% of tickets manually</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-red-500\">✗</span>\n              <span>Average TTR: 1-2 hours for routine requests</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-red-500\">✗</span>\n              <span>Skilled engineers spend time on repetitive work</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-red-500\">✗</span>\n              <span>Queue grows faster than resolution capacity</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 transition-all duration-200\">\n          <h3 className=\"text-xl font-bold text-text-primary mb-4\">After AI Workers</h3>\n          <div className=\"space-y-3 text-sm text-text-tertiary\">\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-highlight\">✓</span>\n              <span>{estimatedDeflection}% of volume handled autonomously</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-highlight\">✓</span>\n              <span>Real-time TTR for approved actions</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-highlight\">✓</span>\n              <span>{hoursSaved.toLocaleString()} hours/year freed for strategic work</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-highlight\">✓</span>\n              <span>Team capacity scales without headcount</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Metrics You'll Track */}\n      <div className=\"bg-bg-card border border-bg-card-alt/20 rounded-lg py-8 px-6 transition-all duration-200\">\n        <h3 className=\"text-xl font-bold text-text-primary mb-4\">Metrics You'll Track</h3>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <div>\n            <h4 className=\"font-semibold text-text-primary mb-2 text-sm\">Operational Metrics</h4>\n            <ul className=\"space-y-1 text-sm text-text-tertiary\">\n              <li>• Ticket deflection rate by workflow</li>\n              <li>• Time to resolution (TTR) reduction</li>\n              <li>• Volume handled autonomously</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-text-primary mb-2 text-sm\">Team Impact</h4>\n            <ul className=\"space-y-1 text-sm text-text-tertiary\">\n              <li>• Hours saved per week</li>\n              <li>• FTE capacity returned</li>\n              <li>• Strategic work vs. repetitive tasks</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-text-primary mb-2 text-sm\">Governance</h4>\n            <ul className=\"space-y-1 text-sm text-text-tertiary\">\n              <li>• Approval workflow compliance</li>\n              <li>• Audit log completeness</li>\n              <li>• RBAC policy effectiveness</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7612},"archive/reports/components/v2/DiscoveryCTA.tsx":{"content":"import Button from '@/components/ui/Button';\n\ninterface DiscoveryCTAProps {\n  onRequestDiscovery: () => void;\n}\n\nexport default function DiscoveryCTA({ onRequestDiscovery }: DiscoveryCTAProps) {\n  return (\n    <div className=\"mb-16\">\n      <div className=\"bg-gradient-to-br from-blue-900/30 to-green-900/30 border border-blue-800/40 rounded-xl p-12\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-4xl font-bold text-white mb-6\">Get a 100% Accurate Report</h2>\n          <p className=\"text-xl text-gray-300 mb-8\">\n            This assessment provides ~70% accuracy based on your self-reported data. For precise automation\n            opportunities and ROI projections, we need to analyze your actual ticket data.\n          </p>\n\n          <div className=\"bg-black/50 border border-gray-800 rounded-lg p-8 mb-8\">\n            <h3 className=\"text-2xl font-bold text-white mb-6\">7-Day Ticket Listening Process</h3>\n            \n            <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n              <div>\n                <div className=\"text-4xl font-bold text-blue-400 mb-2\">1</div>\n                <h4 className=\"font-semibold text-white mb-2\">Quick Call (15 min)</h4>\n                <p className=\"text-sm text-gray-400\">\n                  Enable read-only connectors to your ticket sources, collaboration tools, and identity systems\n                </p>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-blue-400 mb-2\">2</div>\n                <h4 className=\"font-semibold text-white mb-2\">Discovery Agent Runs</h4>\n                <p className=\"text-sm text-gray-400\">\n                  Analyzes ticket patterns, classifies into 3-level hierarchy, computes median TTR by category\n                </p>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-blue-400 mb-2\">3</div>\n                <h4 className=\"font-semibold text-white mb-2\">100% Accurate Report</h4>\n                <p className=\"text-sm text-gray-400\">\n                  Empirically grounded plan with exact categories to automate, precise ROI, and custom roadmap\n                </p>\n              </div>\n            </div>\n\n            <div className=\"border-t border-gray-800 pt-6\">\n              <h4 className=\"font-semibold text-white mb-4\">What You'll Get</h4>\n              <div className=\"grid md:grid-cols-2 gap-4 text-left\">\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">✓</span>\n                  <span className=\"text-sm text-gray-300\">\n                    Exact ticket categories to automate (down to subcategory and entity level)\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">✓</span>\n                  <span className=\"text-sm text-gray-300\">\n                    Precise ROI projections for your specific team composition\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">✓</span>\n                  <span className=\"text-sm text-gray-300\">\n                    Segmentation: fully automatable / assisted / human-in-loop\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">✓</span>\n                  <span className=\"text-sm text-gray-300\">\n                    Custom 90-day roadmap with phased deployment plan\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">✓</span>\n                  <span className=\"text-sm text-gray-300\">\n                    Baseline metrics: volume by category, current median TTR\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">✓</span>\n                  <span className=\"text-sm text-gray-300\">\n                    Confidence intervals for deflection predictions (typically 95%+)\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-center\">\n            <Button onClick={onRequestDiscovery} className=\"text-lg px-10 py-5\">\n              Request Custom Discovery Report\n            </Button>\n          </div>\n\n          {/* Trust Indicators */}\n          <div className=\"flex flex-wrap justify-center items-center gap-8 mt-8 text-sm text-gray-400\">\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n              <span>Private & secure</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n              <span>Read-only access</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n              <span>7 days to insights</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z\" />\n              </svg>\n              <span>15-min setup call</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6641},"archive/reports/components/v2/AIWorkerSwimlanes.tsx":{"content":"import { AutomationOpportunity } from '@/types';\n\ninterface AIWorkerSwimlanesProps {\n  opportunities: AutomationOpportunity[];\n}\n\nexport default function AIWorkerSwimlanes({ opportunities }: AIWorkerSwimlanesProps) {\n  // Show top 3 opportunities in swimlane format\n  const topOpportunities = opportunities.slice(0, 3);\n\n  return (\n    <div className=\"mb-16\">\n      <h2 className=\"text-4xl font-bold text-white mb-8\">What an AI Worker Would Do</h2>\n      <p className=\"text-lg text-gray-400 mb-8\">\n        Here's how autonomous workers would handle your top automation opportunities, organized by\n        Workstream → Skills → Agents architecture.\n      </p>\n\n      <div className=\"space-y-8\">\n        {topOpportunities.map((opp, index) => (\n          <div key={index} className=\"bg-[#1a1a1a] border border-gray-800 rounded-lg overflow-hidden\">\n            {/* Header */}\n            <div className=\"bg-gradient-to-r from-blue-900/30 to-green-900/30 border-b border-gray-800 p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div>\n                  <h3 className=\"text-2xl font-bold text-white mb-2\">{opp.processName}</h3>\n                  <p className=\"text-gray-300\">{opp.tool} · {opp.category}</p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-3xl font-bold text-white\">{opp.projectedDeflection}%</div>\n                  <div className=\"text-sm text-gray-400\">deflection</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Swimlane Content */}\n            <div className=\"p-6\">\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                {/* Workstream */}\n                <div>\n                  <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-3\">Workstream</div>\n                  <div className=\"bg-black/50 border border-gray-800/50 rounded-lg p-4\">\n                    <div className=\"font-semibold text-white mb-2\">{opp.workstream}</div>\n                    <p className=\"text-sm text-gray-400\">{opp.description}</p>\n                  </div>\n                </div>\n\n                {/* Skills */}\n                <div>\n                  <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-3\">Skills</div>\n                  <div className=\"bg-black/50 border border-gray-800/50 rounded-lg p-4\">\n                    <div className=\"space-y-2\">\n                      {opp.skills.map((skill, idx) => (\n                        <div key={idx} className=\"flex items-center gap-2\">\n                          <div className=\"w-1.5 h-1.5 rounded-full bg-blue-500\"></div>\n                          <span className=\"text-sm text-gray-300\">{skill}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Agents */}\n                <div>\n                  <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-3\">Agents</div>\n                  <div className=\"bg-black/50 border border-gray-800/50 rounded-lg p-4\">\n                    <div className=\"space-y-2\">\n                      {opp.agents.map((agent, idx) => (\n                        <div key={idx} className=\"flex items-center gap-2\">\n                          <div className=\"w-1.5 h-1.5 rounded-full bg-green-500\"></div>\n                          <span className=\"text-sm font-mono text-gray-300\">{agent}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Supported Actions */}\n              <div className=\"mt-6 pt-6 border-t border-gray-800\">\n                <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-3\">Supported Actions</div>\n                <div className=\"flex flex-wrap gap-2\">\n                  {opp.supportedActions.map((action, idx) => (\n                    <span\n                      key={idx}\n                      className=\"px-3 py-1 bg-gray-800/50 border border-gray-700 rounded-full text-xs text-gray-300\"\n                    >\n                      {action}\n                    </span>\n                  ))}\n                </div>\n              </div>\n\n              {/* Performance Metrics */}\n              <div className=\"mt-6 pt-6 border-t border-gray-800\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-2\">Time to Resolution</div>\n                    <div className=\"flex items-center gap-4\">\n                      <div>\n                        <div className=\"text-sm text-gray-400\">Before</div>\n                        <div className=\"text-lg font-semibold text-white\">{opp.medianTTRBefore}</div>\n                      </div>\n                      <div className=\"text-gray-600\">→</div>\n                      <div>\n                        <div className=\"text-sm text-gray-400\">After</div>\n                        <div className=\"text-lg font-semibold text-green-400\">{opp.medianTTRAfter}</div>\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-xs uppercase tracking-wide text-gray-500 mb-2\">Confidence</div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                        opp.confidence === 'high' ? 'bg-green-900/30 text-green-400 border border-green-800/50' :\n                        opp.confidence === 'medium' ? 'bg-yellow-900/30 text-yellow-400 border border-yellow-800/50' :\n                        'bg-gray-800/50 text-gray-400 border border-gray-700'\n                      }`}>\n                        {opp.confidence.charAt(0).toUpperCase() + opp.confidence.slice(1)} Confidence\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6153},"archive/reports/components/OpportunityAnalysis-v3.tsx":{"content":"import Card from \"@/components/ui/Card\";\nimport StatusPill from \"@/components/ui/StatusPill\";\nimport { MatchedUseCase } from \"@/types/types-v3\";\nimport { FeasibilityResult } from \"@/lib/engines/feasibility-engine\";\nimport useCaseMappings from \"@/data/use-case-mappings.json\";\n\ninterface OpportunityAnalysisProps {\n  matchedUseCases: MatchedUseCase[];\n  feasibilityResults: FeasibilityResult[];\n  topN?: number;\n}\n\nexport default function OpportunityAnalysis({\n  matchedUseCases,\n  feasibilityResults,\n  topN = 10,\n}: OpportunityAnalysisProps) {\n  // Get all enabled use case IDs\n  const enabledUseCaseIds = new Set(\n    (feasibilityResults || []).flatMap((result) => result.enabled_use_cases),\n  );\n\n  // Build comprehensive list: matched use cases PLUS enabled use cases without volume matches\n  const allOpportunities: MatchedUseCase[] = [];\n\n  // First, add all matched use cases (these have impact data)\n  allOpportunities.push(...matchedUseCases);\n\n  // Then, add enabled use cases that weren't matched (no volume data, but still possible)\n  const matchedIds = new Set(matchedUseCases.map((uc) => uc.use_case_id));\n\n  (useCaseMappings as any).use_cases.forEach((uc: any) => {\n    if (enabledUseCaseIds.has(uc.id) && !matchedIds.has(uc.id)) {\n      // Create a pseudo-matched use case with estimated impact based on typical values\n      const estimatedVolume = Math.round(\n        (uc.typical_volume_pct || 0.05) * 1000,\n      ); // Assume 1000 tickets baseline\n      const estimatedHours =\n        estimatedVolume *\n        (uc.typical_ttr_hours || 1) *\n        (uc.automation_rate || 0.8);\n\n      allOpportunities.push({\n        use_case_id: uc.id,\n        name: uc.name,\n        category: uc.category,\n        description: uc.description,\n        value_proposition: uc.value_proposition,\n        fit_score: 45, // Base score for enabled but unmatched\n        estimated_monthly_deflection: estimatedVolume,\n        estimated_hours_saved: estimatedHours,\n        confidence: uc.confidence * 0.7, // Lower confidence since no volume match\n        implementation_effort: uc.implementation_effort,\n        time_to_value_days: uc.time_to_value_days,\n        prerequisites: uc.prerequisites,\n        workflow_steps: uc.workflow_steps,\n        priority:\n          uc.time_to_value_days <= 7\n            ? \"immediate\"\n            : uc.time_to_value_days <= 21\n              ? \"quick_win\"\n              : \"future\",\n        required_tools: uc.required_tools,\n      });\n    }\n  });\n\n  // Sort by fit score - show ALL opportunities\n  const topUseCases = allOpportunities.sort(\n    (a, b) => b.fit_score - a.fit_score,\n  );\n\n  if (topUseCases.length === 0) {\n    return null;\n  }\n\n  const getFitScoreColor = (score: number) => {\n    if (score >= 80) return \"text-accent-green\";\n    if (score >= 60) return \"text-accent-blue\";\n    if (score >= 40) return \"text-accent-orange\";\n    return \"text-text-tertiary\";\n  };\n\n  const getFitScoreLabel = (score: number) => {\n    if (score >= 80) return \"Excellent Fit\";\n    if (score >= 60) return \"Good Fit\";\n    if (score >= 40) return \"Moderate Fit\";\n    return \"Basic Fit\";\n  };\n\n  const getPriorityStatus = (\n    priority: string,\n  ): \"success\" | \"active\" | \"warning\" => {\n    if (priority === \"immediate\") return \"success\";\n    if (priority === \"quick_win\") return \"active\";\n    return \"warning\";\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    if (priority === \"immediate\") return \"Deploy Week 1\";\n    if (priority === \"quick_win\") return \"Deploy Month 1-2\";\n    return \"Deploy Month 3+\";\n  };\n\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n          What You Can Automate Right Now\n        </h2>\n        <p className=\"text-text-secondary\">\n          Common IT use cases that AI Workers can handle using your current\n          tools and APIs. These are ranked by impact, feasibility, and\n          time-to-value.\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        {topUseCases.map((useCase, index) => (\n          <Card key={useCase.use_case_id} hover>\n            {/* Header with Rank and Priority */}\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-accent-blue rounded-full flex items-center justify-center text-bg-primary font-bold text-lg\">\n                  {index + 1}\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold text-text-primary mb-1\">\n                    {useCase.name}\n                  </h3>\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <StatusPill status={getPriorityStatus(useCase.priority)}>\n                      {getPriorityLabel(useCase.priority)}\n                    </StatusPill>\n                    <span className=\"text-sm text-text-tertiary\">\n                      {useCase.category}\n                    </span>\n                    <StatusPill status={getPriorityStatus(useCase.priority)}>\n                      {getPriorityLabel(useCase.priority)}\n                    </StatusPill>\n                  </div>\n                </div>\n              </div>\n\n              {/* Fit Score */}\n              <div className=\"text-right\">\n                <div\n                  className={`text-3xl font-bold ${getFitScoreColor(useCase.fit_score)}`}\n                >\n                  {useCase.fit_score}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">\n                  {getFitScoreLabel(useCase.fit_score)}\n                </div>\n              </div>\n            </div>\n\n            {/* Description */}\n            <p className=\"text-text-secondary mb-6 leading-relaxed\">\n              {useCase.value_proposition}\n            </p>\n\n            {/* Impact Metrics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-bg-primary rounded-lg mb-6\">\n              <div>\n                <div className=\"text-2xl font-bold text-accent-green\">\n                  {useCase.estimated_monthly_deflection.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Tickets/Month</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-accent-blue\">\n                  {Math.round(useCase.estimated_hours_saved).toLocaleString()}{\" \"}\n                  hrs\n                </div>\n                <div className=\"text-xs text-text-tertiary\">\n                  Time Saved/Month\n                </div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-text-primary\">\n                  {useCase.time_to_value_days} days\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Time to Value</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-accent-orange\">\n                  {Math.round(useCase.confidence * 100)}%\n                </div>\n                <div className=\"text-xs text-text-tertiary\">Confidence</div>\n              </div>\n            </div>\n\n            {/* How It Works */}\n            <div className=\"mb-4\">\n              <h4 className=\"text-sm font-semibold text-text-primary mb-2\">\n                How it works:\n              </h4>\n              <ul className=\"space-y-1\">\n                {useCase.workflow_steps.map((step, i) => (\n                  <li\n                    key={i}\n                    className=\"text-sm text-text-secondary flex items-start gap-2\"\n                  >\n                    <span className=\"text-accent-green mt-0.5 flex-shrink-0\">\n                      →\n                    </span>\n                    <span>{step}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7996},"archive/reports/components/v2/PilotProjection.tsx":{"content":"export default function PilotProjection() {\n  return (\n    <div className=\"mb-16\">\n      <h2 className=\"text-4xl font-bold text-white mb-8\">What to Expect in 4 Weeks</h2>\n      <p className=\"text-lg text-gray-400 mb-8\">\n        Based on anonymized discovery data, here's what a typical 4-week pilot delivers for organizations\n        with similar tech stacks and workflows.\n      </p>\n\n      <div className=\"bg-gradient-to-br from-blue-900/20 to-green-900/20 border border-blue-800/30 rounded-lg p-8 mb-8\">\n        <h3 className=\"text-2xl font-bold text-white mb-6\">Pilot Outcomes (Weeks 1-4)</h3>\n        \n        <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n          {/* Left Column */}\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"text-sm text-gray-400 mb-2\">Ticket Deflection</div>\n              <div className=\"text-4xl font-bold text-white mb-1\">~21.5%</div>\n              <p className=\"text-sm text-gray-400\">\n                Of total ticket volume handled autonomously with proper approvals in place\n              </p>\n            </div>\n\n            <div>\n              <div className=\"text-sm text-gray-400 mb-2\">FTE Impact</div>\n              <div className=\"text-4xl font-bold text-white mb-1\">~3 FTEs</div>\n              <p className=\"text-sm text-gray-400\">\n                Worth of time returned to your team for strategic work\n              </p>\n            </div>\n          </div>\n\n          {/* Right Column */}\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"text-sm text-gray-400 mb-2\">App Access & In-App Actions TTR</div>\n              <div className=\"text-4xl font-bold text-green-400 mb-1\">Real-time</div>\n              <p className=\"text-sm text-gray-400\">\n                When approval policies exist. Includes app provisioning, group adds, license changes\n              </p>\n            </div>\n\n            <div>\n              <div className=\"text-sm text-gray-400 mb-2\">Other Requests</div>\n              <div className=\"text-4xl font-bold text-white mb-1\">50-75%</div>\n              <p className=\"text-sm text-gray-400\">\n                Faster resolution for triage, routing, and assisted workflows\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Timeline */}\n        <div className=\"border-t border-gray-700 pt-6\">\n          <h4 className=\"font-semibold text-white mb-4\">4-Week Pilot Timeline</h4>\n          <div className=\"space-y-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-24 text-sm font-semibold text-gray-400\">Week 1</div>\n              <div className=\"text-sm text-gray-300\">\n                Connector setup, approval workflow mapping, initial agent configuration\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-24 text-sm font-semibold text-gray-400\">Week 2</div>\n              <div className=\"text-sm text-gray-300\">\n                Shadow mode: agents observe and suggest actions, human approval required for all\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-24 text-sm font-semibold text-gray-400\">Week 3</div>\n              <div className=\"text-sm text-gray-300\">\n                Gradual autonomy: pre-approved categories execute autonomously, others remain assisted\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-24 text-sm font-semibold text-gray-400\">Week 4</div>\n              <div className=\"text-sm text-gray-300\">\n                Full pilot: measure deflection, TTR improvement, and team feedback for expansion\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Key Success Factors */}\n      <div className=\"bg-[#1a1a1a] border border-gray-800 rounded-lg p-6\">\n        <h3 className=\"font-bold text-white mb-4\">Key Success Factors</h3>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div className=\"space-y-3\">\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-1\">✓</span>\n              <div>\n                <div className=\"font-semibold text-white text-sm mb-1\">Pre-existing approval workflows</div>\n                <div className=\"text-sm text-gray-400\">Speeds up autonomous operations significantly</div>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-1\">✓</span>\n              <div>\n                <div className=\"font-semibold text-white text-sm mb-1\">Clear ticket categorization</div>\n                <div className=\"text-sm text-gray-400\">Enables accurate pattern matching and routing</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-1\">✓</span>\n              <div>\n                <div className=\"font-semibold text-white text-sm mb-1\">Team engagement</div>\n                <div className=\"text-sm text-gray-400\">Higher adoption when team understands the value</div>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-green-500 mt-1\">✓</span>\n              <div>\n                <div className=\"font-semibold text-white text-sm mb-1\">API access to core systems</div>\n                <div className=\"text-sm text-gray-400\">Required for real-time execution capabilities</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5789},"archive/reports/components/v4/UseCaseCards.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport Card from '@/components/ui/Card';\nimport StatusPill from '@/components/ui/StatusPill';\nimport ConnectedAppLogos from '@/components/ui/ConnectedAppLogos';\nimport { MatchedUseCase } from '@/types/types-v3';\n\ninterface UseCaseCardsProps {\n  useCases: MatchedUseCase[];\n  showRank?: boolean;\n}\n\nexport default function UseCaseCards({ useCases, showRank = true }: UseCaseCardsProps) {\n  const [expandedWorkflows, setExpandedWorkflows] = useState<Record<string, boolean>>({});\n\n  // Convert tool names from underscore format to proper names\n  const convertToolName = (tool: string): string => {\n    const toolMap: Record<string, string> = {\n      'okta': 'Okta',\n      'servicenow': 'ServiceNow',\n      'slack': 'Slack',\n      'jira': 'Jira',\n      'jira_service_management': 'Jira Service Management',\n      'zendesk': 'Zendesk',\n      'microsoft_365': 'Microsoft 365',\n      'microsoft_entra': 'Microsoft Entra',\n      'microsoft_teams': 'Microsoft Teams',\n      'google_workspace': 'Google Workspace',\n      'google_drive': 'Google Drive',\n      'google_docs': 'Google Docs',\n      'google_sheets': 'Google Sheets',\n      'google_calendar': 'Google Calendar',\n      'gmail': 'Gmail',\n      'azure_ad': 'Azure AD',\n      'salesforce': 'Salesforce',\n      'github': 'GitHub',\n      'gitlab': 'GitLab',\n      'confluence': 'Confluence',\n      'asana': 'Asana',\n      'monday_com': 'Monday.com',\n      'zoom': 'Zoom',\n      'teams': 'Teams',\n      'workday': 'Workday',\n      'bamboohr': 'BambooHR',\n      'duo_security': 'Duo Security',\n      'cyberark': 'CyberArk',\n      'jumpcloud': 'JumpCloud',\n      'freshservice': 'Freshservice',\n      'ivanti': 'Ivanti',\n      'sap_successfactors': 'SAP SuccessFactors',\n      'hibob': 'HiBob',\n      'docusign': 'DocuSign',\n      'linear': 'Linear',\n      'sharepoint': 'SharePoint'\n    };\n    \n    return toolMap[tool.toLowerCase()] || tool.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  const getFitScoreColor = (score: number) => {\n    if (score >= 80) return 'text-accent-green';\n    if (score >= 60) return 'text-accent-blue';\n    if (score >= 40) return 'text-accent-orange';\n    return 'text-text-tertiary';\n  };\n\n  const getFitScoreLabel = (score: number) => {\n    if (score >= 80) return 'Excellent Fit';\n    if (score >= 60) return 'Good Fit';\n    if (score >= 40) return 'Moderate Fit';\n    return 'Basic Fit';\n  };\n\n  const getPriorityStatus = (priority: string): 'success' | 'active' | 'warning' => {\n    if (priority === 'immediate') return 'success';\n    if (priority === 'quick_win') return 'active';\n    return 'warning';\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    if (priority === 'immediate') return 'Deploy Week 1';\n    if (priority === 'quick_win') return 'Deploy Month 1-2';\n    return 'Deploy Month 3+';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {useCases.map((useCase, index) => (\n        <Card key={useCase.use_case_id} hover>\n          {/* Rank Number */}\n          {showRank && (\n            <div className=\"text-sm font-medium mb-3\" style={{ color: '#8a8784' }}>\n              {String(index + 1).padStart(2, '0')}\n            </div>\n          )}\n\n          {/* Header with Priority */}\n          <div className=\"flex items-start justify-between mb-4\">\n            <div>\n              <h3 className=\"text-xl font-bold text-text-primary mb-1\">\n                {useCase.name}\n              </h3>\n              <span className=\"text-sm text-text-tertiary\">\n                {useCase.category}\n              </span>\n            </div>\n            \n            {/* Badge, Tool Logos and Fit Score */}\n            <div className=\"flex items-center gap-4\">\n              {/* Deploy Badge */}\n              <StatusPill status={getPriorityStatus(useCase.priority)}>\n                {getPriorityLabel(useCase.priority)}\n              </StatusPill>\n              \n              {/* Tool Logos */}\n              {useCase.required_tools && useCase.required_tools.length > 0 && (\n                <ConnectedAppLogos \n                  apps={useCase.required_tools.map(convertToolName)}\n                  maxVisible={5}\n                  size={24}\n                />\n              )}\n              \n              {/* Fit Score */}\n              <div className=\"text-right\">\n                <div className={`text-3xl font-bold ${getFitScoreColor(useCase.fit_score)}`}>\n                  {useCase.fit_score}\n                </div>\n                <div className=\"text-xs text-text-tertiary\">\n                  {getFitScoreLabel(useCase.fit_score)}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Description */}\n          <p className=\"text-text-secondary mb-6 leading-relaxed\">\n            {useCase.value_proposition}\n          </p>\n\n          {/* Impact Metrics */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-bg-primary rounded-lg mb-6\">\n            <div>\n              <div className=\"text-2xl font-bold text-accent-green\">\n                {useCase.estimated_monthly_deflection.toLocaleString()}\n              </div>\n              <div className=\"text-xs text-text-tertiary\">Tickets/Month</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-accent-blue\">\n                {Math.round(useCase.estimated_hours_saved).toLocaleString()} hrs\n              </div>\n              <div className=\"text-xs text-text-tertiary\">Time Saved/Month</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-text-primary\">\n                {useCase.time_to_value_days} days\n              </div>\n              <div className=\"text-xs text-text-tertiary\">Time to Value</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-accent-orange\">\n                {Math.round(useCase.confidence * 100)}%\n              </div>\n              <div className=\"text-xs text-text-tertiary\">Confidence</div>\n            </div>\n          </div>\n\n          {/* How It Works - Collapsible */}\n          <div className=\"mb-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <button\n                onClick={() => setExpandedWorkflows(prev => ({\n                  ...prev,\n                  [useCase.use_case_id]: !prev[useCase.use_case_id]\n                }))}\n                className=\"flex items-center gap-2 text-sm font-semibold text-text-primary hover:text-highlight transition-colors duration-200\"\n              >\n                <svg\n                  className={`w-4 h-4 transition-transform duration-200 ${expandedWorkflows[useCase.use_case_id] ? 'rotate-180' : ''}`}\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                </svg>\n                <span>How it works:</span>\n              </button>\n              \n              {/* Tool Logos on the right */}\n              {useCase.required_tools && useCase.required_tools.length > 0 && (\n                <ConnectedAppLogos \n                  apps={useCase.required_tools.map(convertToolName)}\n                  maxVisible={5}\n                  size={32}\n                />\n              )}\n            </div>\n            \n            {expandedWorkflows[useCase.use_case_id] && (\n              <ul className=\"space-y-1 mt-4\">\n                {useCase.workflow_steps.map((step, i) => (\n                  <li key={i} className=\"text-sm text-text-secondary flex items-start gap-2\">\n                    <span className=\"text-accent-green mt-0.5 flex-shrink-0\">→</span>\n                    <span>{step}</span>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":7984},"archive/reports/pages/v1/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { AssessmentData, MatchedWorker, ReadinessScore } from \"@/types\";\nimport { calculateReadinessScore } from \"@/lib/scoringAlgorithm\";\nimport { matchAIWorkers, calculateProjectedImpact } from \"@/lib/workerMatcher\";\nimport Card from \"@/components/ui/Card\";\nimport Button from \"@/components/ui/Button\";\nimport ScoreCircle from \"@/components/assessment/report/ScoreCircle\";\nimport ScoreBreakdown from \"@/components/assessment/report/ScoreBreakdown\";\nimport StatsImpactBanner from \"@/components/assessment/report/StatsImpactBanner\";\nimport AIWorkerCardCondensed from \"@/components/assessment/report/AIWorkerCardCondensed\";\nimport ImpactMetrics from \"@/components/assessment/report/ImpactMetrics\";\nimport UnlockReportModal from \"@/components/cta/UnlockReportModal\";\nimport ExecutiveSummary from \"@/components/assessment/report/ExecutiveSummary-v3\";\nimport OpportunityAnalysis from \"@/components/assessment/report/OpportunityAnalysis-v3\";\nimport BestFitUseCases from \"@/components/assessment/report/BestFitUseCases-v3\";\nimport GetStartedRoadmap from \"@/components/assessment/report/GetStartedRoadmap-v3\";\nimport ExpectedOutcomes from \"@/components/assessment/report/ExpectedOutcomes-v3\";\n\nexport default function ReportPage() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState<ReadinessScore | null>(null);\n  const [workers, setWorkers] = useState<MatchedWorker[]>([]);\n  const [impact, setImpact] = useState<any>(null);\n  const [assessmentData, setAssessmentData] = useState<AssessmentData | null>(\n    null,\n  );\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    // Get data from sessionStorage\n    const dataStr = sessionStorage.getItem(\"assessmentData\");\n    if (!dataStr) {\n      router.push(\"/\");\n      return;\n    }\n\n    const data: AssessmentData = JSON.parse(dataStr);\n    setAssessmentData(data);\n\n    // Calculate score and matches\n    setTimeout(() => {\n      const calcScore = calculateReadinessScore(data);\n      const matchedWorkers = matchAIWorkers(data);\n      const projectedImpact = calculateProjectedImpact(matchedWorkers);\n\n      setScore(calcScore);\n      setWorkers(matchedWorkers);\n      setImpact(projectedImpact);\n      setLoading(false);\n    }, 3000);\n\n    // Show modal after 30 seconds\n    const modalTimer = setTimeout(() => {\n      setShowModal(true);\n    }, 30000);\n\n    return () => clearTimeout(modalTimer);\n  }, [router]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-16 w-16 border-4 border-accent-blue border-t-transparent mb-8\" />\n          <h2 className=\"text-2xl font-bold text-text-primary mb-2\">\n            Analyzing your environment...\n          </h2>\n          <p className=\"text-text-secondary\">Generating your readiness score</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!score || !assessmentData) return null;\n\n  // Get top workers for display\n  const topWorkers = workers\n    .filter(\n      (w) => w.deploymentPhase === \"week-1\" || w.deploymentPhase === \"month-2\",\n    )\n    .slice(0, 9);\n\n  // Calculate stats for banner\n  const totalTickets =\n    parseInt(assessmentData.ticketVolume.split(\"-\")[0]) || 1000;\n  const ticketDeflection = Math.round(\n    (impact.phase2.ticketsHandled / totalTickets) * 100,\n  );\n  const hoursSavedYearly = impact.phase2.timeSaved * 12;\n\n  return (\n    <main className=\"min-h-screen bg-black py-12\">\n      <div className=\"container mx-auto px-4 max-w-7xl\">\n        {/* Header */}\n        <div className=\"mb-12\">\n          <button\n            onClick={() => router.push(\"/assessment\")}\n            className=\"text-text-tertiary hover:text-text-primary mb-4 flex items-center gap-2\"\n          >\n            ← Back to Assessment\n          </button>\n          <h1 className=\"text-4xl font-bold text-text-primary mb-2\">\n            Your Readiness Report (V1)\n          </h1>\n          <p className=\"text-text-secondary\">\n            Here's how ready your organization is for autonomous AI workers\n          </p>\n        </div>\n\n        {/* Hero Section - Overall Readiness Score + Breakdown */}\n        <div className=\"grid md:grid-cols-2 gap-8 mb-16\">\n          {/* Overall Score */}\n          <Card className=\"flex flex-col items-center justify-center\">\n            <h2 className=\"text-xl font-bold text-text-primary mb-8\">\n              Overall Readiness Score\n            </h2>\n            <ScoreCircle score={score.total} rating={score.rating} />\n          </Card>\n\n          {/* Score Breakdown */}\n          <ScoreBreakdown\n            scores={score}\n            techStackCount={assessmentData.techStack.length}\n            hasApprovalWorkflows={\n              assessmentData.approvalWorkflows === \"automated\" ||\n              assessmentData.approvalWorkflows === \"manual\"\n            }\n            repetitivePercentage={assessmentData.repetitivePercentage}\n          />\n        </div>\n\n        {/* Estimated Impact Banner */}\n        <StatsImpactBanner\n          ticketDeflection={ticketDeflection}\n          hoursSaved={hoursSavedYearly}\n          costSavings={impact.phase2.costSaved}\n          fteEquivalent={impact.phase2.ftesSaved}\n          confidence=\"Low (~40%)\"\n        />\n\n        {/* Automation Opportunities */}\n        <div className=\"mb-16\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n              Your Automation Opportunities\n            </h2>\n            <p className=\"text-text-secondary max-w-3xl mx-auto\">\n              Based on your tech stack and workflows, here's what autonomous AI\n              workers can handle\n            </p>\n          </div>\n\n          {/* 3-column grid of AI Workers */}\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {topWorkers.map((worker, index) => (\n              <AIWorkerCardCondensed\n                key={worker.id}\n                worker={worker}\n                rank={index + 1}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* Projected Impact */}\n        {impact && (\n          <ImpactMetrics phase1={impact.phase1} phase2={impact.phase2} />\n        )}\n\n        {/* CTA Section - Condensed */}\n        <div className=\"max-w-4xl mx-auto\">\n          <Card className=\"bg-gradient-to-br from-accent-blue/10 to-accent-green/10 border-accent-blue/20\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold text-text-primary mb-4\">\n                Want 100% Accurate Results?\n              </h2>\n              <p className=\"text-lg text-text-secondary mb-6 max-w-2xl mx-auto\">\n                We'll analyze your actual ticket data and show you precise\n                automation opportunities—down to the ticket category.\n              </p>\n\n              <div className=\"grid md:grid-cols-3 gap-4 mb-8 text-left\">\n                <div className=\"flex items-start gap-3\">\n                  <span className=\"text-accent-green text-xl\">✓</span>\n                  <span className=\"text-sm text-text-secondary\">\n                    Exact ticket categories to automate\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <span className=\"text-accent-green text-xl\">✓</span>\n                  <span className=\"text-sm text-text-secondary\">\n                    ROI projections for your team\n                  </span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <span className=\"text-accent-green text-xl\">✓</span>\n                  <span className=\"text-sm text-text-secondary\">\n                    Custom 90-day roadmap\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex justify-center\">\n                <Button\n                  onClick={() => setShowModal(true)}\n                  className=\"text-lg px-8 py-4\"\n                >\n                  Get My Custom Discovery Report\n                </Button>\n              </div>\n\n              {/* Trust badges */}\n              <div className=\"flex flex-wrap justify-center items-center gap-6 mt-8 text-sm text-text-tertiary\">\n                <div className=\"flex items-center gap-2\">\n                  <svg\n                    className=\"w-4 h-4\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                  <span>Private & secure</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <svg\n                    className=\"w-4 h-4\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                  <span>No commitment</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <svg\n                    className=\"w-4 h-4\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 0l-2 2a1 1 0 101.414 1.414L8 10.414l1.293 1.293a1 1 0 001.414 0l4-4z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                  <span>1,000+ IT teams assessed</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Unlock Report Modal */}\n      <UnlockReportModal\n        isOpen={showModal}\n        onClose={() => setShowModal(false)}\n      />\n    </main>\n  );\n}\n","size_bytes":10611},"archive/reports/components/v4/ExecutiveSummary.tsx":{"content":"'use client';\n\nimport { useEffect, useState, useRef } from 'react';\nimport Card from '@/components/ui/Card';\nimport { ROIResult } from '@/types/types-v3';\nimport { MatchedUseCase } from '@/lib/engines/use-case-matcher';\nimport { formatLargeNumber } from '@/lib/utils/formatNumber';\n\ninterface ExecutiveSummaryProps {\n  roiResult: ROIResult;\n  totalMonthlyTickets: number;\n  assessmentData: {\n    techStack: string[];\n    additionalContext?: string;\n  };\n  matchedUseCases: MatchedUseCase[];\n}\n\nexport default function ExecutiveSummary({ \n  roiResult, \n  totalMonthlyTickets,\n  assessmentData,\n  matchedUseCases\n}: ExecutiveSummaryProps) {\n  const [generatedInsight, setGeneratedInsight] = useState<string | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const hasGenerated = useRef(false);\n\n  // Helper function to render text with bold formatting and bullets\n  const renderFormattedText = (text: string) => {\n    const lines = text.split('\\n');\n    const elements: React.ReactNode[] = [];\n    let bulletItems: string[] = [];\n\n    lines.forEach((line, index) => {\n      // Check if line is a bullet point\n      if (line.trim().startsWith('-') || line.trim().startsWith('•')) {\n        bulletItems.push(line.replace(/^[-•]\\s*/, '').trim());\n      } else {\n        // If we have accumulated bullet items, render them first\n        if (bulletItems.length > 0) {\n          elements.push(\n            <ul key={`bullets-${index}`} className=\"space-y-2 ml-6 my-4\">\n              {bulletItems.map((item, i) => (\n                <li key={i} className=\"text-lg text-text-secondary list-disc\">\n                  {renderBoldText(item)}\n                </li>\n              ))}\n            </ul>\n          );\n          bulletItems = [];\n        }\n        \n        // Render regular text if not empty\n        if (line.trim()) {\n          elements.push(\n            <span key={`line-${index}`}>\n              {renderBoldText(line)}\n              {index < lines.length - 1 && ' '}\n            </span>\n          );\n        }\n      }\n    });\n\n    // Render any remaining bullet items\n    if (bulletItems.length > 0) {\n      elements.push(\n        <ul key=\"bullets-final\" className=\"space-y-2 ml-6 my-4\">\n          {bulletItems.map((item, i) => (\n            <li key={i} className=\"text-lg text-text-secondary list-disc\">\n              {renderBoldText(item)}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n\n    return elements;\n  };\n\n  // Helper function to render bold text\n  const renderBoldText = (text: string) => {\n    const parts = text.split(/(\\*\\*.*?\\*\\*)/g);\n    return parts.map((part, index) => {\n      if (part.startsWith('**') && part.endsWith('**')) {\n        return <strong key={index} className=\"font-semibold text-text-primary\">{part.slice(2, -2)}</strong>;\n      }\n      return part;\n    });\n  };\n\n  useEffect(() => {\n    // Only generate once - prevent re-running on every render\n    if (hasGenerated.current || generatedInsight) {\n      return;\n    }\n\n    async function generateInsight() {\n      hasGenerated.current = true;\n      setIsGenerating(true);\n\n      try {\n        // Extract top categories from ROI result\n        const topCategories = roiResult.breakdown_by_category\n          .sort((a: any, b: any) => b.hours_saved - a.hours_saved)\n          .slice(0, 3)\n          .map((cat: any) => cat.category);\n\n        // Get top 3 use cases by hours saved\n        const topUseCases = matchedUseCases\n          .sort((a, b) => b.estimated_hours_saved - a.estimated_hours_saved)\n          .slice(0, 3)\n          .map(uc => ({\n            name: uc.name,\n            category: uc.category,\n            estimatedHoursSaved: uc.estimated_hours_saved\n          }));\n\n        const response = await fetch('/api/generate-context-insight', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            userContext: assessmentData.additionalContext || '',\n            automatableTickets: roiResult.automatable_tickets,\n            totalHoursSaved: roiResult.total_hours_saved,\n            fteEquivalent: roiResult.fte_equivalent,\n            readinessScore: roiResult.automatable_pct,\n            topCategories,\n            topUseCases,\n            techStack: assessmentData.techStack\n          })\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          console.log('API response data:', data);\n          setGeneratedInsight(data.insight);\n        } else {\n          console.error('API response not OK:', response.status);\n        }\n      } catch (error) {\n        console.error('Failed to generate insight:', error);\n      } finally {\n        setIsGenerating(false);\n      }\n    }\n\n    generateInsight();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  \n  const getReadinessRating = (automatablePct: number) => {\n    if (automatablePct >= 40) return { label: 'High Readiness', color: 'text-accent-green', bgColor: 'bg-accent-green/20' };\n    if (automatablePct >= 25) return { label: 'Moderate Readiness', color: 'text-accent-blue', bgColor: 'bg-accent-blue/20' };\n    if (automatablePct >= 15) return { label: 'Early Opportunity', color: 'text-accent-orange', bgColor: 'bg-accent-orange/20' };\n    return { label: 'Foundation Building', color: 'text-text-secondary', bgColor: 'bg-text-secondary/20' };\n  };\n\n  const rating = getReadinessRating(roiResult.automatable_pct);\n\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      {/* Main Readiness Card */}\n      <Card className=\"mb-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"mb-4\">\n            <span className={`px-3 py-1 rounded-full ${rating.bgColor} ${rating.color} text-sm font-medium`}>\n              {rating.label}\n            </span>\n          </div>\n          <div className={`text-6xl font-bold ${rating.color} mb-2`}>\n            {roiResult.automatable_pct.toFixed(1)}%\n          </div>\n          <div className=\"text-xl text-text-secondary\">\n            of tickets can be automated immediately\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-4 gap-6 pt-6 border-t border-brand-secondary/10\">\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-accent-green\">\n              {roiResult.automatable_tickets.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Tickets Automatable/Month\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-accent-blue\">\n              {Math.round(roiResult.total_hours_saved).toLocaleString()} hrs\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Time Saved/Month\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-text-primary\">\n              {roiResult.fte_equivalent.toFixed(1)} FTEs\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Capacity Freed\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-accent-orange\">\n              {formatLargeNumber(roiResult.annual_value_usd, '$')}\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Annual Value\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Key Insights - Always Show */}\n      <div className=\"mt-8\">\n        {isGenerating ? (\n          <div className=\"flex items-center gap-2 text-text-tertiary\">\n            <div className=\"inline-block animate-spin rounded-full h-4 w-4 border-2 border-accent-blue border-t-transparent\" />\n            Analyzing your data...\n          </div>\n        ) : generatedInsight ? (\n          <>\n            <h2 className=\"text-2xl font-bold text-text-primary mb-6\">\n              Your IT Stack is {roiResult.automatable_pct.toFixed(0)}% Ready for AI Workers — Here's What That Means for Your Organization\n            </h2>\n            <div className=\"space-y-4 mb-6\">\n              {generatedInsight.split('\\n\\n').map((paragraph, index) => (\n                <p key={index} className=\"text-lg text-text-secondary leading-relaxed\">\n                  {renderFormattedText(paragraph)}\n                </p>\n              ))}\n            </div>\n          </>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8545},"archive/reports/components/ExecutiveSummary-v3.tsx":{"content":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport Card from '@/components/ui/Card';\nimport { ROIResult } from '@/types/types-v3';\nimport { MatchedUseCase } from '@/lib/engines/use-case-matcher';\n\ninterface ExecutiveSummaryProps {\n  roiResult: ROIResult;\n  totalMonthlyTickets: number;\n  assessmentData: {\n    techStack: string[];\n    additionalContext?: string;\n  };\n  matchedUseCases: MatchedUseCase[];\n}\n\nexport default function ExecutiveSummary({ \n  roiResult, \n  totalMonthlyTickets,\n  assessmentData,\n  matchedUseCases\n}: ExecutiveSummaryProps) {\n  const [generatedInsight, setGeneratedInsight] = useState<string | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  useEffect(() => {\n    async function generateInsight() {\n      setIsGenerating(true);\n\n      try {\n        // Extract top categories from ROI result\n        const topCategories = roiResult.breakdown_by_category\n          .sort((a: any, b: any) => b.hours_saved - a.hours_saved)\n          .slice(0, 3)\n          .map((cat: any) => cat.category);\n\n        // Get top 3 use cases by hours saved\n        const topUseCases = matchedUseCases\n          .sort((a, b) => b.estimated_hours_saved - a.estimated_hours_saved)\n          .slice(0, 3)\n          .map(uc => ({\n            name: uc.name,\n            category: uc.category,\n            estimatedHoursSaved: uc.estimated_hours_saved\n          }));\n\n        const response = await fetch('/api/generate-context-insight', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            userContext: assessmentData.additionalContext || '',\n            automatableTickets: roiResult.automatable_tickets,\n            totalHoursSaved: roiResult.total_hours_saved,\n            fteEquivalent: roiResult.fte_equivalent,\n            topCategories,\n            topUseCases,\n            techStack: assessmentData.techStack\n          })\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          console.log('API response data:', data);\n          setGeneratedInsight(data.insight);\n        } else {\n          console.error('API response not OK:', response.status);\n        }\n      } catch (error) {\n        console.error('Failed to generate insight:', error);\n      } finally {\n        setIsGenerating(false);\n      }\n    }\n\n    generateInsight();\n  }, [assessmentData, roiResult, matchedUseCases]);\n  \n  const getReadinessRating = (automatablePct: number) => {\n    if (automatablePct >= 40) return { label: 'High Readiness', color: 'text-accent-green' };\n    if (automatablePct >= 25) return { label: 'Moderate Readiness', color: 'text-accent-blue' };\n    if (automatablePct >= 15) return { label: 'Early Opportunity', color: 'text-accent-orange' };\n    return { label: 'Foundation Building', color: 'text-text-secondary' };\n  };\n\n  const rating = getReadinessRating(roiResult.automatable_pct);\n\n  return (\n    <div className=\"max-w-5xl mx-auto mb-16\">\n      {/* Main Readiness Card */}\n      <Card className=\"mb-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"mb-4\">\n            <span className=\"px-3 py-1 rounded-full bg-highlight/20 text-highlight text-sm font-medium\">\n              {rating.label}\n            </span>\n          </div>\n          <div className={`text-6xl font-bold ${rating.color} mb-2`}>\n            {roiResult.automatable_pct.toFixed(1)}%\n          </div>\n          <div className=\"text-xl text-text-secondary\">\n            of tickets can be automated immediately\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-4 gap-6 pt-6 border-t border-brand-secondary/10\">\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-accent-green\">\n              {roiResult.automatable_tickets.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Tickets Automatable/Month\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-accent-blue\">\n              {Math.round(roiResult.total_hours_saved).toLocaleString()} hrs\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Time Saved/Month\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-text-primary\">\n              {roiResult.fte_equivalent.toFixed(1)} FTEs\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Capacity Freed\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-accent-orange\">\n              ${Math.round(roiResult.annual_value_usd / 1000).toLocaleString()}K\n            </div>\n            <div className=\"text-sm text-text-tertiary mt-1\">\n              Annual Value\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Key Insights - Always Show */}\n      <div className=\"mt-8\">\n        {isGenerating ? (\n          <div className=\"flex items-center gap-2 text-text-tertiary\">\n            <div className=\"inline-block animate-spin rounded-full h-4 w-4 border-2 border-accent-blue border-t-transparent\" />\n            Analyzing your data...\n          </div>\n        ) : generatedInsight ? (\n          <>\n            <p className=\"text-lg text-text-secondary mb-6\">\n              {generatedInsight}\n            </p>\n            <div className=\"text-center\">\n              <a \n                href=\"https://www.ai.work/book-a-demo\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"px-6 py-3 bg-white text-black rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-flex items-center gap-2\"\n              >\n                <span className=\"w-2 h-2 rounded-full bg-highlight\"></span>\n                Schedule a Complete Deep Dive\n              </a>\n            </div>\n          </>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6135},"FTE_CALCULATIONS.md":{"content":"# FTE Calculation Methodology\n\n## Overview\n\nThis document explains how the AI Worker Readiness Assessment calculates Full-Time Equivalent (FTE) savings projections. These calculations are based on real customer data and are designed to be **conservative and defensible** for finance teams.\n\n## What Are FTEs?\n\n**FTE (Full-Time Equivalent)** represents the number of full-time employees whose work could be eliminated or reassigned through automation. We calculate two types:\n\n1. **Capacity FTE** - Theoretical maximum based on total hours saved\n2. **Budget FTE** - Realistic budget impact accounting for capture rate\n\n**We display Budget FTE to users** because it's more conservative and finance-friendly.\n\n## Data Sources\n\nAll calculation parameters are derived from **real customer data**, not theoretical estimates:\n\n### Time to Resolve (TTR) Values\n\nCategory-level baselines are stored in `src/app/assessment/page.tsx`:\n\n```typescript\napplications: 0.43 hours    // Based on app access ticket analysis\nhardware: 0.75 hours        // Based on hardware support tickets\nonboarding: 1.0 hours       // Based on employee onboarding workflows\nsecurity: 0.8 hours         // Based on security/compliance tickets\n```\n\nUse case-specific TTRs are in `src/data/use-case-mappings.json`:\n\n```json\n{\n  \"typical_ttr_hours\": 0.43,  // Median time for this specific ticket type\n  \"automation_rate\": 0.75,     // 75% of these tickets can be automated\n  \"cherry_picking_factor\": 0.9 // Automated tickets are 90% of median TTR\n}\n```\n\n**Important:** TTR values must be based on **actual ticket data**, not estimates. Most IT tickets resolve in 0.2-1.0 hours, not 2-6 hours.\n\n### Real Customer Validation\n\nOur calculations are validated against a real customer outcome:\n- **Input:** 9,500 monthly tickets\n- **Deflection:** 3,023 tickets/month (32%)\n- **Hours saved:** 843 hours/month\n- **Projected FTEs:** 2.8 budget FTEs\n- **Actual result:** 3 FTEs eliminated ✓\n\n## The Math: Step-by-Step\n\n### Step 1: Match Use Cases to Ticket Distribution\n\nThe `UseCaseMatcher` identifies which AI Workers can handle which tickets:\n\n```typescript\n// Example: Okta access requests\nconst monthlyVolume = 1,200 tickets\nconst automation_rate = 0.75  // 75% can be automated\nconst deflectable = 1,200 × 0.75 = 900 tickets/month\n```\n\n### Step 2: Calculate Hours Saved (Cherry-Picking Effect)\n\nAI Workers automate the **easier tickets first**, not a random sample:\n\n```typescript\n// Category baseline TTR\nconst category_ttr = 0.43 hours\n\n// Cherry-picking factor: automated tickets are easier\nconst cherry_picking_factor = 0.9\n\n// Adjusted TTR for automated tickets\nconst adjusted_ttr = 0.43 × 0.9 = 0.387 hours\n\n// Hours saved per month\nconst hours_saved = 900 tickets × 0.387 hours = 348.3 hours/month\n```\n\n**Key Insight:** `automation_rate` selects WHICH tickets (75%), `cherry_picking_factor` adjusts TTR (0.9x) because automated tickets are slightly easier.\n\n### Step 3: Apply Maximum Deflection Cap\n\n**Real-world ceiling:** No customer has exceeded 35% deflection rate.\n\n```typescript\nconst MAX_DEFLECTION_RATE = 0.35  // 35% hard cap\n\n// Example with 15,000 monthly tickets\nconst max_deflectable = 15,000 × 0.35 = 5,250 tickets\n\n// If use cases suggest 6,000 tickets, prorate everything\nif (raw_tickets > max_deflectable) {\n  const proration = 5,250 / 6,000 = 0.875\n  \n  // Apply uniformly to ALL metrics\n  final_tickets = 6,000 × 0.875 = 5,250\n  final_hours = hours × 0.875\n  category_breakdown = each × 0.875\n  full_automation = full × 0.875\n  assisted = assisted × 0.875\n}\n```\n\n### Step 4: Calculate Confidence Bands\n\n```typescript\n// Weighted confidence based on hours (not ticket count)\nconst confidence = Σ(use_case.confidence × use_case.hours) / total_hours\n// Typical range: 0.85-0.95\n\n// Three scenarios\nconst expected_hours = total_hours × confidence\nconst p70_hours = total_hours × max(confidence - 0.10, 0.4)  // Conservative\nconst p90_hours = total_hours × max(confidence - 0.20, 0.3)  // Very conservative\n```\n\n### Step 5: Convert to FTEs\n\n```typescript\n// CAPACITY FTE (theoretical maximum)\nconst capacity_fte = (total_hours_saved × 12 months) / 2000 hours\n\n// BUDGET FTE (realistic budget impact) - THIS IS WHAT WE DISPLAY\nconst capture_rate = 0.5  // 50% of saved time is realizable\nconst effective_hours_per_fte = 1800  // Actual productive hours/year\n\nconst annual_captured_hours = expected_hours × 12 × capture_rate\nconst budget_fte = annual_captured_hours / effective_hours_per_fte\n\n// Annual value\nconst fully_loaded_cost = $100,000 per FTE\nconst annual_value = budget_fte × fully_loaded_cost\n```\n\n## Complete Example\n\n**Scenario:** 18,000 monthly tickets with typical distribution\n\n### Input\n```\nMonthly tickets: 18,000\nDistribution:\n  - Applications (24%): 4,320 tickets × 0.43 hrs = 1,858 hrs\n  - Security (25%): 4,500 tickets × 0.8 hrs = 3,600 hrs\n  - Hardware (18%): 3,240 tickets × 0.75 hrs = 2,430 hrs\n  - Onboarding (10%): 1,800 tickets × 1.0 hrs = 1,800 hrs\n  - Other (23%): varies\n```\n\n### Processing\n```\n1. Use Case Matcher finds automatable tickets:\n   - Raw deflectable: ~7,200 tickets (before cap)\n   - Hours without cap: ~2,400 hrs/month\n\n2. Apply 35% deflection cap:\n   - Max tickets: 18,000 × 0.35 = 6,300 tickets\n   - Proration: 6,300 / 7,200 = 0.875\n   - Final tickets: 6,300/month\n   - Final hours: 2,400 × 0.875 = 2,100 hrs/month\n\n3. Apply cherry-picking & confidence:\n   - Expected hours: 2,100 × 0.90 = 1,890 hrs/month\n   - P70 (conservative): 2,100 × 0.80 = 1,680 hrs/month\n\n4. Calculate FTEs:\n   - Annual captured: 1,890 × 12 × 0.5 = 11,340 hrs\n   - Budget FTE: 11,340 / 1,800 = 6.3 FTEs\n   - Annual value: 6.3 × $100K = $630,000\n```\n\n### ⚠️ WRONG (Old Broken Calculation)\n```\nUsing old inflated TTR values:\n  - Security: 4,500 × 3.0 hrs = 13,500 hrs (WRONG!)\n  - Applications: 4,320 × 1.7 hrs = 7,344 hrs (WRONG!)\n  - Total: ~10,800 hrs/month → 36 FTEs ❌\n```\n\n## Key Constraints & Safeguards\n\n### 1. Maximum Deflection Cap (35%)\n```typescript\n// Enforced in: src/lib/engines/roi-calculator.ts\nprivate readonly MAX_DEFLECTION_RATE = 0.35;\n\n// No matter what, tickets ≤ total_monthly_tickets × 0.35\n```\n\n### 2. TTR Value Ranges\n```typescript\n// All TTR values must be in this range\nconst VALID_TTR_RANGE = [0.2, 1.5] hours\n\n// Most should be 0.2-1.0 hours\n// Only complex workflows (onboarding, offboarding) reach 1.0-1.5\n```\n\n### 3. Automation Rate Bounds\n```typescript\n// Realistic automation rates\nconst AUTOMATION_RATE_RANGE = [0.60, 0.75]\n\n// 60-75% of tickets in a category can be automated\n// Never 90-100% (unrealistic)\n```\n\n### 4. Cherry-Picking Factor\n```typescript\n// Automated tickets are slightly easier than median\nconst CHERRY_PICKING_RANGE = [0.85, 1.0]\n\n// 0.9 is typical: automated tickets are 90% of median TTR\n// Never below 0.85 (too aggressive)\n```\n\n### 5. Volume Percentage Stacking\n```typescript\n// Total typical_volume_pct across all use cases\nconst TOTAL_VOLUME_COVERAGE = ~0.60 (60% max)\n\n// Individual use cases typically:\n// - High-volume: 6-10% (Okta access, app requests)\n// - Medium: 3-5% (group management, password resets)\n// - Low: 1-2% (complex workflows)\n```\n\n## File Locations\n\n### Configuration Files\n- **Category TTRs**: `src/app/assessment/page.tsx` (lines 60-70)\n- **Use Case Data**: `src/data/use-case-mappings.json`\n- **Benchmarks**: `src/data/benchmarks.json`\n\n### Calculation Engines\n- **ROI Calculator**: `src/lib/engines/roi-calculator.ts`\n- **Use Case Matcher**: `src/lib/engines/use-case-matcher.ts`\n- **Feasibility Engine**: `src/lib/engines/feasibility-engine.ts`\n\n### Display Components\n- **Executive Summary**: `src/components/assessment/report/v5/ExecutiveSummary.tsx`\n- **Opportunity Analysis**: `src/components/assessment/report/v5/OpportunityAnalysis.tsx`\n\n## How to Validate Calculations\n\n### 1. Sanity Check FTE Range\n```typescript\n// For typical IT organizations (10,000-30,000 tickets/month)\nconst EXPECTED_FTE_RANGE = [2, 12]\n\n// If outside this range, investigate:\nif (budget_fte < 2) {\n  // Check: TTR values too low? Automation rates too conservative?\n}\nif (budget_fte > 12) {\n  // Check: TTR values inflated? Cap not applied? Volume stacking?\n}\n```\n\n### 2. Verify Deflection Percentage\n```typescript\nconst deflection_pct = (automatable_tickets / total_tickets) × 100\n\n// Should NEVER exceed 35%\nassert(deflection_pct <= 35, \"Deflection cap not applied!\")\n\n// Typical range: 25-35%\n```\n\n### 3. Check Hours per Ticket\n```typescript\nconst avg_hours_per_ticket = total_hours_saved / automatable_tickets\n\n// Should be in range [0.2, 1.0] for most scenarios\n// If > 1.0, check for inflated TTR values\n```\n\n### 4. Validate Against Real Data\n```typescript\n// Known good scenario (real customer)\nconst validation = {\n  input_tickets: 9500,\n  deflected_tickets: 3023,\n  monthly_hours: 843,\n  budget_fte: 2.8\n}\n\n// Your calculation should match ±10%\n```\n\n## How to Update Data Safely\n\n### Updating Category TTR Values\n\n**Location:** `src/app/assessment/page.tsx`\n\n```typescript\n// ✅ CORRECT: Based on real ticket data\nconst categoryMapping = {\n  applications: {key: 'app_access', ttr: 0.43},  // From 500+ tickets\n  hardware: {key: 'hardware', ttr: 0.75},        // From 300+ tickets\n}\n\n// ❌ WRONG: Guesswork or theoretical\nconst categoryMapping = {\n  applications: {key: 'app_access', ttr: 2.0},  // NO! Too high!\n}\n```\n\n**Process:**\n1. Export ticket data from ITSM system\n2. Calculate median resolution time (not mean - median is more robust)\n3. Filter out outliers (>2 hours typically indicates escalation)\n4. Update TTR value\n5. Run validation test (see below)\n\n### Updating Use Case Data\n\n**Location:** `src/data/use-case-mappings.json`\n\n```json\n{\n  \"typical_ttr_hours\": 0.43,      // Median from real tickets\n  \"automation_rate\": 0.75,         // Conservative estimate (60-75%)\n  \"cherry_picking_factor\": 0.9,   // Typically 0.85-1.0\n  \"typical_volume_pct\": 0.08,     // % of total tickets (sum ≤ 60%)\n  \"confidence\": 0.95              // 0.7-0.95 based on API maturity\n}\n```\n\n**Validation Checklist:**\n- [ ] `typical_ttr_hours` is 0.2-1.5 hours\n- [ ] `automation_rate` is 0.60-0.75\n- [ ] `cherry_picking_factor` is 0.85-1.0\n- [ ] `typical_volume_pct` is reasonable (most 0.01-0.10)\n- [ ] Sum of all `typical_volume_pct` ≤ 0.60\n- [ ] `confidence` is 0.70-0.95\n\n### Testing Changes\n\nAfter updating any calculation parameters:\n\n```bash\n# 1. Clear build cache\nrm -rf .next\n\n# 2. Rebuild\nnpm run build\n\n# 3. Run dev server\nnpm run dev\n\n# 4. Test with known scenarios\n# Scenario 1: 15,000 tickets → expect 3-8 FTEs\n# Scenario 2: 9,500 tickets → expect ~3 FTEs\n# Scenario 3: 25,000 tickets → expect 8-12 FTEs\n\n# 5. Verify deflection cap is hit\n# With high ticket counts, should see exactly 35% deflection\n```\n\n## Common Issues & Fixes\n\n### Issue: FTE Projections Too High (>20 FTEs)\n\n**Symptoms:** Budget FTE shows 30-50 FTEs for normal ticket volumes\n\n**Root Cause:** Inflated TTR values\n\n**Fix:**\n```typescript\n// Check category TTRs in assessment/page.tsx\n// Should be 0.43-1.0, NOT 1.7-4.0\n\n// Before (WRONG):\nhardware: {ttr: 2.5}  // ❌\n\n// After (CORRECT):\nhardware: {ttr: 0.75}  // ✓\n```\n\n### Issue: FTE Projections Too Low (<1 FTE)\n\n**Symptoms:** Budget FTE shows 0.5 FTEs for 20,000 tickets/month\n\n**Root Cause:** \n- TTR values too conservative\n- Automation rates too low\n- Not enough use cases matched\n\n**Fix:**\n1. Verify TTR values match real ticket data\n2. Check automation_rate is 60-75%, not 30-40%\n3. Ensure tech stack matching is working (check feasibility results)\n\n### Issue: Deflection Exceeds 35%\n\n**Symptoms:** More than 35% of tickets shown as automatable\n\n**Root Cause:** Deflection cap not being applied\n\n**Fix:**\n```typescript\n// Check roi-calculator.ts line 63\nconst maxDeflectableTickets = totalMonthlyTickets * this.MAX_DEFLECTION_RATE;\n\n// Ensure this is 0.35, not higher\nprivate readonly MAX_DEFLECTION_RATE = 0.35;\n```\n\n### Issue: Numbers Don't Match Real Customer Data\n\n**Symptoms:** Projections significantly different from known outcomes\n\n**Fix:**\n1. Run validation scenario (9,500 tickets → 2.8 FTEs)\n2. Check proration factor is being applied correctly\n3. Verify confidence weighting isn't inflating/deflating results\n4. Ensure capture_rate is 0.5 (50%)\n\n## Formula Reference Card\n\n### Quick Reference\n```\nDeflectable Tickets = min(\n  Σ(category_volume × automation_rate),\n  total_tickets × 0.35\n)\n\nHours per Ticket = category_ttr × cherry_picking_factor\n\nTotal Hours = Σ(deflectable_tickets × hours_per_ticket)\n\nExpected Hours = total_hours × weighted_confidence\n\nCaptured Hours = expected_hours × 12 months × 0.5 capture\n\nBudget FTE = captured_hours / 1800 effective_hours\n\nAnnual Value = budget_fte × $100,000\n```\n\n## Change Log\n\n**October 28, 2025** - Fixed critical bug where category TTR values were 3-5x too high\n- Updated applications: 1.7 → 0.43 hrs\n- Updated hardware: 2.5 → 0.75 hrs  \n- Updated onboarding: 4.0 → 1.0 hrs\n- Updated security: 3.0 → 0.8 hrs\n- Result: FTE projections dropped from 36 to 3-8 (realistic range)\n\n## Support\n\nFor questions or issues with FTE calculations:\n1. Review this document\n2. Check `replit.md` for recent changes\n3. Validate against known customer data\n4. Test with the validation scenarios above\n","size_bytes":13230}},"version":2}